{"version":3,"file":"static/js/26.178a19f0.chunk.js","mappings":"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","sources":["services/BackendService.ts","components/DataPreview.tsx","components/SurveyUpload.tsx"],"sourcesContent":["import { \r\n  ISurveyData, \r\n  ISurveyRow \r\n} from '../types/survey';\r\n\r\nconst API_BASE_URL = 'http://localhost:3001/api';\r\n\r\nclass BackendService {\r\n  private static instance: BackendService;\r\n\r\n  private constructor() {}\r\n\r\n  public static getInstance(): BackendService {\r\n    if (!BackendService.instance) {\r\n      BackendService.instance = new BackendService();\r\n    }\r\n    return BackendService.instance;\r\n  }\r\n\r\n  // Get survey metadata (includes original columns list)\r\n  public async getSurveyMeta(surveyId: string): Promise<{ columns?: string[] }> {\r\n    const response = await fetch(`${API_BASE_URL}/survey/${surveyId}/meta`);\r\n    if (!response.ok) throw new Error('Failed to fetch survey metadata');\r\n    return await response.json();\r\n  }\r\n\r\n  // Upload a survey file\r\n  public async uploadSurvey(\r\n    file: File,\r\n    surveyName: string,\r\n    surveyYear: number,\r\n    surveyType: string,\r\n    onProgress?: (percent: number) => void\r\n  ): Promise<{ surveyId: string; rowCount: number }> {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    formData.append('name', surveyName);\r\n    formData.append('year', surveyYear.toString());\r\n    formData.append('type', surveyType);\r\n\r\n    // Use XHR to report real upload progress\r\n    const xhr = new XMLHttpRequest();\r\n    const promise = new Promise<{ surveyId: string; rowCount: number }>((resolve, reject) => {\r\n      xhr.open('POST', `${API_BASE_URL}/upload`);\r\n      xhr.onload = () => {\r\n        if (xhr.status >= 200 && xhr.status < 300) {\r\n          try {\r\n            const result = JSON.parse(xhr.responseText);\r\n            resolve({ surveyId: result.surveyId, rowCount: result.rowCount });\r\n          } catch (err) {\r\n            reject(new Error('Invalid server response'));\r\n          }\r\n        } else {\r\n          reject(new Error(`Upload failed: ${xhr.status} ${xhr.statusText}`));\r\n        }\r\n      };\r\n      xhr.onerror = () => reject(new Error('Network error during upload'));\r\n      xhr.upload.onprogress = (event) => {\r\n        if (!onProgress || !event.lengthComputable) return;\r\n        const percent = Math.round((event.loaded / event.total) * 100);\r\n        onProgress(percent);\r\n      };\r\n      xhr.send(formData);\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  // Get all surveys\r\n  public async getAllSurveys(): Promise<ISurveyData[]> {\r\n    const response = await fetch(`${API_BASE_URL}/surveys`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch surveys');\r\n    }\r\n\r\n    const surveys = await response.json();\r\n    \r\n    // Transform backend format to frontend format\r\n    return surveys.map((survey: any) => ({\r\n      id: survey.id,\r\n      name: survey.name,\r\n      year: survey.year.toString(),\r\n      type: survey.type,\r\n      uploadDate: survey.uploadDate,\r\n      rowCount: survey.rowCount ?? survey.row_count ?? 0,\r\n      specialtyCount: survey.specialtyCount ?? survey.specialty_count ?? 0,\r\n      dataPoints: survey.dataPoints ?? survey.data_points ?? 0,\r\n      colorAccent: survey.colorAccent || '#6366F1',\r\n      metadata: survey.metadata\r\n    }));\r\n  }\r\n\r\n  // Get survey data with filters\r\n  // CRITICAL: Always pass options.limit for large datasets to avoid missing data\r\n  // See docs/ALLERGY_IMMUNOLOGY_FIX.md for details on the 100-row default limit issue\r\n  public async getSurveyData(\r\n    surveyId: string,\r\n    filters?: {\r\n      specialty?: string;\r\n      providerType?: string;\r\n      region?: string;\r\n    },\r\n    options?: { page?: number; limit?: number }\r\n  ): Promise<{ rows: ISurveyRow[]; pagination?: { page: number; limit: number; total: number; pages: number } }>{\r\n    const params = new URLSearchParams();\r\n    if (filters?.specialty) params.append('specialty', filters.specialty);\r\n    if (filters?.providerType) params.append('providerType', filters.providerType);\r\n    if (filters?.region) params.append('region', filters.region);\r\n    if (options?.page) params.append('page', String(options.page));\r\n    if (options?.limit) params.append('limit', String(options.limit));\r\n\r\n    const response = await fetch(`${API_BASE_URL}/survey/${surveyId}/data?${params.toString()}`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch survey data');\r\n    }\r\n\r\n    const data = await response.json();\r\n    \r\n    // Transform backend format to frontend format\r\n    // Backend returns { data: [...], pagination: {...} }\r\n    const surveyData = data.data || data;\r\n    // Keep all keys so the grid can render every original column.\r\n    const rows = surveyData.map((row: any) => ({ ...row }));\r\n    const pagination = data.pagination\r\n      ? {\r\n          page: Number(data.pagination.page) || 1,\r\n          limit: Number(data.pagination.limit) || rows.length,\r\n          total: Number(data.pagination.total) || rows.length,\r\n          pages: Number(data.pagination.pages) || 1,\r\n        }\r\n      : undefined;\r\n    return { rows, pagination };\r\n  }\r\n\r\n  // Get available filters\r\n  public async getAvailableFiltersForSurvey(surveyId: string): Promise<{\r\n    specialties: string[];\r\n    providerTypes: string[];\r\n    regions: string[];\r\n  }> {\r\n    const response = await fetch(`${API_BASE_URL}/survey/${surveyId}/filters`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch filters');\r\n    }\r\n\r\n    return await response.json();\r\n  }\r\n\r\n  // Delete a survey\r\n  public async deleteSurvey(surveyId: string): Promise<void> {\r\n    const response = await fetch(`${API_BASE_URL}/survey/${surveyId}`, {\r\n      method: 'DELETE',\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Failed to delete survey');\r\n    }\r\n  }\r\n\r\n  // Delete all surveys\r\n  public async deleteAllSurveys(): Promise<void> {\r\n    const response = await fetch(`${API_BASE_URL}/surveys`, { method: 'DELETE' });\r\n    if (!response.ok) throw new Error('Failed to delete all surveys');\r\n  }\r\n\r\n  // Export survey data\r\n  public async exportSurveyData(\r\n    surveyId: string,\r\n    format: 'csv' | 'json' = 'csv'\r\n  ): Promise<Blob> {\r\n    const response = await fetch(`${API_BASE_URL}/survey/${surveyId}/export?format=${format}`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Failed to export survey data');\r\n    }\r\n\r\n    return await response.blob();\r\n  }\r\n\r\n  // Health check\r\n  public async healthCheck(): Promise<boolean> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/health`);\r\n      return response.ok;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default BackendService;\r\n","import React, { useState, useEffect, useMemo, Suspense, lazy } from 'react';\r\nimport {\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  Box\r\n} from '@mui/material';\r\nimport BackendService from '../services/BackendService';\r\n\r\n// Lazy load AG Grid to reduce initial bundle size\r\nconst AgGridWrapper = lazy(() => import('./AgGridWrapper'));\r\n\r\n// Loading component for AG Grid\r\nconst AgGridLoadingSpinner = () => (\r\n  <div className=\"flex items-center justify-center h-64\">\r\n    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600\"></div>\r\n    <span className=\"ml-2 text-gray-600\">Loading data table...</span>\r\n  </div>\r\n);\r\n\r\n// Custom header component for pinning columns\r\nconst CustomHeader = (props: any) => {\r\n  const { displayName, onPinColumn, colId, isSpecialty, isNumeric } = props;\r\n  const [isPinned, setIsPinned] = useState(false);\r\n  \r\n  const handlePinClick = () => {\r\n    setIsPinned(!isPinned);\r\n    onPinColumn(colId);\r\n  };\r\n\r\n  return (\r\n    <div className={`flex items-center w-full ${isNumeric ? 'justify-end' : 'justify-between'}`}>\r\n      <span className={`truncate ${isSpecialty ? 'font-semibold' : ''} ${isNumeric ? 'text-right' : ''}`}>{displayName}</span>\r\n      <button\r\n        onClick={handlePinClick}\r\n        className={`ml-2 p-1 rounded hover:bg-gray-100 transition-colors ${\r\n          isPinned ? 'text-indigo-600' : 'text-gray-400'\r\n        }`}\r\n        title={isPinned ? 'Unfreeze column' : 'Freeze column'}\r\n      >\r\n        {isPinned ? (\r\n          <svg className=\"w-3 h-3\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n            <path fillRule=\"evenodd\" d=\"M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z\" clipRule=\"evenodd\" />\r\n          </svg>\r\n        ) : (\r\n          <svg className=\"w-3 h-3\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n            <path d=\"M5 4a2 2 0 012-2h6a2 2 0 012 2v14l-5-2.5L5 18V4z\" />\r\n          </svg>\r\n        )}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface DataPreviewProps {\r\n  file: {\r\n    id: string;\r\n    fileName: string;\r\n    surveyType: string;\r\n    surveyYear: string;\r\n    uploadDate: Date;\r\n    fileContent?: string;\r\n  };\r\n  onError: (message: string) => void;\r\n  globalFilters: {\r\n    specialty: string;\r\n    providerType: string;\r\n    region: string;\r\n  };\r\n  onFilterChange: (filterName: string, value: string) => void;\r\n}\r\n\r\ninterface FileStats {\r\n  columnNames: string[];\r\n  totalRows: number;\r\n  uniqueSpecialties: number;\r\n  totalDataPoints: number;\r\n}\r\n\r\nconst DataPreview: React.FC<DataPreviewProps> = ({ file, onError, globalFilters, onFilterChange }) => {\r\n  const [previewData, setPreviewData] = useState<string[][]>([]);\r\n  const [originalData, setOriginalData] = useState<any[]>([]);\r\n  const [stats, setStats] = useState<FileStats | null>(null);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageSize] = useState(100);\r\n  const [pagination, setPagination] = useState<{ page: number; limit: number; total: number; pages: number } | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isRefreshing, setIsRefreshing] = useState(false);\r\n  const rowsPerPage = 10;\r\n  const [gridApi, setGridApi] = useState<any | null>(null);\r\n  const [columnApi, setColumnApi] = useState<any | null>(null);\r\n  // Removed table-level quick search to rely on existing dropdown filters\r\n  const selectableHeaders = useMemo(() => (previewData[0] || []) as string[], [previewData]);\r\n  const [pinColumnId, setPinColumnId] = useState<string>('');\r\n\r\n  const [serverSpecialties, setServerSpecialties] = useState<string[]>([]);\r\n  const [serverProviderTypes, setServerProviderTypes] = useState<string[]>([]);\r\n  const [serverRegions, setServerRegions] = useState<string[]>([]);\r\n\r\n  const handleFilterChange = (\r\n    event: React.ChangeEvent<{ name?: string; value: unknown }> | any\r\n  ) => {\r\n    onFilterChange(event.target.name, event.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let isCancelled = false;\r\n    const loadSurveyData = async () => {\r\n      try {\r\n        // Only show loading on initial load or page change, not filter changes\r\n        if (currentPage === 1 && !originalData.length) {\r\n          setIsLoading(true);\r\n        }\r\n        \r\n        const backendService = BackendService.getInstance();\r\n        \r\n        // Pass current filters to server for server-side filtering\r\n        const filters = {\r\n          specialty: globalFilters.specialty || undefined,\r\n          providerType: globalFilters.providerType || undefined,\r\n          region: globalFilters.region || undefined\r\n        };\r\n        \r\n        const { rows: surveyData, pagination } = await backendService.getSurveyData(\r\n          file.id,\r\n          filters,\r\n          { page: currentPage, limit: pageSize }\r\n        );\r\n        \r\n        if (!isCancelled && surveyData.length > 0) {\r\n          // Store original data for filtering\r\n          setOriginalData(surveyData);\r\n          \r\n          // Prefer original CSV header order from survey metadata if available\r\n          let headers: string[] = [];\r\n          try {\r\n            const meta = await BackendService.getInstance().getSurveyMeta(file.id);\r\n            if (Array.isArray(meta.columns) && meta.columns.length > 0) {\r\n              headers = meta.columns;\r\n            } else {\r\n              headers = Object.keys(surveyData[0]);\r\n            }\r\n          } catch {\r\n            headers = Object.keys(surveyData[0]);\r\n          }\r\n          // Hide db identifiers from preview\r\n          headers = headers.filter(h => h.toLowerCase() !== 'id' && h.toLowerCase() !== 'surveyid');\r\n          const rows = surveyData.map(row => headers.map(header => String(row[header as keyof typeof row] || '')));\r\n          \r\n          setStats({\r\n            columnNames: headers,\r\n            totalRows: surveyData.length,\r\n            uniqueSpecialties: new Set(surveyData.map(row => row.specialty)).size,\r\n            totalDataPoints: surveyData.length * headers.length\r\n          });\r\n          setPreviewData([headers, ...rows]);\r\n        }\r\n        if (!isCancelled && pagination) {\r\n          setPagination(pagination);\r\n        }\r\n        if (!isCancelled) setIsLoading(false);\r\n      } catch (error) {\r\n        console.error('Error loading survey data:', error);\r\n        onError('Error loading survey data from backend');\r\n        if (!isCancelled) setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    if (file.id) {\r\n      loadSurveyData();\r\n    }\r\n    return () => {\r\n      isCancelled = true;\r\n    };\r\n  }, [file.id, currentPage, pageSize]); // Removed globalFilters dependency to prevent flickering\r\n\r\n  // Separate effect for filter changes with debouncing\r\n  useEffect(() => {\r\n    let isCancelled = false;\r\n    let timeoutId: NodeJS.Timeout;\r\n    \r\n    const loadFilteredData = async () => {\r\n      try {\r\n        setIsRefreshing(true);\r\n        const backendService = BackendService.getInstance();\r\n        \r\n        const filters = {\r\n          specialty: globalFilters.specialty || undefined,\r\n          providerType: globalFilters.providerType || undefined,\r\n          region: globalFilters.region || undefined\r\n        };\r\n        \r\n        const { rows: surveyData, pagination } = await backendService.getSurveyData(\r\n          file.id,\r\n          filters,\r\n          { page: 1, limit: pageSize } // Reset to page 1 when filters change\r\n        );\r\n        \r\n        if (!isCancelled && surveyData.length > 0) {\r\n          setOriginalData(surveyData);\r\n          \r\n          // Reuse existing headers if available\r\n          let headers: string[] = [];\r\n          if (previewData[0] && previewData[0].length > 0) {\r\n            headers = previewData[0];\r\n          } else {\r\n            try {\r\n              const meta = await BackendService.getInstance().getSurveyMeta(file.id);\r\n              if (Array.isArray(meta.columns) && meta.columns.length > 0) {\r\n                headers = meta.columns;\r\n              } else {\r\n                headers = Object.keys(surveyData[0]);\r\n              }\r\n            } catch {\r\n              headers = Object.keys(surveyData[0]);\r\n            }\r\n          }\r\n          \r\n          headers = headers.filter(h => h.toLowerCase() !== 'id' && h.toLowerCase() !== 'surveyid');\r\n          const rows = surveyData.map(row => headers.map(header => String(row[header as keyof typeof row] || '')));\r\n          \r\n          setStats({\r\n            columnNames: headers,\r\n            totalRows: surveyData.length,\r\n            uniqueSpecialties: new Set(surveyData.map(row => row.specialty)).size,\r\n            totalDataPoints: surveyData.length * headers.length\r\n          });\r\n          setPreviewData([headers, ...rows]);\r\n          setCurrentPage(1); // Reset to first page\r\n        }\r\n        if (!isCancelled && pagination) {\r\n          setPagination(pagination);\r\n        }\r\n        if (!isCancelled) setIsRefreshing(false);\r\n      } catch (error) {\r\n        console.error('Error loading filtered data:', error);\r\n        onError('Error loading filtered data from backend');\r\n        if (!isCancelled) setIsRefreshing(false);\r\n      }\r\n    };\r\n\r\n    // Debounce filter changes to prevent rapid API calls\r\n    timeoutId = setTimeout(() => {\r\n      if (file.id) {\r\n        loadFilteredData();\r\n      }\r\n    }, 300); // 300ms debounce\r\n\r\n    return () => {\r\n      isCancelled = true;\r\n      clearTimeout(timeoutId);\r\n    };\r\n  }, [globalFilters.specialty, globalFilters.providerType, globalFilters.region, file.id, pageSize]);\r\n\r\n  // Load global filter options from server (not paginated)\r\n  useEffect(() => {\r\n    let cancelled = false;\r\n    const loadFilters = async () => {\r\n      try {\r\n        const f = await BackendService.getInstance().getAvailableFiltersForSurvey(file.id);\r\n        if (cancelled) return;\r\n        setServerSpecialties((f.specialties || []).sort());\r\n        setServerProviderTypes((f.providerTypes || []).sort());\r\n        setServerRegions((f.regions || []).sort());\r\n      } catch {}\r\n    };\r\n    if (file.id) loadFilters();\r\n    return () => { cancelled = true; };\r\n  }, [file.id]);\r\n\r\n  // Cascading filter options based on current selections\r\n  const cascadingFilterOptions = useMemo(() => {\r\n    // Use server-side filter options which have access to the full dataset\r\n    // Only apply cascading logic if we have server options\r\n    if (!serverSpecialties.length && !serverProviderTypes.length && !serverRegions.length) {\r\n      return {\r\n        specialties: [],\r\n        providerTypes: [],\r\n        regions: []\r\n      };\r\n    }\r\n\r\n    // For now, return all server options until we implement proper server-side cascading\r\n    // The server /filters endpoint already has access to the full dataset\r\n    return {\r\n      specialties: serverSpecialties,\r\n      providerTypes: serverProviderTypes,\r\n      regions: serverRegions\r\n    };\r\n  }, [serverSpecialties, serverProviderTypes, serverRegions]);\r\n\r\n  const filteredData = useMemo(() => {\r\n    if (!originalData.length || !stats) return [];\r\n\r\n    // Server is now handling the filtering, so just convert to display format\r\n    if (originalData.length > 0 && previewData[0]) {\r\n      const headers = previewData[0];\r\n      return originalData.map(row => headers.map(header => String(row[header as keyof typeof row] || '')));\r\n    }\r\n\r\n    return [];\r\n  }, [originalData, stats, previewData]);\r\n\r\n  const totalPages = pagination?.pages ?? 1;\r\n\r\n  // Formatting helpers\r\n  const formatCurrency = (value: any, decimals: number) => {\r\n    const num = typeof value === 'number' ? value : parseFloat(String(value).replace(/[^0-9.-]/g, ''));\r\n    if (Number.isNaN(num)) return value ?? '';\r\n    return num.toLocaleString('en-US', { style: 'currency', currency: 'USD', minimumFractionDigits: decimals, maximumFractionDigits: decimals });\r\n  };\r\n  const formatNumber = (value: any, decimals: number) => {\r\n    const num = typeof value === 'number' ? value : parseFloat(String(value).replace(/[^0-9.-]/g, ''));\r\n    if (Number.isNaN(num)) return value ?? '';\r\n    return num.toLocaleString('en-US', { minimumFractionDigits: decimals, maximumFractionDigits: decimals });\r\n  };\r\n\r\n  const createColumnDefs = () => {\r\n    // If we have the server-derived headers, use them; otherwise fall back to previewData detection\r\n    const headers = previewData[0] || [];\r\n    return headers\r\n      .filter((header: string) => {\r\n        const lower = String(header).toLowerCase();\r\n        return lower !== 'id' && lower !== 'surveyid';\r\n      })\r\n      .map((header: string) => {\r\n      const key = header;\r\n      const lower = header.toLowerCase();\r\n      const isTcc = lower.startsWith('tcc_') || lower.includes('total_cash') || lower.includes('tcc');\r\n      const isCf = lower.startsWith('cf_') || lower.includes('conversion');\r\n      const isWrvu = lower.includes('wrvu');\r\n      const isCount = lower === 'n_orgs' || lower === 'n_incumbents';\r\n      const isNumeric = isTcc || isCf || isWrvu || isCount;\r\n      const isSpecialty = lower.includes('specialty');\r\n\r\n      return {\r\n        headerName: header,\r\n        field: key,\r\n        sortable: true,\r\n        filter: isNumeric ? 'agNumberColumnFilter' : 'agTextColumnFilter',\r\n        resizable: true,\r\n        cellClass: isNumeric ? 'ag-right-aligned-cell' : (isSpecialty ? 'font-semibold' : undefined),\r\n        headerClass: isNumeric ? 'ag-right-aligned-header' : undefined,\r\n        headerComponent: 'CustomHeader',\r\n        headerComponentParams: {\r\n          onPinColumn: (colId: string) => {\r\n            if (!columnApi) return;\r\n            const column = columnApi.getColumn(colId);\r\n            const isPinned = column?.getColDef().pinned === 'left';\r\n            columnApi.applyColumnState({\r\n              state: [{ colId, pinned: isPinned ? null : 'left' }]\r\n            });\r\n          },\r\n          isSpecialty: isSpecialty,\r\n          isNumeric: isNumeric\r\n        },\r\n        valueGetter: (params: any) => {\r\n          const raw = params.data[key];\r\n          if (isNumeric) {\r\n            const num = parseFloat(String(raw).replace(/[^0-9.-]/g, ''));\r\n            return Number.isNaN(num) ? null : num;\r\n          }\r\n          return raw;\r\n        },\r\n        valueFormatter: (params: any) => {\r\n          const raw = params.value ?? params.data?.[key];\r\n          if (raw === undefined || raw === null) return '';\r\n          if (isTcc) return formatCurrency(raw, 0);\r\n          if (isCf) return formatCurrency(raw, 2);\r\n          if (isWrvu || isCount) return formatNumber(raw, 0);\r\n          return raw;\r\n        },\r\n      } as any;\r\n    });\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"w-full bg-white shadow-sm\">\r\n        {/* Keep the filter controls visible during loading */}\r\n        <Box sx={{ \r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          p: 2, \r\n          borderBottom: 1, \r\n          borderColor: 'divider'\r\n        }}>\r\n          {/* Header with Clear Filter Button */}\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900\">Survey Preview</h3>\r\n            <button\r\n              disabled\r\n              className=\"inline-flex items-center px-3 py-2 text-sm font-medium text-gray-400 cursor-not-allowed\"\r\n              title=\"Clear all filters\"\r\n            >\r\n              <div className=\"relative w-4 h-4 mr-2\">\r\n                <svg className=\"w-4 h-4 text-gray-300\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                  <path d=\"M3 3a1 1 0 011-1h12a1 1 0 011 1v3a1 1 0 01-.293.707L12 11.414V15a1 1 0 01-.293.707l-2 2A1 1 0 018 17v-5.586L3.293 6.707A1 1 0 013 6V3z\" />\r\n                </svg>\r\n              </div>\r\n              <span className=\"text-xs\">Clear Filters</span>\r\n            </button>\r\n          </div>\r\n\r\n          {/* Filter Dropdowns - Disabled during loading */}\r\n          <div className=\"grid grid-cols-3 gap-4\">\r\n            {[...Array(3)].map((_, i) => (\r\n              <div key={i} className=\"animate-pulse\">\r\n                <div className=\"h-10 bg-gray-200 rounded-md\"></div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </Box>\r\n\r\n        {/* Data Table Loading State */}\r\n        <div className=\"ag-theme-alpine\" style={{ height: 520, width: '100%' }}>\r\n          <div className=\"animate-pulse\">\r\n            <div className=\"h-10 bg-gray-200 mb-2\"></div>\r\n            {[...Array(10)].map((_, i) => (\r\n              <div key={i} className=\"h-8 bg-gray-100 mb-1\"></div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full bg-white shadow-sm\">\r\n      {/* Filter Controls */}\r\n      <Box sx={{ \r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        p: 2, \r\n        borderBottom: 1, \r\n        borderColor: 'divider'\r\n      }}>\r\n        {/* Header with Clear Filter Button */}\r\n        <div className=\"flex items-center justify-between mb-4\">\r\n          <h3 className=\"text-lg font-semibold text-gray-900\">Survey Preview</h3>\r\n          <button\r\n            onClick={() => {\r\n              onFilterChange('specialty', '');\r\n              onFilterChange('providerType', '');\r\n              onFilterChange('region', '');\r\n              setCurrentPage(1);\r\n            }}\r\n            className=\"inline-flex items-center px-3 py-2 text-sm font-medium text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-lg transition-all duration-200\"\r\n            title=\"Clear all filters\"\r\n          >\r\n            <div className=\"relative w-4 h-4 mr-2\">\r\n              {/* Funnel Icon */}\r\n              <svg className=\"w-4 h-4 text-gray-500\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                <path d=\"M3 3a1 1 0 011-1h12a1 1 0 011 1v3a1 1 0 01-.293.707L12 11.414V15a1 1 0 01-.293.707l-2 2A1 1 0 018 17v-5.586L3.293 6.707A1 1 0 013 6V3z\" />\r\n              </svg>\r\n              {/* X Overlay - Only show when filters are active */}\r\n              {(globalFilters.specialty || globalFilters.providerType || globalFilters.region) && (\r\n                <svg className=\"absolute -top-1 -right-1 w-3 h-3 text-red-500 bg-white rounded-full\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                  <path fillRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n                </svg>\r\n              )}\r\n            </div>\r\n            <span className=\"text-xs\">Clear Filters</span>\r\n          </button>\r\n        </div>\r\n\r\n        {/* Filter Dropdowns - Perfectly Aligned */}\r\n        <div className=\"grid grid-cols-3 gap-4\">\r\n          <FormControl fullWidth size=\"small\">\r\n            <InputLabel className=\"text-sm font-medium text-gray-700 mb-2\">Specialty</InputLabel>\r\n            <Select\r\n              name=\"specialty\"\r\n              value={globalFilters.specialty}\r\n              onChange={handleFilterChange}\r\n              label=\"Specialty\"\r\n              className=\"h-10\"\r\n              sx={{\r\n                '& .MuiOutlinedInput-root': {\r\n                  borderRadius: '8px',\r\n                }\r\n              }}\r\n            >\r\n              <MenuItem value=\"\">All</MenuItem>\r\n              {cascadingFilterOptions.specialties.map(specialty => (\r\n                <MenuItem key={specialty} value={specialty}>{specialty}</MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n\r\n          <FormControl fullWidth size=\"small\">\r\n            <InputLabel className=\"text-sm font-medium text-gray-700 mb-2\">Provider Type</InputLabel>\r\n            <Select\r\n              name=\"providerType\"\r\n              value={globalFilters.providerType}\r\n              onChange={handleFilterChange}\r\n              label=\"Provider Type\"\r\n              className=\"h-10\"\r\n              sx={{\r\n                '& .MuiOutlinedInput-root': {\r\n                  borderRadius: '8px',\r\n                }\r\n              }}\r\n            >\r\n              <MenuItem value=\"\">All</MenuItem>\r\n              {cascadingFilterOptions.providerTypes.map(type => (\r\n                <MenuItem key={type} value={type}>{type}</MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n\r\n          <FormControl fullWidth size=\"small\">\r\n            <InputLabel className=\"text-sm font-medium text-gray-700 mb-2\">Geographic Region</InputLabel>\r\n            <Select\r\n              name=\"region\"\r\n              value={globalFilters.region}\r\n              onChange={handleFilterChange}\r\n              label=\"Geographic Region\"\r\n              className=\"h-10\"\r\n              sx={{\r\n                '& .MuiOutlinedInput-root': {\r\n                  borderRadius: '8px',\r\n                }\r\n              }}\r\n            >\r\n              <MenuItem value=\"\">All</MenuItem>\r\n              {cascadingFilterOptions.regions.map(region => (\r\n                <MenuItem key={region} value={region}>{region}</MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </div>\r\n      </Box>\r\n\r\n      {/* Data Table - AG Grid as primary */}\r\n      <div className=\"ag-theme-alpine relative px-4 py-2 rounded-lg border border-gray-200\" style={{ height: 520, width: '100%' }}>\r\n        {/* Subtle refreshing overlay */}\r\n        {isRefreshing && (\r\n          <div className=\"absolute inset-0 bg-white bg-opacity-50 flex items-center justify-center z-10\">\r\n            <div className=\"flex items-center space-x-2 text-gray-600\">\r\n              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-indigo-600\"></div>\r\n              <span className=\"text-sm\">Updating data...</span>\r\n            </div>\r\n          </div>\r\n        )}\r\n        <Suspense fallback={<AgGridLoadingSpinner />}>\r\n          <AgGridWrapper\r\n            onGridReady={(params: any) => {\r\n              setGridApi(params.api);\r\n              setColumnApi(params.columnApi);\r\n            }}\r\n            rowData={filteredData.map((row) => {\r\n              const obj: Record<string, string> = {};\r\n              (previewData[0] || []).forEach((header, idx) => {\r\n                obj[header] = row[idx];\r\n              });\r\n              return obj;\r\n            })}\r\n            columnDefs={createColumnDefs()}\r\n            defaultColDef={{ sortable: true, filter: true, resizable: true }}\r\n            suppressRowClickSelection={true}\r\n            components={{\r\n              CustomHeader: CustomHeader\r\n            }}\r\n            pagination={false}\r\n            domLayout=\"autoHeight\"\r\n            suppressRowHoverHighlight={true}\r\n            rowHeight={40}\r\n            suppressColumnVirtualisation={false}\r\n            suppressHorizontalScroll={false}\r\n          />\r\n        </Suspense>\r\n      </div>\r\n      {/* Modern Server-side pagination controls */}\r\n      {totalPages > 1 && (\r\n        <div className=\"flex items-center justify-between px-6 py-4 border-t border-gray-200 bg-white\">\r\n          {/* Left side - Page info and page size */}\r\n          <div className=\"flex items-center space-x-4\">\r\n            <div className=\"text-sm text-gray-600\">\r\n              Showing page <span className=\"font-medium text-gray-900\">{currentPage}</span> of <span className=\"font-medium text-gray-900\">{totalPages}</span>\r\n            </div>\r\n            <div className=\"text-sm text-gray-500\">\r\n              ({pagination?.total?.toLocaleString() || 0} total records)\r\n            </div>\r\n          </div>\r\n\r\n          {/* Center - Page navigation */}\r\n          <div className=\"flex items-center space-x-2\">\r\n            {/* First page */}\r\n            <button\r\n              className=\"inline-flex items-center px-2.5 py-1.5 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 hover:text-gray-700 disabled:opacity-40 disabled:cursor-not-allowed transition-colors duration-200\"\r\n              onClick={() => setCurrentPage(1)}\r\n              disabled={currentPage <= 1}\r\n              title=\"Go to first page\"\r\n            >\r\n              <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                <path fillRule=\"evenodd\" d=\"M15.707 15.707a1 1 0 01-1.414 0l-5-5a1 1 0 010-1.414l5-5a1 1 0 111.414 1.414L11.414 9H17a1 1 0 110 2h-5.586l4.293 4.293a1 1 0 010 1.414z\" clipRule=\"evenodd\" />\r\n              </svg>\r\n            </button>\r\n\r\n            {/* Previous page */}\r\n            <button\r\n              className=\"inline-flex items-center px-2.5 py-1.5 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 hover:text-gray-700 disabled:opacity-40 disabled:cursor-not-allowed transition-colors duration-200\"\r\n              onClick={() => setCurrentPage(p => Math.max(1, p - 1))}\r\n              disabled={currentPage <= 1}\r\n              title=\"Previous page\"\r\n            >\r\n              <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                <path fillRule=\"evenodd\" d=\"M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\r\n              </svg>\r\n            </button>\r\n\r\n            {/* Page input */}\r\n            <div className=\"flex items-center space-x-2\">\r\n              <span className=\"text-sm text-gray-500\">Page</span>\r\n              <input\r\n                type=\"number\"\r\n                min=\"1\"\r\n                max={totalPages}\r\n                value={currentPage}\r\n                onChange={(e) => {\r\n                  const value = parseInt(e.target.value);\r\n                  if (value >= 1 && value <= totalPages) {\r\n                    setCurrentPage(value);\r\n                  }\r\n                }}\r\n                onKeyPress={(e) => {\r\n                  if (e.key === 'Enter') {\r\n                    const value = parseInt(e.currentTarget.value);\r\n                    if (value >= 1 && value <= totalPages) {\r\n                      setCurrentPage(value);\r\n                    }\r\n                  }\r\n                }}\r\n                className=\"w-16 px-2 py-1 text-sm text-center border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500\"\r\n                title={`Enter page number (1-${totalPages})`}\r\n              />\r\n              <span className=\"text-sm text-gray-500\">of {totalPages}</span>\r\n            </div>\r\n\r\n            {/* Next page */}\r\n            <button\r\n              className=\"inline-flex items-center px-2.5 py-1.5 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 hover:text-gray-700 disabled:opacity-40 disabled:cursor-not-allowed transition-colors duration-200\"\r\n              onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}\r\n              disabled={currentPage >= totalPages}\r\n              title=\"Next page\"\r\n            >\r\n              <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                <path fillRule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clipRule=\"evenodd\" />\r\n              </svg>\r\n            </button>\r\n\r\n            {/* Last page */}\r\n            <button\r\n              className=\"inline-flex items-center px-2.5 py-1.5 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 hover:text-gray-700 disabled:opacity-40 disabled:cursor-not-allowed transition-colors duration-200\"\r\n              onClick={() => setCurrentPage(totalPages)}\r\n              disabled={currentPage >= totalPages}\r\n              title=\"Go to last page\"\r\n            >\r\n              <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                <path fillRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0l5 5a1 1 0 010 1.414l-5 5a1 1 0 01-1.414-1.414L8.586 11H3a1 1 0 110-2h5.586L4.293 5.707a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n\r\n          {/* Right side - Quick navigation */}\r\n          <div className=\"flex items-center space-x-2\">\r\n            {/* Quick jump buttons */}\r\n            {currentPage > 5 && (\r\n              <button\r\n                className=\"px-2 py-1 text-xs text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded transition-colors duration-200\"\r\n                onClick={() => setCurrentPage(1)}\r\n              >\r\n                1\r\n              </button>\r\n            )}\r\n            {currentPage > 5 && (\r\n              <span className=\"text-gray-400\">...</span>\r\n            )}\r\n            \r\n            {/* Page numbers around current page */}\r\n            {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\r\n              const pageNum = Math.max(1, Math.min(totalPages - 4, currentPage - 2)) + i;\r\n              if (pageNum > totalPages) return null;\r\n              \r\n              return (\r\n                <button\r\n                  key={pageNum}\r\n                  className={`px-2 py-1 text-xs rounded transition-colors duration-200 ${\r\n                    pageNum === currentPage\r\n                      ? 'bg-indigo-600 text-white'\r\n                      : 'text-gray-500 hover:text-gray-700 hover:bg-gray-100'\r\n                  }`}\r\n                  onClick={() => setCurrentPage(pageNum)}\r\n                >\r\n                  {pageNum}\r\n                </button>\r\n              );\r\n            })}\r\n            \r\n            {currentPage < totalPages - 4 && (\r\n              <span className=\"text-gray-400\">...</span>\r\n            )}\r\n            {currentPage < totalPages - 4 && (\r\n              <button\r\n                className=\"px-2 py-1 text-xs text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded transition-colors duration-200\"\r\n                onClick={() => setCurrentPage(totalPages)}\r\n              >\r\n                {totalPages}\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataPreview; ","import React, { useState, useCallback, useEffect, useRef } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { CloudArrowUpIcon, XMarkIcon, CalendarIcon, ChevronDownIcon, ChevronRightIcon } from '@heroicons/react/24/outline';\r\nimport { FormControl, InputLabel, Select, MenuItem } from '@mui/material';\r\nimport DataPreview from './DataPreview';\r\nimport BackendService from '../services/BackendService';\r\nimport { ISurveyData, ISurveyRow, ISurveyMetadata } from '../types/survey';\r\nimport { TableFilters } from './TableFilters';\r\n\r\nconst SURVEY_OPTIONS = [\r\n  'SullivanCotter',\r\n  'MGMA',\r\n  'Gallagher',\r\n  'ECG',\r\n  'AMGA'\r\n];\r\n\r\ninterface FileWithPreview extends File {\r\n  preview?: string;\r\n  id?: string;\r\n  surveyType?: string;\r\n  surveyYear?: string;\r\n  uploadDate?: Date;\r\n}\r\n\r\ninterface StorageSurvey {\r\n  id: string;\r\n  metadata: ISurveyMetadata & {\r\n    surveyType: string;\r\n    fileContent: string;\r\n  };\r\n}\r\n\r\ninterface UploadedSurveyMetadata {\r\n  id: string;\r\n  fileName: string;\r\n  surveyType: string;\r\n  surveyYear: string;\r\n  uploadDate: Date;\r\n  stats: {\r\n    totalRows: number;\r\n    uniqueSpecialties: number;\r\n    totalDataPoints: number;\r\n  }\r\n}\r\n\r\ninterface UploadedSurvey extends UploadedSurveyMetadata {\r\n  fileContent: string;\r\n  rows: ISurveyRow[];\r\n}\r\n\r\n// Normalization Note:\r\n// -------------------\r\n// Many survey CSVs use snake_case headers (e.g., provider_type, geographic_region),\r\n// but the application expects camelCase (providerType, geographicRegion) for internal logic and dropdowns.\r\n// To ensure robust mapping regardless of CSV header style, we normalize both required column names and CSV headers to camelCase before mapping.\r\n// This prevents dropdowns (like Provider Type and Region) from being empty due to mismatched field names.\r\n// If you add new required columns, ensure they are included in the normalization logic.\r\n// See mapping logic in handleSurveyUpload for details.\r\n\r\nconst SurveyUpload: React.FC = () => {\r\n  const [files, setFiles] = useState<FileWithPreview[]>([]);\r\n  const [uploadedSurveys, setUploadedSurveys] = useState<UploadedSurvey[]>([]);\r\n  const [surveyType, setSurveyType] = useState('');\r\n  const [customSurveyType, setCustomSurveyType] = useState('');\r\n  const [surveyYear, setSurveyYear] = useState('');\r\n  const [isCustom, setIsCustom] = useState(false);\r\n  const [isYearPickerOpen, setIsYearPickerOpen] = useState(false);\r\n  const [error, setError] = useState<string>('');\r\n  const [selectedSurvey, setSelectedSurvey] = useState<string | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [uploadProgress, setUploadProgress] = useState(0);\r\n  const [isDeleting, setIsDeleting] = useState(false);\r\n  const [deleteProgress, setDeleteProgress] = useState(0);\r\n  \r\n  // Add global filter state\r\n  const [globalFilters, setGlobalFilters] = useState({\r\n    specialty: '',\r\n    providerType: '',\r\n    region: ''\r\n  });\r\n\r\n  // Add state for unique values across all surveys\r\n  const [uniqueValues, setUniqueValues] = useState<{\r\n    specialties: Set<string>;\r\n    providerTypes: Set<string>;\r\n    regions: Set<string>;\r\n  }>({\r\n    specialties: new Set(),\r\n    providerTypes: new Set(),\r\n    regions: new Set()\r\n  });\r\n\r\n  // Add state for collapsible sections\r\n  const [isUploadSectionCollapsed, setIsUploadSectionCollapsed] = useState(false);\r\n  const [isUploadedSurveysCollapsed, setIsUploadedSurveysCollapsed] = useState(false);\r\n\r\n  // Add ref for year picker click-outside handling\r\n  const yearPickerRef = useRef<HTMLDivElement>(null);\r\n\r\n  const backendService = React.useMemo(() => BackendService.getInstance(), []);\r\n\r\n  // Handle click outside year picker\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (yearPickerRef.current && !yearPickerRef.current.contains(event.target as Node)) {\r\n        setIsYearPickerOpen(false);\r\n      }\r\n    };\r\n\r\n    if (isYearPickerOpen) {\r\n      document.addEventListener('mousedown', handleClickOutside);\r\n    }\r\n\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, [isYearPickerOpen]);\r\n\r\n  // Update unique values when surveys change\r\n  useEffect(() => {\r\n    const newValues = {\r\n      specialties: new Set<string>(),\r\n      providerTypes: new Set<string>(),\r\n      regions: new Set<string>()\r\n    };\r\n\r\n    uploadedSurveys.forEach(survey => {\r\n      if (!survey.fileContent) return;  // Skip if no file content\r\n      \r\n      const lines = survey.fileContent.split('\\n');\r\n      const headers = lines[0].split(',').map(h => h.trim().toLowerCase());\r\n      \r\n      const specialtyIdx = headers.findIndex(h => h.includes('specialty'));\r\n      const providerTypeIdx = headers.findIndex(h => h.includes('provider') || h.includes('type'));\r\n      const regionIdx = headers.findIndex(h => h.includes('region') || h.includes('geography'));\r\n\r\n      lines.slice(1).forEach(line => {\r\n        const values = line.split(',').map(v => v.trim());\r\n        if (specialtyIdx >= 0) newValues.specialties.add(values[specialtyIdx]);\r\n        if (providerTypeIdx >= 0) newValues.providerTypes.add(values[providerTypeIdx]);\r\n        if (regionIdx >= 0) newValues.regions.add(values[regionIdx]);\r\n      });\r\n    });\r\n\r\n    setUniqueValues(newValues);\r\n  }, [uploadedSurveys]);\r\n\r\n  // Handle global filter changes\r\n  const handleFilterChange = (filterName: string, value: string) => {\r\n    setGlobalFilters(prev => ({\r\n      ...prev,\r\n      [filterName]: value\r\n    }));\r\n  };\r\n\r\n  // Load saved surveys on component mount\r\n  useEffect(() => {\r\n    const loadSurveys = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        const surveys = await backendService.getAllSurveys();\r\n        console.log('Loaded surveys:', surveys);\r\n        \r\n        // Build lightweight survey list; fetch detailed rows only when a survey is selected\r\n        const processedSurveys = surveys.map((survey: any) => ({\r\n          id: survey.id,\r\n          fileName: survey.name || '',\r\n          surveyType: survey.type || '',\r\n          surveyYear: survey.year?.toString() || '',\r\n          uploadDate: new Date(survey.uploadDate || new Date()),\r\n          fileContent: '',\r\n          rows: [],\r\n          stats: {\r\n            totalRows: survey.rowCount ?? survey.row_count ?? 0,\r\n            uniqueSpecialties: survey.specialtyCount ?? survey.specialty_count ?? 0,\r\n            totalDataPoints: survey.dataPoints ?? survey.data_points ?? 0\r\n          },\r\n          columnMappings: {}\r\n        }));\r\n\r\n        setUploadedSurveys(processedSurveys);\r\n        // Auto-select first survey if none selected\r\n        if (!selectedSurvey && processedSurveys.length > 0) {\r\n          setSelectedSurvey(processedSurveys[0].id);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading surveys:', error);\r\n        handleError('Error loading saved surveys');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    loadSurveys();\r\n  }, [backendService]);\r\n\r\n  const onDrop = useCallback((acceptedFiles: File[]) => {\r\n    const newFiles = acceptedFiles.map(file => Object.assign(file, {\r\n      preview: URL.createObjectURL(file),\r\n      id: Math.random().toString(36).substring(7)\r\n    }));\r\n    setFiles(prev => [...prev, ...newFiles]);\r\n  }, []);\r\n\r\n  const { getRootProps, getInputProps } = useDropzone({\r\n    onDrop,\r\n    accept: {\r\n      'text/csv': ['.csv']\r\n    },\r\n    multiple: false,\r\n    maxFiles: 1\r\n  });\r\n\r\n  const removeFile = (fileId: string) => {\r\n    setFiles(prev => {\r\n      const fileToRemove = prev.find(f => f.id === fileId);\r\n      if (fileToRemove?.preview) {\r\n        URL.revokeObjectURL(fileToRemove.preview);\r\n      }\r\n      return [];  // Clear all files since we only handle one at a time\r\n    });\r\n    setSelectedSurvey(null);\r\n  };\r\n\r\n  const handleSurveyTypeChange = (e: React.ChangeEvent<{ value: unknown }>) => {\r\n    const value = e.target.value as string;\r\n    setIsCustom(value === 'custom');\r\n    setSurveyType(value);\r\n    // Clear any selected file when survey type changes\r\n    setFiles([]);\r\n  };\r\n\r\n  const removeUploadedSurvey = async (surveyId: string, e?: React.MouseEvent) => {\r\n    e?.stopPropagation();\r\n    try {\r\n      await backendService.deleteSurvey(surveyId);\r\n      setUploadedSurveys(prev => prev.filter(s => s.id !== surveyId));\r\n      if (selectedSurvey === surveyId) {\r\n        setSelectedSurvey(null);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error removing survey:', error);\r\n      handleError('Error removing survey');\r\n    }\r\n  };\r\n\r\n  const handleSurveyUpload = async () => {\r\n    const file = files[0];\r\n    if (!file || !surveyType || !surveyYear) {\r\n      handleError('Please fill in all required fields');\r\n      return;\r\n    }\r\n\r\n    setIsUploading(true);\r\n    setUploadProgress(0);\r\n\r\n    try {\r\n      // Simulate progress for better UX\r\n      // Real upload progress from XHR (front-end only). Once the file is uploaded,\r\n      // the modal stays with an indeterminate spinner while the server processes rows.\r\n\r\n      // Upload survey to backend\r\n      const uploadResult = await backendService.uploadSurvey(\r\n        file,\r\n        file.name,\r\n        parseInt(surveyYear),\r\n        isCustom ? customSurveyType : surveyType,\r\n        (p) => setUploadProgress(Math.min(p, 100))\r\n      );\r\n      // At this point the file is on the server; server-side parsing/inserts may still be running.\r\n      setUploadProgress(100);\r\n\r\n      console.log('Survey uploaded successfully:', {\r\n        surveyId: uploadResult.surveyId,\r\n        rowCount: uploadResult.rowCount\r\n      });\r\n\r\n      // Update local state and select the new survey\r\n      setUploadedSurveys(prev => {\r\n        const updated = [\r\n          ...prev,\r\n          {\r\n            id: uploadResult.surveyId,\r\n            fileName: file.name,\r\n            surveyType: isCustom ? customSurveyType : surveyType,\r\n            surveyYear,\r\n            uploadDate: new Date(),\r\n            fileContent: '',\r\n            rows: [],\r\n            stats: {\r\n              totalRows: uploadResult.rowCount,\r\n              uniqueSpecialties: 0,\r\n              totalDataPoints: uploadResult.rowCount\r\n            },\r\n            columnMappings: {}\r\n          }\r\n        ];\r\n        return updated;\r\n      });\r\n      \r\n      setSelectedSurvey(uploadResult.surveyId);\r\n\r\n      // Clear form\r\n      setFiles([]);\r\n      setSurveyType('');\r\n      setSurveyYear('');\r\n      setCustomSurveyType('');\r\n      setIsCustom(false);\r\n\r\n      // Show success message\r\n      setTimeout(() => {\r\n        setUploadProgress(0);\r\n        setIsUploading(false);\r\n      }, 1000);\r\n\r\n    } catch (error) {\r\n      console.error('Error uploading survey:', error);\r\n      handleError(`Upload failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n      setIsUploading(false);\r\n      setUploadProgress(0);\r\n    }\r\n  };\r\n\r\n  const handleClearAll = async () => {\r\n    try {\r\n      // Confirm destructive action\r\n      const confirmDelete = window.confirm('This will delete ALL surveys from Azure. Type OK to proceed.');\r\n      if (!confirmDelete) return;\r\n      setIsDeleting(true);\r\n      setDeleteProgress(10);\r\n      await backendService.deleteAllSurveys();\r\n      setDeleteProgress(90);\r\n      setUploadedSurveys([]);\r\n      setSelectedSurvey(null);\r\n    } catch (error) {\r\n      console.error('Error clearing all surveys:', error);\r\n      handleError('Error clearing surveys');\r\n    } finally {\r\n      setDeleteProgress(100);\r\n      setTimeout(() => {\r\n        setIsDeleting(false);\r\n        setDeleteProgress(0);\r\n      }, 600);\r\n    }\r\n  };\r\n\r\n  // Generate years from 1990 to current year + 10 (more future-proof)\r\n  const currentYear = new Date().getFullYear();\r\n  const startYear = 1990;\r\n  const endYear = currentYear + 10; // Extend to 10 years in the future\r\n  const years = Array.from(\r\n    { length: endYear - startYear + 1 },\r\n    (_, i) => endYear - i\r\n  );\r\n\r\n  const handleError = (errorMessage: string) => {\r\n    setError(errorMessage);\r\n    setTimeout(() => setError(''), 5000);\r\n  };\r\n\r\n  // Add helper function to calculate survey statistics\r\n  const calculateSurveyStats = (rows: ISurveyRow[] | undefined) => {\r\n    if (!rows || rows.length === 0) {\r\n      return {\r\n        totalRows: 0,\r\n        uniqueSpecialties: 0,\r\n        totalDataPoints: 0\r\n      };\r\n    }\r\n    // Only call toLowerCase on string values\r\n    const uniqueSpecialtiesSet = new Set(\r\n      rows\r\n        .map(r => typeof r.specialty === 'string' ? r.specialty.toLowerCase() : undefined)\r\n        .filter(Boolean)\r\n    );\r\n    return {\r\n      totalRows: rows.length,\r\n      uniqueSpecialties: uniqueSpecialtiesSet.size,\r\n      totalDataPoints: rows.length * Object.keys(rows[0] || {}).length\r\n    };\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"w-full min-h-screen\">\r\n        <div className=\"w-full flex flex-col gap-4\">\r\n\r\n          {/* Upload Form Section */}\r\n          <div className=\"w-full bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\r\n            <div className=\"flex items-center justify-between mb-4\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <button\r\n                  onClick={() => setIsUploadSectionCollapsed(!isUploadSectionCollapsed)}\r\n                  className=\"p-1 hover:bg-gray-100 rounded-lg transition-colors duration-200\"\r\n                  aria-label={isUploadSectionCollapsed ? \"Expand upload section\" : \"Collapse upload section\"}\r\n                >\r\n                  {isUploadSectionCollapsed ? (\r\n                    <ChevronRightIcon className=\"h-5 w-5 text-gray-500\" />\r\n                  ) : (\r\n                    <ChevronDownIcon className=\"h-5 w-5 text-gray-500\" />\r\n                  )}\r\n                </button>\r\n                <h3 className=\"text-lg font-semibold text-gray-900\">Upload New Survey</h3>\r\n              </div>\r\n              <a\r\n                href={process.env.PUBLIC_URL + '/sample-survey.csv'}\r\n                download=\"sample-survey.csv\"\r\n                className=\"inline-flex items-center px-3 py-1.5 text-xs font-medium rounded-md text-indigo-600 bg-indigo-50 hover:bg-indigo-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-200\"\r\n              >\r\n                Download Sample\r\n              </a>\r\n            </div>\r\n            \r\n            {!isUploadSectionCollapsed && (\r\n              <>\r\n                <div className=\"grid grid-cols-12 gap-4\">\r\n                {/* Survey Type Selection */}\r\n                <div className=\"col-span-4\">\r\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Survey Type\r\n                  </label>\r\n                  <FormControl fullWidth>\r\n                    <Select\r\n                      value={surveyType}\r\n                      onChange={handleSurveyTypeChange}\r\n                      displayEmpty\r\n                      sx={{\r\n                        backgroundColor: 'white',\r\n                        height: '40px',\r\n                        '& .MuiOutlinedInput-root': {\r\n                          fontSize: '0.875rem',\r\n                          height: '40px',\r\n                          borderRadius: '8px',\r\n                        },\r\n                        '& .MuiSelect-select': {\r\n                          paddingTop: '8px',\r\n                          paddingBottom: '8px',\r\n                          textAlign: 'left',\r\n                        }\r\n                      }}\r\n                    >\r\n                      <MenuItem value=\"\" disabled>\r\n                        Select a survey type\r\n                      </MenuItem>\r\n                      {SURVEY_OPTIONS.map(option => (\r\n                        <MenuItem key={option} value={option}>{option}</MenuItem>\r\n                      ))}\r\n                      <MenuItem value=\"custom\">Custom Survey Type</MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                  {isCustom && (\r\n                    <input\r\n                      type=\"text\"\r\n                      value={customSurveyType}\r\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => setCustomSurveyType(e.target.value)}\r\n                      placeholder=\"Enter custom survey type\"\r\n                      className=\"mt-2 block w-full px-3 py-2 border border-gray-300 rounded-lg\r\n                        focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent\r\n                        placeholder-gray-400 text-sm transition-colors duration-200\"\r\n                    />\r\n                  )}\r\n                </div>\r\n\r\n                {/* Survey Year Selection */}\r\n                <div className=\"col-span-4\">\r\n                  <label htmlFor=\"surveyYear\" className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n                    Survey Year\r\n                  </label>\r\n                  <div className=\"relative\">\r\n                    <input\r\n                      type=\"text\"\r\n                      id=\"surveyYear\"\r\n                      value={surveyYear}\r\n                      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                        const value = e.target.value;\r\n                        // Allow typing numbers and basic validation\r\n                        if (value === '' || /^\\d{4}$/.test(value)) {\r\n                          setSurveyYear(value);\r\n                        }\r\n                      }}\r\n                      onClick={() => setIsYearPickerOpen(true)}\r\n                      onFocus={() => setIsYearPickerOpen(true)}\r\n                      placeholder=\"Select year\"\r\n                      className=\"block w-full px-3 py-2 border border-gray-300 rounded-lg\r\n                        focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent\r\n                        bg-white text-sm transition-colors duration-200\"\r\n                    />\r\n                    <div className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-3 text-gray-500\">\r\n                      <CalendarIcon className=\"h-5 w-5\" />\r\n                    </div>\r\n\r\n                    {/* Simple Year Picker Dropdown */}\r\n                    {isYearPickerOpen && (\r\n                      <div className=\"absolute z-50 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg max-h-60\" ref={yearPickerRef}>\r\n                        <div className=\"overflow-y-auto max-h-56\">\r\n                          {years.map(year => (\r\n                            <button\r\n                              key={year}\r\n                              onClick={() => {\r\n                                setSurveyYear(year.toString());\r\n                                setIsYearPickerOpen(false);\r\n                              }}\r\n                              className={`w-full text-left px-3 py-2 text-sm transition-colors duration-200 hover:bg-gray-50\r\n                                ${surveyYear === year.toString() \r\n                                  ? 'bg-indigo-50 text-indigo-600 font-medium' \r\n                                  : 'text-gray-700'\r\n                                }`}\r\n                              onKeyDown={(e) => {\r\n                                if (e.key === 'Escape') {\r\n                                  setIsYearPickerOpen(false);\r\n                                }\r\n                              }}\r\n                            >\r\n                              {year}\r\n                            </button>\r\n                          ))}\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Action Buttons */}\r\n                <div className=\"col-span-4 flex items-end space-x-3\">\r\n                  <div {...getRootProps()} className=\"flex-1\">\r\n                    <input {...getInputProps()} />\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"w-full px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-200 flex items-center justify-center h-10\"\r\n                    >\r\n                      <CloudArrowUpIcon className=\"h-5 w-5 mr-2\" />\r\n                      Select File\r\n                    </button>\r\n                  </div>\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={handleSurveyUpload}\r\n                    disabled={files.length === 0 || !surveyType || !surveyYear || isUploading}\r\n                    className=\"flex-1 px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-emerald-600 hover:bg-emerald-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center h-10\"\r\n                  >\r\n                    {isUploading ? (\r\n                      <>\r\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\r\n                        Uploading...\r\n                      </>\r\n                    ) : (\r\n                      'Upload Survey'\r\n                    )}\r\n                  </button>\r\n                </div>\r\n\r\n                {/* Upload progress is displayed in a modal overlay below */}\r\n              </div>\r\n\r\n              {/* Selected File Preview */}\r\n              {files.length > 0 && (\r\n                <div className=\"mt-6 border-t border-gray-200 pt-4\">\r\n                  <h3 className=\"text-sm font-medium text-gray-700 mb-3\">Selected File</h3>\r\n                  <div className=\"bg-gray-50 px-3 py-2 rounded-lg flex items-center justify-between\">\r\n                    <div className=\"flex items-center space-x-4\">\r\n                      <div className=\"flex items-center text-gray-500\">\r\n                        <svg className=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\r\n                        </svg>\r\n                        <span className=\"text-sm font-medium\">{files[0].name}</span>\r\n                      </div>\r\n                      {surveyType && surveyYear && (\r\n                        <span className=\"text-sm text-gray-500 bg-gray-100 px-3 py-1 rounded-full\">\r\n                          {isCustom ? customSurveyType : surveyType} • {surveyYear}\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                    <button\r\n                      onClick={() => files[0].id && removeFile(files[0].id)}\r\n                      className=\"text-gray-400 hover:text-red-500 transition-colors duration-200 p-1 rounded-full hover:bg-gray-100\"\r\n                    >\r\n                      <XMarkIcon className=\"h-5 w-5\" />\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </>\r\n            )}\r\n          </div>\r\n          {/* Uploaded Surveys Section (compact tabs) */}\r\n          <div className=\"w-full bg-white rounded-xl shadow-sm border border-gray-200 p-4 overflow-visible\">\r\n            <div className=\"flex items-center justify-between mb-3\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <button\r\n                  onClick={() => setIsUploadedSurveysCollapsed(!isUploadedSurveysCollapsed)}\r\n                  className=\"p-1 hover:bg-gray-100 rounded-lg transition-colors duration-200\"\r\n                  aria-label={isUploadedSurveysCollapsed ? \"Expand uploaded surveys section\" : \"Collapse uploaded surveys section\"}\r\n                >\r\n                  {isUploadedSurveysCollapsed ? (\r\n                    <ChevronRightIcon className=\"h-5 w-5 text-gray-500\" />\r\n                  ) : (\r\n                    <ChevronDownIcon className=\"h-5 w-5 text-gray-500\" />\r\n                  )}\r\n                </button>\r\n                <h2 className=\"text-lg font-semibold text-gray-900\">Uploaded Surveys</h2>\r\n              </div>\r\n              {uploadedSurveys.length > 0 && (\r\n                <button\r\n                  onClick={handleClearAll}\r\n                  className=\"inline-flex items-center px-3 py-1.5 text-xs font-medium text-red-600 hover:text-red-700 transition-colors duration-200 rounded-lg hover:bg-red-50\"\r\n                >\r\n                  <XMarkIcon className=\"h-4 w-4 mr-1.5\" />\r\n                  Clear All\r\n                </button>\r\n              )}\r\n            </div>\r\n\r\n            {!isUploadedSurveysCollapsed && (\r\n              <>\r\n                {isLoading ? (\r\n                  <div className=\"text-center py-6\">\r\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-500 mx-auto\"></div>\r\n                    <p className=\"mt-2 text-sm text-gray-500\">Loading surveys...</p>\r\n                  </div>\r\n                ) : uploadedSurveys.length === 0 ? (\r\n                  <div className=\"text-center py-8 bg-gray-50 rounded-xl\">\r\n                    <p className=\"text-gray-500\">No surveys uploaded yet</p>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"relative z-10 flex items-center gap-2 overflow-x-auto overflow-y-visible whitespace-nowrap pb-1\">\r\n                    {uploadedSurveys.map((survey) => {\r\n                      const isActive = selectedSurvey === survey.id;\r\n                      const stats = calculateSurveyStats(survey.rows);\r\n                      const accent = survey.surveyType === 'SullivanCotter' ? '#818CF8' :\r\n                                      survey.surveyType === 'MGMA' ? '#34D399' :\r\n                                      survey.surveyType === 'Gallagher' ? '#F472B6' :\r\n                                      survey.surveyType === 'ECG' ? '#FBBF24' :\r\n                                      survey.surveyType === 'AMGA' ? '#60A5FA' : '#9CA3AF';\r\n                      return (\r\n                        <div key={survey.id} className=\"relative group inline-flex items-center\">\r\n                          <button\r\n                            onClick={() => setSelectedSurvey(survey.id)}\r\n                            className={`inline-flex items-center gap-2 px-3 py-1.5 text-sm rounded-full border transition-colors duration-200 ${isActive ? 'bg-indigo-600 text-white border-indigo-600' : 'bg-gray-50 text-gray-700 border-gray-200 hover:bg-gray-100'}`}\r\n                            title={`${survey.surveyType} • ${survey.surveyYear}`}\r\n                          >\r\n                            <span className=\"font-medium\">{survey.surveyType}</span>\r\n                            <span className={`text-xs ${isActive ? 'text-indigo-100' : 'text-gray-500'}`}>{survey.surveyYear}</span>\r\n                          </button>\r\n                          <button\r\n                            onClick={(e) => removeUploadedSurvey(survey.id, e)}\r\n                            className=\"ml-1 text-gray-400 hover:text-red-500 p-1 rounded-full hover:bg-gray-100\"\r\n                            title=\"Remove survey\"\r\n                          >\r\n                            <XMarkIcon className=\"h-4 w-4\" />\r\n                          </button>\r\n\r\n                          {/* Hover stats tooltip */}\r\n                          <div className=\"pointer-events-none absolute z-50 -top-32 left-1/2 -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-opacity duration-200\">\r\n                            <div className=\"bg-white rounded-xl shadow-lg border border-gray-200 p-3 w-64\">\r\n                              <div className=\"flex items-center justify-between mb-2\">\r\n                                <div className=\"text-xs font-medium text-gray-900\">{survey.surveyType} • {survey.surveyYear}</div>\r\n                                <div className=\"text-[10px] text-gray-500\">{new Date(survey.uploadDate).toLocaleDateString()}</div>\r\n                              </div>\r\n                              <div className=\"grid grid-cols-3 gap-3 text-center\">\r\n                                <div>\r\n                                  <div className=\"text-base font-semibold text-gray-900\">{stats.totalRows.toLocaleString()}</div>\r\n                                  <div className=\"text-[10px] text-gray-500 mt-0.5\">Rows</div>\r\n                                </div>\r\n                                <div>\r\n                                  <div className=\"text-base font-semibold text-gray-900\">{stats.uniqueSpecialties.toLocaleString()}</div>\r\n                                  <div className=\"text-[10px] text-gray-500 mt-0.5\">Specialties</div>\r\n                                </div>\r\n                                <div>\r\n                                  <div className=\"text-base font-semibold text-gray-900\">{stats.totalDataPoints.toLocaleString()}</div>\r\n                                  <div className=\"text-[10px] text-gray-500 mt-0.5\">Data Points</div>\r\n                                </div>\r\n                              </div>\r\n                              <div className=\"mt-2 h-1.5 rounded-full\" style={{ backgroundColor: accent }} />\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                )}\r\n              </>\r\n            )}\r\n          </div>\r\n\r\n        {/* Data Preview */}\r\n        {selectedSurvey && (\r\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden\">\r\n            <div className=\"w-full overflow-x-auto\">\r\n              <DataPreview\r\n                file={uploadedSurveys.find(s => s.id === selectedSurvey)!}\r\n                onError={handleError}\r\n                globalFilters={globalFilters}\r\n                onFilterChange={handleFilterChange}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n      {/* Upload Progress Modal */}\r\n      {isUploading && (\r\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/40\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"upload-modal-title\">\r\n          <div className=\"bg-white rounded-xl shadow-lg border border-gray-200 w-full max-w-md p-6\">\r\n            <div className=\"flex items-start justify-between\">\r\n              <div>\r\n                <h3 id=\"upload-modal-title\" className=\"text-lg font-semibold text-gray-900\">Uploading survey…</h3>\r\n                <p className=\"mt-1 text-sm text-gray-500\">Please keep this tab open while we process your file.</p>\r\n              </div>\r\n              <div className=\"w-6 h-6 rounded-full border-2 border-indigo-200 border-t-indigo-600 animate-spin\" aria-hidden=\"true\" />\r\n            </div>\r\n            <div className=\"mt-5\">\r\n              <div className=\"flex items-center justify-between mb-2\">\r\n                <span className=\"text-sm font-medium text-gray-700\">Progress</span>\r\n                <span className=\"text-sm text-gray-500\">{uploadProgress}%</span>\r\n              </div>\r\n              <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\r\n                <div className=\"h-2.5 rounded-full transition-all duration-300 ease-out bg-emerald-600\" style={{ width: `${uploadProgress}%` }} />\r\n              </div>\r\n              <div className=\"mt-3 text-xs text-gray-500\">\r\n                {uploadProgress < 100 ? 'Processing survey data…' : 'Upload complete! Finalizing…'}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {/* Deleting Progress Modal */}\r\n      {isDeleting && (\r\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/40\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"delete-modal-title\">\r\n          <div className=\"bg-white rounded-xl shadow-lg border border-gray-200 w-full max-w-md p-6\">\r\n            <div className=\"flex items-start justify-between\">\r\n              <div>\r\n                <h3 id=\"delete-modal-title\" className=\"text-lg font-semibold text-gray-900\">Clearing surveys…</h3>\r\n                <p className=\"mt-1 text-sm text-gray-500\">Deleting all surveys from Azure. This can take a few seconds.</p>\r\n              </div>\r\n              <div className=\"w-6 h-6 rounded-full border-2 border-indigo-200 border-t-indigo-600 animate-spin\" aria-hidden=\"true\" />\r\n            </div>\r\n            <div className=\"mt-5\">\r\n              <div className=\"flex items-center justify-between mb-2\">\r\n                <span className=\"text-sm font-medium text-gray-700\">Progress</span>\r\n                <span className=\"text-sm text-gray-500\">{deleteProgress}%</span>\r\n              </div>\r\n              <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\r\n                <div className=\"h-2.5 rounded-full transition-all duration-300 ease-out bg-red-600\" style={{ width: `${deleteProgress}%` }} />\r\n              </div>\r\n              <div className=\"mt-3 text-xs text-gray-500\">\r\n                {deleteProgress < 100 ? 'Removing survey data…' : 'All surveys cleared.'}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SurveyUpload; "],"names":["API_BASE_URL","BackendService","constructor","getInstance","instance","getSurveyMeta","surveyId","response","fetch","concat","ok","Error","json","uploadSurvey","file","surveyName","surveyYear","surveyType","onProgress","formData","FormData","append","toString","xhr","XMLHttpRequest","Promise","resolve","reject","open","onload","status","result","JSON","parse","responseText","rowCount","err","statusText","onerror","upload","onprogress","event","lengthComputable","percent","Math","round","loaded","total","send","getAllSurveys","map","survey","_ref","_survey$rowCount","_ref2","_survey$specialtyCoun","_ref3","_survey$dataPoints","id","name","year","type","uploadDate","row_count","specialtyCount","specialty_count","dataPoints","data_points","colorAccent","metadata","getSurveyData","filters","options","params","URLSearchParams","specialty","providerType","region","page","String","limit","data","rows","row","_objectSpread","pagination","Number","length","pages","undefined","getAvailableFiltersForSurvey","deleteSurvey","method","deleteAllSurveys","exportSurveyData","format","arguments","blob","healthCheck","_unused","AgGridWrapper","lazy","AgGridLoadingSpinner","_jsxs","className","children","_jsx","CustomHeader","props","displayName","onPinColumn","colId","isSpecialty","isNumeric","isPinned","setIsPinned","useState","onClick","handlePinClick","title","fill","viewBox","fillRule","d","clipRule","_pagination$pages","_pagination$total","onError","globalFilters","onFilterChange","previewData","setPreviewData","originalData","setOriginalData","stats","setStats","currentPage","setCurrentPage","pageSize","setPagination","isLoading","setIsLoading","isRefreshing","setIsRefreshing","gridApi","setGridApi","columnApi","setColumnApi","pinColumnId","setPinColumnId","useMemo","serverSpecialties","setServerSpecialties","serverProviderTypes","setServerProviderTypes","serverRegions","setServerRegions","handleFilterChange","target","value","useEffect","isCancelled","async","backendService","surveyData","headers","meta","Array","isArray","columns","Object","keys","filter","h","toLowerCase","header","columnNames","totalRows","uniqueSpecialties","Set","size","totalDataPoints","error","console","loadSurveyData","timeoutId","setTimeout","_unused2","loadFilteredData","clearTimeout","cancelled","f","specialties","sort","providerTypes","regions","_unused3","loadFilters","cascadingFilterOptions","filteredData","totalPages","formatCurrency","decimals","num","parseFloat","replace","isNaN","toLocaleString","style","currency","minimumFractionDigits","maximumFractionDigits","Box","sx","display","flexDirection","p","borderBottom","borderColor","disabled","_","i","height","width","FormControl","fullWidth","InputLabel","Select","onChange","label","borderRadius","MenuItem","Suspense","fallback","onGridReady","api","rowData","obj","forEach","idx","columnDefs","lower","key","isTcc","startsWith","includes","isCf","isWrvu","isCount","headerName","field","sortable","resizable","cellClass","headerClass","headerComponent","headerComponentParams","column","getColumn","getColDef","pinned","applyColumnState","state","valueGetter","raw","valueFormatter","_params$value","_params$data","formatNumber","defaultColDef","suppressRowClickSelection","components","domLayout","suppressRowHoverHighlight","rowHeight","suppressColumnVirtualisation","suppressHorizontalScroll","max","min","e","parseInt","onKeyPress","currentTarget","from","pageNum","SURVEY_OPTIONS","SurveyUpload","files","setFiles","uploadedSurveys","setUploadedSurveys","setSurveyType","customSurveyType","setCustomSurveyType","setSurveyYear","isCustom","setIsCustom","isYearPickerOpen","setIsYearPickerOpen","setError","selectedSurvey","setSelectedSurvey","isUploading","setIsUploading","uploadProgress","setUploadProgress","isDeleting","setIsDeleting","deleteProgress","setDeleteProgress","setGlobalFilters","uniqueValues","setUniqueValues","isUploadSectionCollapsed","setIsUploadSectionCollapsed","isUploadedSurveysCollapsed","setIsUploadedSurveysCollapsed","yearPickerRef","useRef","React","handleClickOutside","current","contains","document","addEventListener","removeEventListener","newValues","fileContent","lines","split","trim","specialtyIdx","findIndex","providerTypeIdx","regionIdx","slice","line","values","v","add","surveys","log","processedSurveys","_survey$year","fileName","Date","columnMappings","handleError","loadSurveys","onDrop","useCallback","acceptedFiles","newFiles","assign","preview","URL","createObjectURL","random","substring","prev","getRootProps","getInputProps","useDropzone","accept","multiple","maxFiles","endYear","getFullYear","years","errorMessage","_Fragment","ChevronRightIcon","ChevronDownIcon","href","process","download","displayEmpty","backgroundColor","fontSize","paddingTop","paddingBottom","textAlign","option","placeholder","htmlFor","test","onFocus","CalendarIcon","ref","onKeyDown","CloudArrowUpIcon","uploadResult","message","stroke","strokeLinecap","strokeLinejoin","strokeWidth","fileId","fileToRemove","find","revokeObjectURL","XMarkIcon","window","confirm","isActive","uniqueSpecialtiesSet","r","Boolean","calculateSurveyStats","accent","stopPropagation","s","removeUploadedSurvey","toLocaleDateString","DataPreview","filterName","role"],"sourceRoot":""}