{"version":3,"file":"static/js/18.7b9cead2.chunk.js","mappings":"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","sources":["shared/utils/calculations.ts","features/fmv/utils/fmvCalculations.ts","features/fmv/hooks/useFMVData.ts","features/fmv/components/FMVFilters.tsx","features/fmv/components/CompareTypeSelector.tsx","features/fmv/components/TCCItemization.tsx","features/fmv/components/WRVUsInput.tsx","features/fmv/components/CFInput.tsx","features/fmv/components/ResultsPanel.tsx","components/FairMarketValuePrintable.tsx","features/fmv/components/FMVCalculator.tsx","components/FairMarketValue.tsx"],"sourcesContent":["/**\n * Shared calculation utilities for the Survey Aggregator application\n * These functions are used across multiple features and should be centralized\n */\n\n/**\n * Calculates the percentile value from an array of numbers\n * \n * @param numbers - Array of numbers to calculate percentile from\n * @param percentile - Percentile to calculate (0-100)\n * @returns The percentile value\n * \n * @example\n * ```typescript\n * const p50 = calculatePercentile([1, 2, 3, 4, 5], 50); // Returns 3\n * ```\n */\nexport const calculatePercentile = (numbers: number[], percentile: number): number => {\n  if (numbers.length === 0) return 0;\n  const sortedNumbers = [...numbers].sort((a, b) => a - b);\n  const index = Math.floor((percentile / 100) * sortedNumbers.length);\n  return sortedNumbers[index] || 0;\n};\n\n/**\n * Calculates the weighted average of values\n * \n * @param values - Array of values to average\n * @param weights - Array of weights corresponding to each value\n * @returns The weighted average\n * \n * @example\n * ```typescript\n * const avg = calculateWeightedAverage([1, 2, 3], [0.5, 0.3, 0.2]); // Returns weighted average\n * ```\n */\nexport const calculateWeightedAverage = (values: number[], weights: number[]): number => {\n  if (values.length === 0 || values.length !== weights.length) return 0;\n  const sum = weights.reduce((acc, weight, index) => acc + weight * values[index], 0);\n  const weightSum = weights.reduce((acc, weight) => acc + weight, 0);\n  return weightSum === 0 ? 0 : sum / weightSum;\n};\n\n/**\n * Calculates the simple average of values\n * \n * @param values - Array of numbers to average\n * @returns The average value\n * \n * @example\n * ```typescript\n * const avg = calculateAverage([1, 2, 3, 4, 5]); // Returns 3\n * ```\n */\nexport const calculateAverage = (values: number[]): number => {\n  if (values.length === 0) return 0;\n  return values.reduce((acc, val) => acc + val, 0) / values.length;\n};\n\n/**\n * Calculates the median value from an array of numbers\n * \n * @param numbers - Array of numbers to calculate median from\n * @returns The median value\n * \n * @example\n * ```typescript\n * const median = calculateMedian([1, 2, 3, 4, 5]); // Returns 3\n * ```\n */\nexport const calculateMedian = (numbers: number[]): number => {\n  if (numbers.length === 0) return 0;\n  const sortedNumbers = [...numbers].sort((a, b) => a - b);\n  const middle = Math.floor(sortedNumbers.length / 2);\n  \n  if (sortedNumbers.length % 2 === 0) {\n    return (sortedNumbers[middle - 1] + sortedNumbers[middle]) / 2;\n  }\n  \n  return sortedNumbers[middle];\n};\n\n/**\n * Calculates the standard deviation of values\n * \n * @param values - Array of numbers to calculate standard deviation from\n * @returns The standard deviation\n * \n * @example\n * ```typescript\n * const stdDev = calculateStandardDeviation([1, 2, 3, 4, 5]); // Returns standard deviation\n * ```\n */\nexport const calculateStandardDeviation = (values: number[]): number => {\n  if (values.length === 0) return 0;\n  \n  const mean = calculateAverage(values);\n  const squaredDifferences = values.map(value => Math.pow(value - mean, 2));\n  const variance = calculateAverage(squaredDifferences);\n  \n  return Math.sqrt(variance);\n};\n\n/**\n * Calculates the coefficient of variation (CV) - standard deviation / mean\n * \n * @param values - Array of numbers to calculate CV from\n * @returns The coefficient of variation as a percentage\n * \n * @example\n * ```typescript\n * const cv = calculateCoefficientOfVariation([1, 2, 3, 4, 5]); // Returns CV as percentage\n * ```\n */\nexport const calculateCoefficientOfVariation = (values: number[]): number => {\n  if (values.length === 0) return 0;\n  \n  const mean = calculateAverage(values);\n  if (mean === 0) return 0;\n  \n  const stdDev = calculateStandardDeviation(values);\n  return (stdDev / mean) * 100;\n};\n","import { \n  FMVFilters, \n  MarketData, \n  UserPercentiles, \n  NormalizedSurveyRow, \n  CompensationComponent,\n  FMVCalculationResult,\n  FMVCalculationParams,\n  FMVValidationResult,\n  CompareType\n} from '../types/fmv';\nimport { calculatePercentile } from '../../../shared/utils/calculations';\n\n/**\n * Normalizes a survey row for FMV calculations\n * \n * @param row - Raw survey data row\n * @param surveyMeta - Survey metadata\n * @param columnMappings - Column mapping configuration\n * @returns Normalized survey row\n */\nexport const normalizeSurveyRow = (\n  row: any, \n  surveyMeta: any, \n  columnMappings: any = {}\n): NormalizedSurveyRow => {\n  return {\n    id: row.id || '',\n    providerType: row[columnMappings.providerType || 'providerType'] || row.providerType || row.provider_type || '',\n    geographicRegion: row[columnMappings.geographicRegion || 'geographicRegion'] || row.geographicRegion || row.geographic_region || '',\n    specialty: row[columnMappings.specialty || 'specialty'] || row.specialty || row.normalizedSpecialty || '',\n    normalizedSpecialty: row.normalizedSpecialty || '',\n    surveySource: surveyMeta?.surveyType || '',\n    year: String(row[columnMappings.year || 'year'] || row.year || surveyMeta?.surveyYear || surveyMeta?.metadata?.surveyYear || ''),\n    tcc_p25: Number(row[columnMappings.tcc_p25 || 'tcc_p25']) || 0,\n    tcc_p50: Number(row[columnMappings.tcc_p50 || 'tcc_p50']) || 0,\n    tcc_p75: Number(row[columnMappings.tcc_p75 || 'tcc_p75']) || 0,\n    tcc_p90: Number(row[columnMappings.tcc_p90 || 'tcc_p90']) || 0,\n    wrvu_p25: Number(row[columnMappings.wrvu_p25 || 'wrvu_p25']) || 0,\n    wrvu_p50: Number(row[columnMappings.wrvu_p50 || 'wrvu_p50']) || 0,\n    wrvu_p75: Number(row[columnMappings.wrvu_p75 || 'wrvu_p75']) || 0,\n    wrvu_p90: Number(row[columnMappings.wrvu_p90 || 'wrvu_p90']) || 0,\n    cf_p25: Number(row[columnMappings.cf_p25 || 'cf_p25']) || 0,\n    cf_p50: Number(row[columnMappings.cf_p50 || 'cf_p50']) || 0,\n    cf_p75: Number(row[columnMappings.cf_p75 || 'cf_p75']) || 0,\n    cf_p90: Number(row[columnMappings.cf_p90 || 'cf_p90']) || 0,\n  };\n};\n\n/**\n * Normalizes strings for comparison\n * \n * @param str - String to normalize\n * @returns Normalized string\n */\nexport const normalizeString = (str: string): string => {\n  return (str || '').toLowerCase().replace(/\\s+/g, ' ').trim();\n};\n\n/**\n * Applies filters to survey data\n * \n * @param rows - Array of normalized survey rows\n * @param filters - FMV filters to apply\n * @param mappedSpecialties - Array of mapped specialty names\n * @returns Filtered rows\n */\nexport const applyFMVFilters = (\n  rows: NormalizedSurveyRow[],\n  filters: FMVFilters,\n  mappedSpecialties: string[] = []\n): NormalizedSurveyRow[] => {\n  let filteredRows = rows;\n\n  if (filters.specialty) {\n    const specialtyFilters = mappedSpecialties.length > 0 \n      ? mappedSpecialties \n      : [normalizeString(filters.specialty)];\n    \n    filteredRows = filteredRows.filter(row => \n      specialtyFilters.includes(normalizeString(row.specialty))\n    );\n  }\n\n  if (filters.providerType) {\n    filteredRows = filteredRows.filter(row => \n      normalizeString(row.providerType) === normalizeString(filters.providerType)\n    );\n  }\n\n  if (filters.region) {\n    filteredRows = filteredRows.filter(row => \n      normalizeString(row.geographicRegion) === normalizeString(filters.region)\n    );\n  }\n\n  if (filters.surveySource) {\n    filteredRows = filteredRows.filter(row => \n      normalizeString(row.surveySource) === normalizeString(filters.surveySource)\n    );\n  }\n\n  if (filters.year) {\n    filteredRows = filteredRows.filter(row => \n      String(row.year) === String(filters.year)\n    );\n  }\n\n  return filteredRows;\n};\n\n/**\n * Calculates market data percentiles from filtered rows\n * \n * @param filteredRows - Filtered survey rows\n * @returns Market data with percentiles\n */\nexport const calculateMarketData = (filteredRows: NormalizedSurveyRow[]): MarketData => {\n  const tccs = filteredRows.flatMap(row => \n    [row.tcc_p25, row.tcc_p50, row.tcc_p75, row.tcc_p90].filter(Boolean)\n  );\n  const wrvus = filteredRows.flatMap(row => \n    [row.wrvu_p25, row.wrvu_p50, row.wrvu_p75, row.wrvu_p90].filter(Boolean)\n  );\n  const cfs = filteredRows.flatMap(row => \n    [row.cf_p25, row.cf_p50, row.cf_p75, row.cf_p90].filter(Boolean)\n  );\n\n  return {\n    tcc: {\n      p25: calculatePercentile(tccs, 25),\n      p50: calculatePercentile(tccs, 50),\n      p75: calculatePercentile(tccs, 75),\n      p90: calculatePercentile(tccs, 90),\n    },\n    wrvu: {\n      p25: calculatePercentile(wrvus, 25),\n      p50: calculatePercentile(wrvus, 50),\n      p75: calculatePercentile(wrvus, 75),\n      p90: calculatePercentile(wrvus, 90),\n    },\n    cf: {\n      p25: calculatePercentile(cfs, 25),\n      p50: calculatePercentile(cfs, 50),\n      p75: calculatePercentile(cfs, 75),\n      p90: calculatePercentile(cfs, 90),\n    },\n  };\n};\n\n/**\n * Calculates percentile rank using linear interpolation\n * \n * @param percentileObj - Object containing percentile values\n * @param value - Value to find percentile for\n * @returns Percentile rank (0-100) or null if invalid\n */\nexport const getPercentileRank = (\n  percentileObj: any, \n  value: number\n): number | null => {\n  if (!percentileObj || value === null || value === undefined || isNaN(value)) {\n    return null;\n  }\n\n  const points = [\n    { p: 0, v: percentileObj.p0 ?? 0 },\n    { p: 25, v: percentileObj.p25 },\n    { p: 50, v: percentileObj.p50 },\n    { p: 75, v: percentileObj.p75 },\n    { p: 90, v: percentileObj.p90 },\n    { p: 100, v: percentileObj.p100 ?? percentileObj.p90 + (percentileObj.p90 - percentileObj.p75) },\n  ];\n\n  // Below 25th percentile\n  if (value < points[1].v) {\n    const { p: p0, v: v0 } = points[0];\n    const { p: p1, v: v1 } = points[1];\n    if (v1 === v0) return p0;\n    return p0 + ((value - v0) / (v1 - v0)) * (p1 - p0);\n  }\n\n  // Above 90th percentile\n  if (value > points[4].v) {\n    const { p: p1, v: v1 } = points[4];\n    const { p: p2, v: v2 } = points[5];\n    if (v2 === v1) return p1;\n    return p1 + ((value - v1) / (v2 - v1)) * (p2 - p1);\n  }\n\n  // Between 25th and 90th\n  for (let i = 1; i < points.length - 2; i++) {\n    if (value >= points[i].v && value < points[i + 1].v) {\n      const { p: p1, v: v1 } = points[i];\n      const { p: p2, v: v2 } = points[i + 1];\n      if (v2 === v1) return p1;\n      return p1 + ((value - v1) / (v2 - v1)) * (p2 - p1);\n    }\n  }\n\n  return null;\n};\n\n/**\n * Calculates user percentiles for all metrics\n * \n * @param marketData - Market data with percentiles\n * @param tccValue - User's TCC value (FTE-adjusted)\n * @param wrvuValue - User's wRVU value (FTE-adjusted)\n * @param cfValue - User's conversion factor value\n * @returns User percentile rankings\n */\nexport const calculateUserPercentiles = (\n  marketData: MarketData,\n  tccValue: number,\n  wrvuValue: number,\n  cfValue: number\n): UserPercentiles => {\n  return {\n    tcc: getPercentileRank(marketData?.tcc, tccValue),\n    wrvu: getPercentileRank(marketData?.wrvu, wrvuValue),\n    cf: getPercentileRank(marketData?.cf, cfValue),\n  };\n};\n\n/**\n * Calculates total TCC from compensation components\n * \n * @param components - Array of compensation components\n * @returns Total TCC amount\n */\nexport const calculateTotalTCC = (components: CompensationComponent[]): number => {\n  return components.reduce((sum, component) => sum + Number(component.amount || 0), 0);\n};\n\n/**\n * Applies FTE adjustment to a value\n * \n * @param value - Raw value\n * @param fte - FTE value\n * @returns FTE-adjusted value\n */\nexport const applyFTEAdjustment = (value: number, fte: number): number => {\n  return fte ? value / fte : value;\n};\n\n/**\n * Validates FMV calculation parameters\n * \n * @param params - FMV calculation parameters\n * @returns Validation result\n */\nexport const validateFMVCalculation = (params: FMVCalculationParams): FMVValidationResult => {\n  const errors: string[] = [];\n  const warnings: string[] = [];\n\n  // Validate filters\n  if (!params.filters.specialty && !params.filters.providerType && !params.filters.region) {\n    warnings.push('No filters applied - results may include broad market data');\n  }\n\n  if (params.filters.fte <= 0 || params.filters.fte > 2) {\n    errors.push('FTE must be between 0 and 2');\n  }\n\n  // Validate values based on comparison type\n  switch (params.compareType) {\n    case 'TCC':\n      if (params.tcc <= 0) {\n        errors.push('TCC value must be greater than 0');\n      }\n      break;\n    case 'wRVUs':\n      if (params.wrvus <= 0) {\n        errors.push('wRVU value must be greater than 0');\n      }\n      break;\n    case 'CFs':\n      if (params.cf <= 0) {\n        errors.push('Conversion factor must be greater than 0');\n      }\n      break;\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n    warnings\n  };\n};\n\n/**\n * Formats value for display based on comparison type\n * \n * @param value - Value to format\n * @param compareType - Type of comparison\n * @returns Formatted value string\n */\nexport const formatFMVValue = (value: number, compareType: CompareType): string => {\n  if (compareType === 'wRVUs') {\n    return value.toLocaleString(undefined, { \n      minimumFractionDigits: 2, \n      maximumFractionDigits: 2 \n    });\n  }\n  \n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(value);\n};\n\n/**\n * Extracts unique values from survey data for filters\n * \n * @param rows - Array of normalized survey rows\n * @returns Object with unique values for each filter category\n */\nexport const extractUniqueFilterValues = (rows: NormalizedSurveyRow[]) => {\n  const specialties = [...new Set(rows.map(row => row.specialty))].sort();\n  const providerTypes = [...new Set(rows.map(row => row.providerType))].sort();\n  const regions = [...new Set(rows.map(row => row.geographicRegion))].sort();\n  const surveySources = [...new Set(rows.map(row => row.surveySource))].sort();\n  const years = [...new Set(rows.map(row => row.year))].sort((a, b) => Number(b) - Number(a));\n\n  return {\n    specialties,\n    providerTypes,\n    regions,\n    surveySources,\n    years\n  };\n};\n","import { useState, useEffect, useCallback, useMemo } from 'react';\nimport { LocalStorageService } from '../../../services/StorageService';\nimport { SpecialtyMappingService } from '../../../services/SpecialtyMappingService';\nimport { \n  FMVFilters, \n  CompensationComponent, \n  CompareType, \n  MarketData, \n  UserPercentiles, \n  UniqueFilterValues,\n  NormalizedSurveyRow,\n  FMVCalculationState\n} from '../types/fmv';\nimport { \n  normalizeSurveyRow, \n  applyFMVFilters, \n  calculateMarketData, \n  calculateUserPercentiles,\n  calculateTotalTCC,\n  applyFTEAdjustment,\n  extractUniqueFilterValues,\n  normalizeString\n} from '../utils/fmvCalculations';\n\n/**\n * Custom hook for managing FMV calculator data and state\n * \n * @returns Object containing FMV state and actions\n */\nexport const useFMVData = () => {\n  // Core state\n  const [filters, setFilters] = useState<FMVFilters>({\n    specialty: '',\n    providerType: '',\n    region: '',\n    surveySource: '',\n    year: '',\n    fte: 1.0,\n  });\n\n  const [compComponents, setCompComponents] = useState<CompensationComponent[]>([\n    { type: 'Base Salary', amount: '', notes: '' }\n  ]);\n\n  const [wrvus, setWRVUs] = useState<string>('');\n  const [cf, setCF] = useState<string>('');\n  const [compareType, setCompareType] = useState<CompareType>('TCC');\n\n  // Market data and calculations\n  const [marketData, setMarketData] = useState<MarketData | null>(null);\n  const [percentiles, setPercentiles] = useState<UserPercentiles>({ \n    tcc: null, \n    wrvu: null, \n    cf: null \n  });\n\n  // UI state\n  const [uniqueValues, setUniqueValues] = useState<UniqueFilterValues>({\n    specialties: [],\n    providerTypes: [],\n    regions: [],\n    surveySources: [],\n    years: []\n  });\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Memoized calculations\n  const tcc = useMemo(() => calculateTotalTCC(compComponents), [compComponents]);\n  const tccFTEAdjusted = useMemo(() => applyFTEAdjustment(tcc, filters.fte), [tcc, filters.fte]);\n  const wrvusFTEAdjusted = useMemo(() => applyFTEAdjustment(Number(wrvus), filters.fte), [wrvus, filters.fte]);\n\n  /**\n   * Fetches unique filter values from survey data and mappings\n   */\n  const fetchUniqueValues = useCallback(async () => {\n    try {\n      const storageService = new LocalStorageService();\n      const mappingService = new SpecialtyMappingService(storageService);\n      const allMappings = await mappingService.getAllMappings();\n      const uploadedSurveys = await storageService.listSurveys();\n      \n      const yearsSet = new Set<string>();\n      const values = {\n        specialties: new Set<string>(),\n        providerTypes: new Set<string>(),\n        regions: new Set<string>(),\n        surveySources: new Set<string>()\n      };\n\n      // Add mapped specialties\n      allMappings.forEach(mapping => {\n        if (mapping.standardizedName) {\n          values.specialties.add(mapping.standardizedName);\n        }\n      });\n\n      let allRows: NormalizedSurveyRow[] = [];\n\n      // Process uploaded surveys\n      for (const survey of uploadedSurveys) {\n        let year = '';\n        if (survey.metadata?.columnMappings?.surveyYear) {\n          year = String(survey.metadata.columnMappings.surveyYear);\n        } else if (survey.metadata?.surveyYear) {\n          year = String(survey.metadata.surveyYear);\n        }\n        if (year) yearsSet.add(year);\n\n        // Add metadata values\n        if (survey.metadata.uniqueProviderTypes) {\n          survey.metadata.uniqueProviderTypes.forEach((pt: string) => values.providerTypes.add(pt));\n        }\n        if (survey.metadata.uniqueRegions) {\n          survey.metadata.uniqueRegions.forEach((r: string) => values.regions.add(r));\n        }\n        if (survey.metadata.surveyType) values.surveySources.add(survey.metadata.surveyType);\n\n        // Process survey data\n        const data = await storageService.getSurveyData(survey.id);\n        if (data?.rows) {\n          const cm = survey.metadata?.columnMappings || {};\n          const normalizedRows = data.rows.map(row => normalizeSurveyRow(row, survey.metadata, cm));\n          \n          normalizedRows.forEach((row: NormalizedSurveyRow) => {\n            if (row.providerType) values.providerTypes.add(row.providerType);\n            if (row.geographicRegion) values.regions.add(row.geographicRegion);\n            if (row.specialty) values.specialties.add(row.specialty);\n            if (row.year) yearsSet.add(String(row.year));\n          });\n          \n          allRows = allRows.concat(normalizedRows);\n        }\n      }\n\n      setUniqueValues({\n        specialties: Array.from(values.specialties).sort(),\n        providerTypes: Array.from(values.providerTypes).sort(),\n        regions: Array.from(values.regions).sort(),\n        surveySources: Array.from(values.surveySources).sort(),\n        years: Array.from(yearsSet).sort((a, b) => Number(b) - Number(a))\n      });\n    } catch (err) {\n      console.error('Error fetching unique values:', err);\n      setError('Failed to load filter options');\n    }\n  }, []);\n\n  /**\n   * Fetches and calculates market data based on current filters\n   */\n  const fetchMarketData = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const storageService = new LocalStorageService();\n      const mappingService = new SpecialtyMappingService(storageService);\n      const allMappings = await mappingService.getAllMappings();\n      const uploadedSurveys = await storageService.listSurveys();\n      \n      let allRows: NormalizedSurveyRow[] = [];\n\n      // Collect all survey data\n      for (const survey of uploadedSurveys) {\n        const data = await storageService.getSurveyData(survey.id);\n        if (data?.rows) {\n          const cm = survey.metadata?.columnMappings || {};\n          const normalizedRows = data.rows.map(row => normalizeSurveyRow(row, survey.metadata, cm));\n          allRows = allRows.concat(normalizedRows);\n        }\n      }\n\n      // Find mapped specialties for filtering\n      let mappedSpecialties: string[] = [];\n      if (filters.specialty) {\n        const mapping = allMappings.find(m => \n          normalizeString(m.standardizedName) === normalizeString(filters.specialty)\n        );\n        if (mapping) {\n          mappedSpecialties = mapping.sourceSpecialties.map(s => normalizeString(s.specialty));\n        } else {\n          mappedSpecialties = [normalizeString(filters.specialty)];\n        }\n      }\n\n      // Apply filters\n      const filteredRows = applyFMVFilters(allRows, filters, mappedSpecialties);\n\n      // Calculate market data\n      const calculatedMarketData = calculateMarketData(filteredRows);\n\n      // Calculate user percentiles\n      const calculatedPercentiles = calculateUserPercentiles(\n        calculatedMarketData,\n        tccFTEAdjusted,\n        wrvusFTEAdjusted,\n        Number(cf)\n      );\n\n      setMarketData(calculatedMarketData);\n      setPercentiles(calculatedPercentiles);\n    } catch (err) {\n      console.error('Error fetching market data:', err);\n      setError('Failed to load market data');\n    } finally {\n      setLoading(false);\n    }\n  }, [filters, tccFTEAdjusted, wrvusFTEAdjusted, cf]);\n\n  /**\n   * Updates filters and triggers market data recalculation\n   */\n  const updateFilters = useCallback((newFilters: Partial<FMVFilters>) => {\n    setFilters(prev => ({ ...prev, ...newFilters }));\n  }, []);\n\n  /**\n   * Adds a new compensation component\n   */\n  const addCompComponent = useCallback(() => {\n    setCompComponents(prev => [...prev, { type: '', amount: '', notes: '' }]);\n  }, []);\n\n  /**\n   * Removes a compensation component by index\n   */\n  const removeCompComponent = useCallback((index: number) => {\n    setCompComponents(prev => prev.filter((_, i) => i !== index));\n  }, []);\n\n  /**\n   * Updates a compensation component by index and field\n   */\n  const updateCompComponent = useCallback((\n    index: number, \n    field: keyof CompensationComponent, \n    value: string\n  ) => {\n    setCompComponents(prev => {\n      const newComponents = [...prev];\n      newComponents[index] = { ...newComponents[index], [field]: value };\n      return newComponents;\n    });\n  }, []);\n\n  /**\n   * Resets all filters to default values\n   */\n  const resetFilters = useCallback(() => {\n    setFilters({\n      specialty: '',\n      providerType: '',\n      region: '',\n      surveySource: '',\n      year: '',\n      fte: 1.0,\n    });\n  }, []);\n\n  /**\n   * Clears all compensation components\n   */\n  const clearCompComponents = useCallback(() => {\n    setCompComponents([{ type: 'Base Salary', amount: '', notes: '' }]);\n  }, []);\n\n  /**\n   * Resets all input values\n   */\n  const resetAll = useCallback(() => {\n    resetFilters();\n    clearCompComponents();\n    setWRVUs('');\n    setCF('');\n    setCompareType('TCC');\n  }, [resetFilters, clearCompComponents]);\n\n  // Load unique values on mount\n  useEffect(() => {\n    fetchUniqueValues();\n  }, [fetchUniqueValues]);\n\n  // Recalculate market data when dependencies change\n  useEffect(() => {\n    fetchMarketData();\n  }, [fetchMarketData]);\n\n  return {\n    // State\n    filters,\n    compComponents,\n    wrvus,\n    cf,\n    compareType,\n    marketData,\n    percentiles,\n    uniqueValues,\n    loading,\n    error,\n    \n    // Calculated values\n    tcc,\n    tccFTEAdjusted,\n    wrvusFTEAdjusted,\n    \n    // Actions\n    updateFilters,\n    setCompComponents,\n    setWRVUs,\n    setCF,\n    setCompareType,\n    addCompComponent,\n    removeCompComponent,\n    updateCompComponent,\n    resetFilters,\n    clearCompComponents,\n    resetAll,\n    fetchMarketData,\n  };\n};\n","import React from 'react';\nimport { \n  Grid, \n  TextField, \n  MenuItem, \n  InputAdornment \n} from '@mui/material';\nimport { FMVFiltersProps } from '../types/fmv';\n\n/**\n * FMV Filters component for filtering market data\n * \n * @param filters - Current filter values\n * @param onFiltersChange - Callback when filters change\n * @param uniqueValues - Available unique values for each filter\n */\nexport const FMVFilters: React.FC<FMVFiltersProps> = ({ \n  filters, \n  onFiltersChange, \n  uniqueValues \n}) => {\n  const handleFilterChange = (field: keyof typeof filters, value: string | number) => {\n    onFiltersChange({ ...filters, [field]: value });\n  };\n\n  return (\n    <Grid container spacing={2} sx={{ mb: 3 }}>\n      <Grid item xs={12} md={4}>\n        <TextField\n          select\n          label=\"Specialty\"\n          value={filters.specialty}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => \n            handleFilterChange('specialty', e.target.value)\n          }\n          fullWidth\n          size=\"small\"\n          sx={{\n            '& .MuiOutlinedInput-root': {\n              borderRadius: '8px',\n            }\n          }}\n        >\n          <MenuItem value=\"\">All Specialties</MenuItem>\n          {uniqueValues.specialties.map(option => (\n            <MenuItem key={option} value={option}>{option}</MenuItem>\n          ))}\n        </TextField>\n      </Grid>\n\n      <Grid item xs={12} md={4}>\n        <TextField\n          select\n          label=\"Provider Type\"\n          value={filters.providerType}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => \n            handleFilterChange('providerType', e.target.value)\n          }\n          fullWidth\n          size=\"small\"\n          sx={{\n            '& .MuiOutlinedInput-root': {\n              borderRadius: '8px',\n            }\n          }}\n        >\n          <MenuItem value=\"\">All Types</MenuItem>\n          {uniqueValues.providerTypes.map(option => (\n            <MenuItem key={option} value={option}>{option}</MenuItem>\n          ))}\n        </TextField>\n      </Grid>\n\n      <Grid item xs={12} md={4}>\n        <TextField\n          select\n          label=\"Region\"\n          value={filters.region}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => \n            handleFilterChange('region', e.target.value)\n          }\n          fullWidth\n          size=\"small\"\n          sx={{\n            '& .MuiOutlinedInput-root': {\n              borderRadius: '8px',\n            }\n          }}\n        >\n          <MenuItem value=\"\">All Regions</MenuItem>\n          {uniqueValues.regions.map(option => (\n            <MenuItem key={option} value={option}>{option}</MenuItem>\n          ))}\n        </TextField>\n      </Grid>\n\n      <Grid item xs={12} md={4}>\n        <TextField\n          select\n          label=\"Survey Source\"\n          value={filters.surveySource}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => \n            handleFilterChange('surveySource', e.target.value)\n          }\n          fullWidth\n          size=\"small\"\n          sx={{\n            '& .MuiOutlinedInput-root': {\n              borderRadius: '8px',\n            }\n          }}\n        >\n          <MenuItem value=\"\">All Sources</MenuItem>\n          {uniqueValues.surveySources.map(option => (\n            <MenuItem key={option} value={option}>{option}</MenuItem>\n          ))}\n        </TextField>\n      </Grid>\n\n      <Grid item xs={12} md={4}>\n        <TextField\n          select\n          label=\"Year\"\n          value={filters.year}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => \n            handleFilterChange('year', e.target.value)\n          }\n          fullWidth\n          size=\"small\"\n          sx={{\n            '& .MuiOutlinedInput-root': {\n              borderRadius: '8px',\n            }\n          }}\n        >\n          <MenuItem value=\"\">All Years</MenuItem>\n          {uniqueValues.years.map(option => (\n            <MenuItem key={option} value={option}>{option}</MenuItem>\n          ))}\n        </TextField>\n      </Grid>\n\n      <Grid item xs={12} md={4}>\n        <TextField\n          label=\"FTE\"\n          type=\"number\"\n          value={filters.fte}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => \n            handleFilterChange('fte', Math.max(0, Math.min(2, Number(e.target.value))))\n          }\n          fullWidth\n          size=\"small\"\n          inputProps={{ min: 0, max: 2, step: 0.01 }}\n          InputProps={{\n            endAdornment: <InputAdornment position=\"end\">FTE</InputAdornment>\n          }}\n          sx={{\n            '& .MuiOutlinedInput-root': {\n              borderRadius: '8px',\n            }\n          }}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n","import React from 'react';\nimport { \n  Paper, \n  Box, \n  Typography, \n  RadioGroup, \n  FormControlLabel, \n  Radio \n} from '@mui/material';\nimport { CompareTypeSelectorProps } from '../types/fmv';\n\n/**\n * Comparison Type Selector component for choosing FMV analysis type\n * \n * @param compareType - Current comparison type\n * @param onCompareTypeChange - Callback when comparison type changes\n */\nexport const CompareTypeSelector: React.FC<CompareTypeSelectorProps> = ({ \n  compareType, \n  onCompareTypeChange \n}) => {\n  return (\n    <Paper sx={{ \n      p: 2, \n      mb: 3, \n      background: '#f8fafc', \n      boxShadow: 'none', \n      border: '1.5px solid #b0b4bb' \n    }}>\n      <Box sx={{ display: 'flex', alignItems: 'center', gap: 3 }}>\n        <Typography\n          variant=\"subtitle1\"\n          sx={{ \n            fontWeight: 600, \n            color: 'text.primary', \n            mb: 0, \n            minWidth: 180 \n          }}\n          component=\"label\"\n          htmlFor=\"comparison-type-radio-group\"\n        >\n          Comparison Type\n        </Typography>\n        <RadioGroup\n          row\n          id=\"comparison-type-radio-group\"\n          value={compareType}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => \n            onCompareTypeChange(e.target.value as 'TCC' | 'wRVUs' | 'CFs')\n          }\n          sx={{ gap: 4 }}\n        >\n          <FormControlLabel \n            value=\"TCC\" \n            control={<Radio />} \n            label=\"Total Cash Compensation\" \n          />\n          <FormControlLabel \n            value=\"wRVUs\" \n            control={<Radio />} \n            label=\"Work RVUs\" \n          />\n          <FormControlLabel \n            value=\"CFs\" \n            control={<Radio />} \n            label=\"Conversion Factors\" \n          />\n        </RadioGroup>\n      </Box>\n    </Paper>\n  );\n};\n","import React from 'react';\nimport { \n  Paper, \n  Typography, \n  Grid, \n  TextField, \n  Box, \n  Button, \n  InputAdornment \n} from '@mui/material';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport { TrashIcon } from '@heroicons/react/24/outline';\nimport { TCCItemizationProps } from '../types/fmv';\nimport { calculateTotalTCC } from '../utils/fmvCalculations';\n\n/**\n * TCC Itemization component for breaking down compensation components\n * \n * @param components - Array of compensation components\n * @param onComponentsChange - Callback when components change\n */\nexport const TCCItemization: React.FC<TCCItemizationProps> = ({ \n  components, \n  onComponentsChange \n}) => {\n  const addComponent = () => {\n    onComponentsChange([...components, { type: '', amount: '', notes: '' }]);\n  };\n\n  const removeComponent = (idx: number) => {\n    onComponentsChange(components.filter((_, i) => i !== idx));\n  };\n\n  const updateComponent = (idx: number, field: 'type' | 'amount' | 'notes', value: string) => {\n    const newComps = [...components];\n    newComps[idx] = { ...newComps[idx], [field]: value };\n    onComponentsChange(newComps);\n  };\n\n  const total = calculateTotalTCC(components);\n\n  return (\n    <Paper sx={{ \n      p: 2, \n      mb: 3, \n      border: '1.5px solid #b0b4bb', \n      boxShadow: 'none' \n    }}>\n      <Typography variant=\"subtitle1\" sx={{ mb: 1, fontWeight: 700 }}>\n        Compensation Components\n      </Typography>\n      \n      <Grid container spacing={2} alignItems=\"center\">\n        {components.map((component, idx) => (\n          <React.Fragment key={idx}>\n            <Grid item xs={12} md={3}>\n              <Autocomplete\n                freeSolo\n                options={[\"Base Salary\", \"Bonus\", \"Incentive\", \"Other\"]}\n                value={component.type}\n                onInputChange={(_, newValue) => updateComponent(idx, 'type', newValue)}\n                renderInput={(params) => (\n                  <TextField \n                    {...params} \n                    label=\"Type\" \n                    fullWidth \n                    size=\"small\"\n                    sx={{\n                      '& .MuiOutlinedInput-root': {\n                        borderRadius: '8px',\n                      }\n                    }}\n                  />\n                )}\n              />\n            </Grid>\n            \n            <Grid item xs={12} md={3}>\n              <TextField\n                label=\"Amount\"\n                type=\"number\"\n                value={component.amount}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => \n                  updateComponent(idx, 'amount', e.target.value)\n                }\n                fullWidth\n                size=\"small\"\n                InputProps={{ \n                  startAdornment: <InputAdornment position=\"start\">$</InputAdornment> \n                }}\n                sx={{\n                  '& .MuiOutlinedInput-root': {\n                    borderRadius: '8px',\n                  }\n                }}\n              />\n            </Grid>\n            \n            <Grid item xs={12} md={6} sx={{ display: 'flex', alignItems: 'center' }}>\n              <TextField\n                label=\"Notes\"\n                value={component.notes}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => \n                  updateComponent(idx, 'notes', e.target.value)\n                }\n                size=\"small\"\n                sx={{ \n                  flex: 1, \n                  mr: 2,\n                  '& .MuiOutlinedInput-root': {\n                    borderRadius: '8px',\n                  }\n                }}\n              />\n              <Box sx={{ \n                display: 'flex', \n                alignItems: 'center', \n                minWidth: 120, \n                justifyContent: 'flex-end' \n              }}>\n                <Button\n                  onClick={() => removeComponent(idx)}\n                  color=\"error\"\n                  size=\"small\"\n                  sx={{ minWidth: 0, p: 1, mr: 1 }}\n                  aria-label=\"Remove\"\n                >\n                  <TrashIcon className=\"h-5 w-5 text-gray-500\" />\n                </Button>\n              </Box>\n            </Grid>\n          </React.Fragment>\n        ))}\n      </Grid>\n      \n      {/* Total TCC and Add Component Button */}\n      <Box sx={{ \n        mt: 2, \n        display: 'flex', \n        alignItems: 'center', \n        justifyContent: 'space-between' \n      }}>\n        <Typography sx={{ \n          fontWeight: 700, \n          fontSize: '1.1rem', \n          textAlign: 'left' \n        }}>\n          Total TCC: ${total.toLocaleString()}\n        </Typography>\n        <Button\n          variant=\"outlined\"\n          size=\"small\"\n          startIcon={<span style={{ fontWeight: 'bold', fontSize: '1.2em' }}>+</span>}\n          onClick={addComponent}\n          sx={{\n            borderRadius: '8px',\n          }}\n        >\n          Add Component\n        </Button>\n      </Box>\n    </Paper>\n  );\n};\n","import React from 'react';\nimport { \n  Paper, \n  FormControl, \n  Typography, \n  TextField, \n  InputAdornment, \n  FormHelperText \n} from '@mui/material';\nimport { WRVUsInputProps } from '../types/fmv';\nimport { applyFTEAdjustment } from '../utils/fmvCalculations';\n\n/**\n * WRVUs Input component for entering work RVU values\n * \n * @param value - Current wRVU value\n * @param onChange - Callback when value changes\n * @param fte - FTE value for adjustment calculation\n */\nexport const WRVUsInput: React.FC<WRVUsInputProps> = ({ \n  value, \n  onChange, \n  fte \n}) => {\n  const normalized = applyFTEAdjustment(Number(value), fte);\n\n  return (\n    <Paper sx={{ p: 2, mb: 2 }}>\n      <FormControl fullWidth>\n        <Typography variant=\"subtitle1\" sx={{ mb: 1 }}>\n          Work RVUs\n        </Typography>\n        <TextField\n          label=\"Annual wRVUs\"\n          type=\"number\"\n          value={value}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => onChange(e.target.value)}\n          size=\"small\"\n          InputProps={{ \n            endAdornment: <InputAdornment position=\"end\">wRVUs</InputAdornment> \n          }}\n          sx={{ \n            mb: 1, \n            width: 220,\n            '& .MuiOutlinedInput-root': {\n              borderRadius: '8px',\n            }\n          }}\n        />\n        <FormHelperText>\n          <span style={{ fontWeight: 500, color: '#333' }}>\n            FTE-adjusted: {normalized.toLocaleString(undefined, { \n              minimumFractionDigits: 2, \n              maximumFractionDigits: 2 \n            })} wRVUs\n          </span>\n          <br />\n          <span style={{ color: '#888' }}>\n            Your value will be annualized to 1.0 FTE for market comparison.\n          </span>\n        </FormHelperText>\n      </FormControl>\n    </Paper>\n  );\n};\n","import React from 'react';\nimport { \n  Paper, \n  FormControl, \n  Typography, \n  TextField, \n  InputAdornment, \n  FormHelperText \n} from '@mui/material';\nimport { CFInputProps } from '../types/fmv';\n\n/**\n * Conversion Factor Input component for entering conversion factor values\n * \n * @param value - Current conversion factor value\n * @param onChange - Callback when value changes\n * @param fte - FTE value (not used for CF but kept for consistency)\n * @param percentile - Optional percentile value for display\n */\nexport const CFInput: React.FC<CFInputProps> = ({ \n  value, \n  onChange, \n  fte, \n  percentile \n}) => {\n  return (\n    <Paper sx={{ \n      p: 2, \n      mb: 2, \n      border: '1.5px solid #b0b4bb', \n      boxShadow: 'none' \n    }}>\n      <FormControl fullWidth>\n        <Typography variant=\"subtitle1\" sx={{ mb: 1 }}>\n          Conversion Factor ($/wRVU)\n        </Typography>\n        <TextField\n          label=\"Conversion Factor\"\n          type=\"number\"\n          value={value}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => onChange(e.target.value)}\n          size=\"small\"\n          InputProps={{ \n            startAdornment: <InputAdornment position=\"start\">$</InputAdornment>, \n            endAdornment: <InputAdornment position=\"end\">/wRVU</InputAdornment> \n          }}\n          sx={{ \n            mb: 1, \n            width: 220,\n            '& .MuiOutlinedInput-root': {\n              borderRadius: '8px',\n            }\n          }}\n        />\n        <FormHelperText>\n          Enter your conversion factor, or calculate as TCC / wRVUs.\n          <br />\n          <span style={{ color: '#888' }}>\n            FTE does not affect this value.\n          </span>\n        </FormHelperText>\n      </FormControl>\n    </Paper>\n  );\n};\n","import React from 'react';\nimport { \n  Paper, \n  Typography, \n  Grid, \n  Box, \n  Button \n} from '@mui/material';\nimport { keyframes } from '@mui/system';\nimport { ResultsPanelProps } from '../types/fmv';\nimport { formatFMVValue } from '../utils/fmvCalculations';\n\n// CSS keyframes for marker pulse animation\nconst markerPulse = keyframes`\n  0% { box-shadow: 0 0 0 0 rgba(33, 150, 243, 0.7); }\n  70% { box-shadow: 0 0 0 10px rgba(33, 150, 243, 0); }\n  100% { box-shadow: 0 0 0 0 rgba(33, 150, 243, 0); }\n`;\n\n/**\n * Results Panel component for displaying market comparison results\n * \n * @param compareType - Type of comparison being displayed\n * @param marketData - Market data with percentiles\n * @param percentiles - User percentile rankings\n * @param inputValue - User's input value\n * @param rawValue - Raw user value\n * @param fte - FTE value\n * @param onResetFilters - Optional callback to reset filters\n */\nexport const ResultsPanel: React.FC<ResultsPanelProps> = ({ \n  compareType, \n  marketData, \n  percentiles, \n  inputValue, \n  rawValue, \n  fte, \n  onResetFilters \n}) => {\n  // Get the appropriate percentile data based on comparison type\n  const percentileData = \n    compareType === 'wRVUs' ? marketData?.wrvu :\n    compareType === 'TCC' ? marketData?.tcc :\n    compareType === 'CFs' ? marketData?.cf :\n    undefined;\n\n  const currentPercentile = \n    compareType === 'wRVUs' ? percentiles.wrvu :\n    compareType === 'TCC' ? percentiles.tcc :\n    compareType === 'CFs' ? percentiles.cf :\n    null;\n\n  // Check if market data is available\n  const noMarketData = !percentileData;\n\n  return (\n    <Paper sx={{ \n      p: 2, \n      mt: 3, \n      border: '1.5px solid #b0b4bb', \n      boxShadow: 'none' \n    }}>\n      <Typography variant=\"subtitle1\" sx={{ mb: 2, fontWeight: 700 }}>\n        Market Comparison\n      </Typography>\n      \n      {noMarketData ? (\n        <Box sx={{ textAlign: 'center', py: 4 }}>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n            No market data available for these filters.\n          </Typography>\n          {onResetFilters && (\n            <Button \n              variant=\"outlined\" \n              size=\"small\" \n              onClick={onResetFilters}\n              sx={{\n                borderRadius: '8px',\n              }}\n            >\n              Reset Filters\n            </Button>\n          )}\n        </Box>\n      ) : (\n        <>\n          {/* Percentile Cards */}\n          <Grid container spacing={2} sx={{ mb: 3 }}>\n            {['25th', '50th', '75th', '90th'].map((percentile) => {\n              const key = `p${percentile.slice(0, 2)}` as keyof typeof percentileData;\n              return (\n                <Grid item xs={12} sm={6} md={3} key={percentile}>\n                  <Paper sx={{ \n                    p: 1.5, \n                    textAlign: 'center', \n                    background: '#f8fafc', \n                    boxShadow: 2, \n                    border: '1.5px solid #b0b4bb' \n                  }}>\n                    <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                      {percentile} Percentile\n                    </Typography>\n                    <Typography variant=\"h6\">\n                      {percentileData && percentileData[key] != null\n                        ? formatFMVValue(percentileData[key], compareType)\n                        : '-'}\n                    </Typography>\n                  </Paper>\n                </Grid>\n              );\n            })}\n          </Grid>\n\n          {/* Percentile Visualization */}\n          <Box sx={{ mt: 7, mb: 2, textAlign: 'center' }}>\n            {typeof currentPercentile === 'number' && !isNaN(currentPercentile) ? (\n              <Typography\n                variant=\"h6\"\n                gutterBottom\n                color=\"primary\"\n                sx={{ fontWeight: 700, fontSize: '1.35rem', mb: 2 }}\n              >\n                You are in the {currentPercentile.toFixed(2)}th percentile\n              </Typography>\n            ) : (\n              <Typography variant=\"h6\" gutterBottom color=\"text.secondary\" sx={{ mb: 2 }}>\n                Enter a value to see your percentile\n              </Typography>\n            )}\n            \n            {/* Percentile Bar */}\n            <Box sx={{ \n              position: 'relative', \n              height: 6, \n              bgcolor: 'grey.200', \n              borderRadius: 2, \n              mt: 3 \n            }}>\n              <Box\n                sx={{\n                  position: 'absolute',\n                  left: `${typeof currentPercentile === 'number' && !isNaN(currentPercentile) ? currentPercentile : 0}%`,\n                  top: -8,\n                  width: 24,\n                  height: 24,\n                  bgcolor: 'primary.main',\n                  border: '3px solid #fff',\n                  boxShadow: 1,\n                  borderRadius: '50%',\n                  transform: 'translateX(-50%)',\n                  zIndex: 1,\n                  animation: `${markerPulse} 1.5s infinite`,\n                }}\n              />\n              <Box sx={{ \n                position: 'absolute', \n                left: 0, \n                top: 0, \n                width: '100%', \n                height: 6, \n                bgcolor: 'primary.main', \n                borderRadius: 2, \n                opacity: 0.2 \n              }} />\n            </Box>\n            \n            {/* Percentile Labels */}\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 1 }}>\n              <Typography variant=\"subtitle1\" sx={{ fontWeight: 700, fontSize: '1.1rem' }}>\n                0th\n              </Typography>\n              <Typography variant=\"subtitle1\" sx={{ fontWeight: 700, fontSize: '1.1rem' }}>\n                100th\n              </Typography>\n            </Box>\n          </Box>\n        </>\n      )}\n    </Paper>\n  );\n};\n","import { Box, Typography, Table, TableBody, TableCell, TableRow, Grid } from '@mui/material';\nimport { forwardRef } from 'react';\n\ninterface Props {\n  compareType: 'TCC' | 'wRVUs' | 'CFs';\n  specialty: string;\n  providerType: string;\n  region: string;\n  year: string;\n  value: number;\n  marketPercentile: number;\n  marketData: { p25: number; p50: number; p75: number; p90: number };\n}\n\nconst FairMarketValuePrintable = forwardRef<HTMLDivElement, Props>(({\n  compareType, specialty, providerType, region, year,\n  value, marketPercentile, marketData\n}, ref) => {\n  // Label and formatting based on compareType\n  let valueLabel = 'Total Compensation';\n  let valuePrefix = '$';\n  let valueSuffix = '';\n  if (compareType === 'wRVUs') {\n    valueLabel = 'Work RVUs';\n    valuePrefix = '';\n    valueSuffix = ' wRVUs';\n  } else if (compareType === 'CFs') {\n    valueLabel = 'Conversion Factor';\n    valuePrefix = '$';\n    valueSuffix = ' /wRVU';\n  }\n  const formatValue = (v: number) =>\n    compareType === 'wRVUs'\n      ? v.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })\n      : v.toLocaleString();\n\n  return (\n    <Box\n      ref={ref}\n      sx={{\n        fontFamily: 'Inter, Roboto, Arial, Helvetica, sans-serif',\n        background: 'white',\n        color: 'black',\n        maxWidth: 650,\n        margin: '0 auto',\n        p: 4,\n        boxSizing: 'border-box',\n        '@media print': {\n          color: 'black',\n          backgroundColor: 'white',\n          boxShadow: 'none',\n          '-webkit-print-color-adjust': 'exact',\n          printColorAdjust: 'exact',\n          padding: '32px',\n          maxWidth: '650px',\n          margin: '0 auto',\n        }\n      }}\n    >\n      {/* Global print CSS for strong borders, font, and spacing */}\n      <style>{`\n        @media print {\n          body { background: white !important; }\n          * { box-sizing: border-box; }\n          .fmv-print-title { font-size: 32px !important; font-weight: 800 !important; letter-spacing: 0.5px; }\n          .fmv-print-section { font-size: 18px !important; font-weight: 700 !important; margin-bottom: 8px; }\n          .fmv-print-table, .fmv-print-table th, .fmv-print-table td {\n            border: 2px solid #222 !important;\n            font-size: 16px !important;\n            font-weight: 500 !important;\n            color: #111 !important;\n          }\n          .fmv-print-table th, .fmv-print-table td { padding: 12px 16px !important; }\n          .fmv-print-bold { font-weight: 800 !important; }\n          .fmv-print-market-label { font-size: 15px !important; font-weight: 700 !important; }\n          .fmv-print-market-value { font-size: 20px !important; font-weight: 800 !important; }\n        }\n      `}</style>\n      {/* Header with real logo */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n          <img src={process.env.PUBLIC_URL + '/Icon.png'} alt=\"BenchPoint Logo\" style={{ width: 40, height: 40, objectFit: 'contain', marginRight: 16 }} />\n          <Typography sx={{ fontWeight: 700, fontSize: 28, letterSpacing: 1, fontFamily: 'inherit' }}>BenchPoint</Typography>\n        </Box>\n        <Box textAlign=\"right\">\n          <Typography sx={{ fontSize: 13, fontWeight: 600, color: 'black', mb: 0.5 }}>Fair Market Value Report</Typography>\n          <Typography sx={{ fontSize: 13, color: 'black' }}>Generated: {new Date().toLocaleDateString()}</Typography>\n        </Box>\n      </Box>\n      <Box sx={{ borderBottom: '2px solid #222', mb: 2 }} />\n      {/* Title */}\n      <Typography className=\"fmv-print-title\" sx={{ mb: 2, mt: 1, color: 'black', textAlign: 'left' }}>\n        Fair Market Value Summary\n      </Typography>\n      <Box sx={{ borderBottom: '2px solid #222', mb: 2 }} />\n      {/* Position Details */}\n      <Typography className=\"fmv-print-section\" sx={{ color: 'black', mb: 0 }}>Position Details</Typography>\n      <Table size=\"small\" className=\"fmv-print-table\" sx={{ mb: 3, minWidth: 400, border: '2px solid #222', borderRadius: 1 }}>\n        <TableBody>\n          <TableRow>\n            <TableCell>{specialty}</TableCell>\n            <TableCell>{providerType}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>{region}</TableCell>\n            <TableCell>Year {year}</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n      {/* Compensation/Productivity/CF Analysis */}\n      <Typography className=\"fmv-print-section\" sx={{ color: 'black', mb: 0 }}>{valueLabel} Analysis</Typography>\n      <Box sx={{ border: '2px solid #222', borderRadius: 1, mb: 3 }}>\n        <Grid container>\n          <Grid item xs={7} sx={{ p: 1.5, borderRight: '1.5px solid #222', fontSize: 16, fontWeight: 500 }}>{valueLabel}</Grid>\n          <Grid item xs={5} sx={{ p: 1.5, textAlign: 'right', fontWeight: 700, fontSize: 20 }}>\n            {valuePrefix}{formatValue(value)}{valueSuffix}\n          </Grid>\n        </Grid>\n        <Box sx={{ borderTop: '1.5px solid #222' }} />\n        <Grid container>\n          <Grid item xs={7} sx={{ p: 1.5, borderRight: '1.5px solid #222', fontSize: 16, fontWeight: 500 }}>Market Percentile</Grid>\n          <Grid item xs={5} sx={{ p: 1.5, textAlign: 'right', fontWeight: 500, fontSize: 16 }}>\n            {marketPercentile.toFixed(1)}th\n          </Grid>\n        </Grid>\n      </Box>\n      {/* Market Data */}\n      <Typography className=\"fmv-print-section\" sx={{ color: 'black', mb: 0 }}>Market Data</Typography>\n      <Box sx={{ border: '2px solid #222', borderRadius: 1, mb: 3, p: 0 }}>\n        <Grid container>\n          {['25th', '50th', '75th', '90th'].map((label, i) => {\n            const valueKey = ['p25', 'p50', 'p75', 'p90'][i] as keyof typeof marketData;\n            return (\n              <Grid item xs={3} key={label} sx={{\n                borderRight: i < 3 ? '1.5px solid #222' : 'none',\n                p: 2,\n                textAlign: 'center',\n              }}>\n                <Typography className=\"fmv-print-market-label\" sx={{ mb: 0.5 }}>{label} Percentile</Typography>\n                <Typography className=\"fmv-print-market-value\" sx={{ color: 'black' }}>\n                  {valuePrefix}{formatValue(marketData[valueKey] ?? 0)}{valueSuffix}\n                </Typography>\n              </Grid>\n            );\n          })}\n        </Grid>\n      </Box>\n      {/* Percentile Bar */}\n      <Box sx={{ mt: 2, mb: 0 }}>\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" fontSize=\"1.1rem\" mb={0.5}>\n          <Typography sx={{ fontWeight: 700, fontSize: 16 }}>0th</Typography>\n          <Typography sx={{ fontWeight: 700, fontSize: 16 }}>100th</Typography>\n        </Box>\n        <Box position=\"relative\" height={18} bgcolor=\"#e0e0e0\" borderRadius={3} mb={1}>\n          <Box\n            sx={{\n              position: 'absolute',\n              left: `${Math.max(0, Math.min(100, marketPercentile))}%`,\n              width: 22, height: 22,\n              bgcolor: 'black',\n              borderRadius: '50%',\n              border: '3px solid white',\n              boxShadow: 1,\n              transform: 'translateX(-50%)',\n              top: -2,\n            }}\n          />\n        </Box>\n        <Typography textAlign=\"center\" fontSize={16} fontWeight={700} mt={1} mb={1}>\n          In {marketPercentile.toFixed(1)}th percentile\n        </Typography>\n      </Box>\n    </Box>\n  );\n});\n\nexport default FairMarketValuePrintable; ","import React, { useRef } from 'react';\nimport { useReactToPrint } from 'react-to-print';\nimport { useFMVData } from '../hooks/useFMVData';\nimport { FMVFilters } from './FMVFilters';\nimport { CompareTypeSelector } from './CompareTypeSelector';\nimport { TCCItemization } from './TCCItemization';\nimport { WRVUsInput } from './WRVUsInput';\nimport { CFInput } from './CFInput';\nimport { ResultsPanel } from './ResultsPanel';\nimport FairMarketValuePrintable from '../../../components/FairMarketValuePrintable';\nimport { FMVCalculatorProps } from '../types/fmv';\n\n/**\n * Main FMV Calculator component that orchestrates all sub-components\n * \n * @param onPrint - Optional callback for print functionality\n */\nexport const FMVCalculator: React.FC<FMVCalculatorProps> = ({ onPrint }) => {\n  const {\n    // State\n    filters,\n    compComponents,\n    wrvus,\n    cf,\n    compareType,\n    marketData,\n    percentiles,\n    uniqueValues,\n    loading,\n    error,\n    \n    // Calculated values\n    tcc,\n    tccFTEAdjusted,\n    wrvusFTEAdjusted,\n    \n    // Actions\n    updateFilters,\n    setCompComponents,\n    setWRVUs,\n    setCF,\n    setCompareType,\n    resetFilters,\n  } = useFMVData();\n\n  // Print functionality\n  const printRef = useRef<HTMLDivElement>(null);\n  const handlePrint = useReactToPrint({\n    contentRef: printRef,\n    pageStyle: \"@page { size: auto; margin: 0; }\",\n    documentTitle: \"Fair Market Value Report\"\n  });\n\n  // Handle print button click\n  const handlePrintClick = () => {\n    handlePrint();\n    onPrint?.();\n  };\n\n  return (\n    <>\n      {/* Main App Content */}\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto py-6\">\n          {/* Print Button Section */}\n          <div className=\"flex justify-end mb-6\">\n            <button\n              onClick={handlePrintClick}\n              className=\"inline-flex items-center px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors duration-200\"\n            >\n              <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z\" />\n              </svg>\n              Print Report\n            </button>\n          </div>\n\n          {/* Filters Section */}\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-6\">\n            <div className=\"mb-4\">\n              <h2 className=\"text-lg font-semibold text-gray-900 mb-2\">Market Data Filters</h2>\n              <p className=\"text-sm text-gray-600\">Select criteria to filter the market data for comparison</p>\n            </div>\n            <FMVFilters \n              filters={filters}\n              onFiltersChange={updateFilters}\n              uniqueValues={uniqueValues}\n            />\n          </div>\n\n          {/* Comparison Type Selector */}\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-6\">\n            <div className=\"mb-4\">\n              <h2 className=\"text-lg font-semibold text-gray-900 mb-2\">Comparison Type</h2>\n              <p className=\"text-sm text-gray-600\">Choose what type of compensation data you want to compare</p>\n            </div>\n            <CompareTypeSelector \n              compareType={compareType}\n              onCompareTypeChange={setCompareType}\n            />\n          </div>\n\n          {/* Input Components based on comparison type */}\n          {compareType === 'TCC' && (\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-6\">\n              <div className=\"mb-4\">\n                <h2 className=\"text-lg font-semibold text-gray-900 mb-2\">Total Cash Compensation</h2>\n                <p className=\"text-sm text-gray-600\">Enter your compensation components for analysis</p>\n              </div>\n              <TCCItemization \n                components={compComponents}\n                onComponentsChange={setCompComponents}\n              />\n            </div>\n          )}\n          \n          {compareType === 'wRVUs' && (\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-6\">\n              <div className=\"mb-4\">\n                <h2 className=\"text-lg font-semibold text-gray-900 mb-2\">Work RVUs</h2>\n                <p className=\"text-sm text-gray-600\">Enter your Work RVU data for productivity analysis</p>\n              </div>\n              <WRVUsInput \n                value={wrvus}\n                onChange={setWRVUs}\n                fte={filters.fte}\n              />\n            </div>\n          )}\n          \n          {compareType === 'CFs' && (\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-6\">\n              <div className=\"mb-4\">\n                <h2 className=\"text-lg font-semibold text-gray-900 mb-2\">Conversion Factor</h2>\n                <p className=\"text-sm text-gray-600\">Enter your conversion factor for analysis</p>\n              </div>\n              <CFInput \n                value={cf}\n                onChange={setCF}\n                fte={filters.fte}\n              />\n            </div>\n          )}\n\n          {/* Results Panel */}\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n            <ResultsPanel \n              compareType={compareType}\n              marketData={marketData}\n              percentiles={percentiles}\n              inputValue={\n                compareType === 'TCC' ? tccFTEAdjusted : \n                compareType === 'wRVUs' ? wrvusFTEAdjusted : \n                Number(cf)\n              }\n              rawValue={\n                compareType === 'TCC' ? Number(tcc) : \n                compareType === 'wRVUs' ? Number(wrvus) : \n                Number(cf)\n              }\n              fte={filters.fte}\n              onResetFilters={resetFilters}\n            />\n          </div>\n        </div>\n\n        {/* Hidden printable component for react-to-print */}\n        <div style={{ position: 'absolute', left: '-9999px', top: 0, visibility: 'hidden' }}>\n          <FairMarketValuePrintable\n            ref={printRef}\n            compareType={compareType}\n            specialty={filters.specialty}\n            providerType={filters.providerType}\n            region={filters.region}\n            year={filters.year}\n            value={\n              compareType === 'TCC' ? tcc : \n              compareType === 'wRVUs' ? Number(wrvus) : \n              Number(cf)\n            }\n            marketPercentile={\n              compareType === 'TCC' ? percentiles.tcc ?? 0 :\n              compareType === 'wRVUs' ? percentiles.wrvu ?? 0 :\n              percentiles.cf ?? 0\n            }\n            marketData={\n              compareType === 'TCC' ? (marketData?.tcc ?? { p25: 0, p50: 0, p75: 0, p90: 0 }) :\n              compareType === 'wRVUs' ? (marketData?.wrvu ?? { p25: 0, p50: 0, p75: 0, p90: 0 }) :\n              (marketData?.cf ?? { p25: 0, p50: 0, p75: 0, p90: 0 })\n            }\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport { FMVCalculator } from '../features/fmv';\n\nconst FairMarketValue: React.FC = () => (\n  <FMVCalculator />\n);\n\nexport default FairMarketValue; "],"names":["calculatePercentile","numbers","percentile","length","sortedNumbers","sort","a","b","Math","floor","normalizeSurveyRow","row","surveyMeta","_surveyMeta$metadata","columnMappings","arguments","undefined","id","providerType","provider_type","geographicRegion","geographic_region","specialty","normalizedSpecialty","surveySource","surveyType","year","String","surveyYear","metadata","tcc_p25","Number","tcc_p50","tcc_p75","tcc_p90","wrvu_p25","wrvu_p50","wrvu_p75","wrvu_p90","cf_p25","cf_p50","cf_p75","cf_p90","normalizeString","str","toLowerCase","replace","trim","getPercentileRank","percentileObj","value","_percentileObj$p","_percentileObj$p2","isNaN","points","p","v","p0","p25","p50","p75","p90","p100","v0","p1","v1","p2","v2","i","calculateTotalTCC","components","reduce","sum","component","amount","applyFTEAdjustment","fte","formatFMVValue","compareType","toLocaleString","minimumFractionDigits","maximumFractionDigits","Intl","NumberFormat","style","currency","format","useFMVData","filters","setFilters","useState","region","compComponents","setCompComponents","type","notes","wrvus","setWRVUs","cf","setCF","setCompareType","marketData","setMarketData","percentiles","setPercentiles","tcc","wrvu","uniqueValues","setUniqueValues","specialties","providerTypes","regions","surveySources","years","loading","setLoading","error","setError","useMemo","tccFTEAdjusted","wrvusFTEAdjusted","fetchUniqueValues","useCallback","async","storageService","LocalStorageService","mappingService","SpecialtyMappingService","allMappings","getAllMappings","uploadedSurveys","listSurveys","yearsSet","Set","values","forEach","mapping","standardizedName","add","allRows","survey","_survey$metadata","_survey$metadata$colu","_survey$metadata2","uniqueProviderTypes","pt","uniqueRegions","r","data","getSurveyData","rows","_survey$metadata3","cm","normalizedRows","map","concat","Array","from","err","console","fetchMarketData","_survey$metadata4","mappedSpecialties","find","m","sourceSpecialties","s","filteredRows","specialtyFilters","filter","includes","applyFMVFilters","calculatedMarketData","tccs","flatMap","Boolean","cfs","calculateMarketData","calculatedPercentiles","calculateUserPercentiles","tccValue","wrvuValue","cfValue","updateFilters","newFilters","prev","_objectSpread","addCompComponent","removeCompComponent","index","_","updateCompComponent","field","newComponents","resetFilters","clearCompComponents","resetAll","useEffect","FMVFilters","_ref","onFiltersChange","handleFilterChange","_jsxs","Grid","container","spacing","sx","mb","children","_jsx","item","xs","md","TextField","select","label","onChange","e","target","fullWidth","size","borderRadius","MenuItem","option","max","min","inputProps","step","InputProps","endAdornment","InputAdornment","position","CompareTypeSelector","onCompareTypeChange","Paper","background","boxShadow","border","Box","display","alignItems","gap","Typography","variant","fontWeight","color","minWidth","htmlFor","RadioGroup","FormControlLabel","control","Radio","TCCItemization","onComponentsChange","updateComponent","idx","newComps","total","React","Autocomplete","freeSolo","options","onInputChange","newValue","renderInput","params","startAdornment","flex","mr","justifyContent","Button","onClick","removeComponent","TrashIcon","className","mt","fontSize","textAlign","startIcon","addComponent","WRVUsInput","normalized","FormControl","width","FormHelperText","CFInput","markerPulse","keyframes","_templateObject","_taggedTemplateLiteral","ResultsPanel","inputValue","rawValue","onResetFilters","percentileData","currentPercentile","noMarketData","py","_Fragment","key","slice","sm","gutterBottom","toFixed","height","bgcolor","left","top","transform","zIndex","animation","opacity","forwardRef","ref","marketPercentile","valueLabel","valuePrefix","valueSuffix","formatValue","fontFamily","maxWidth","margin","boxSizing","backgroundColor","printColorAdjust","padding","src","process","alt","objectFit","marginRight","letterSpacing","Date","toLocaleDateString","borderBottom","Table","TableBody","TableRow","TableCell","borderRight","borderTop","_marketData$valueKey","valueKey","FMVCalculator","_percentiles$tcc","_percentiles$wrvu","_percentiles$cf","_marketData$tcc","_marketData$wrvu","_marketData$cf","onPrint","printRef","useRef","handlePrint","useReactToPrint","contentRef","pageStyle","documentTitle","handlePrintClick","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","visibility","FairMarketValuePrintable","FairMarketValue"],"sourceRoot":""}