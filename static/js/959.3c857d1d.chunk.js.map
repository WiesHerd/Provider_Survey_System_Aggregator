{"version":3,"file":"static/js/959.3c857d1d.chunk.js","mappings":"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","sources":["services/ColumnMappingService.ts","components/SurveyAnalytics.tsx","components/ui/loading-spinner.tsx"],"sourcesContent":["import { LocalStorageService } from './StorageService';\nimport BackendService from './BackendService';\nimport { IColumnMapping, IColumnInfo, IAutoMappingConfig } from '../types/column';\n\nexport class ColumnMappingService {\n  private readonly MAPPINGS_KEY = 'column_mappings';\n  private readonly LEARNED_MAPPINGS_KEY = 'learned-column-mappings';\n  private storage: LocalStorageService;\n\n  constructor(storage: LocalStorageService) {\n    this.storage = storage;\n  }\n\n  async createMapping(standardizedName: string, sourceColumns: IColumnInfo[]): Promise<IColumnMapping> {\n    const payload = { standardizedName, sourceColumns };\n    const res = await fetch('http://localhost:3001/api/mappings/column', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(payload)\n    });\n    const saved = await res.json();\n    return saved as IColumnMapping;\n  }\n\n  async getAllMappings(): Promise<IColumnMapping[]> {\n    try {\n      const res = await fetch('http://localhost:3001/api/mappings/column');\n      if (!res.ok) throw new Error('Failed to fetch');\n      const data = await res.json();\n      return data as IColumnMapping[];\n    } catch {\n      return [];\n    }\n  }\n\n  async deleteMapping(mappingId: string): Promise<void> {\n    await fetch(`http://localhost:3001/api/mappings/column/${mappingId}`, { method: 'DELETE' });\n  }\n\n  async clearAllMappings(): Promise<void> {\n    console.log('Clearing all column mappings from database...');\n    const response = await fetch('http://localhost:3001/api/mappings/column', { method: 'DELETE' });\n    if (!response.ok) {\n      throw new Error(`Failed to clear mappings: ${response.status} ${response.statusText}`);\n    }\n    const result = await response.json();\n    console.log('Clear all mappings result:', result);\n  }\n\n  private async saveMappings(_mappings: IColumnMapping[]): Promise<void> {}\n\n  async autoMapColumns(config: IAutoMappingConfig): Promise<Array<{\n    standardizedName: string;\n    columns: IColumnInfo[];\n    confidence: number;\n  }>> {\n    const unmappedColumns = await this.getUnmappedColumns();\n    console.log('Auto-mapping columns:', unmappedColumns.map(c => c.name));\n    \n    const suggestions: Array<{\n      standardizedName: string;\n      columns: IColumnInfo[];\n      confidence: number;\n    }> = [];\n\n    // Group columns by similarity\n    const processedColumns = new Set<string>();\n    \n    for (const column of unmappedColumns) {\n      if (processedColumns.has(column.id)) continue;\n\n      const matches = unmappedColumns\n        .filter((c: IColumnInfo) => !processedColumns.has(c.id))\n        .map((c: IColumnInfo) => ({\n          column: c,\n          similarity: this.calculateSimilarity(column.name, c.name, c.dataType, column.dataType, config)\n        }))\n        .filter(match => {\n          console.log(`Similarity between \"${column.name}\" and \"${match.column.name}\": ${match.similarity}`);\n          return match.similarity >= config.confidenceThreshold;\n        })\n        .sort((a, b) => b.similarity - a.similarity);\n\n      if (matches.length > 0) {\n        const matchedColumns = matches.map(m => m.column);\n        matchedColumns.forEach(c => processedColumns.add(c.id));\n\n        console.log(`Creating mapping for \"${column.name}\" with ${matchedColumns.length} columns:`, \n          matchedColumns.map(c => c.name));\n\n        suggestions.push({\n          standardizedName: this.generateStandardizedName(matchedColumns),\n          columns: matchedColumns,\n          confidence: matches[0].similarity\n        });\n      }\n    }\n\n    console.log('Final auto-mapping suggestions:', suggestions.map(s => ({\n      name: s.standardizedName,\n      columns: s.columns.map(c => c.name),\n      confidence: s.confidence\n    })));\n\n    return suggestions.sort((a, b) => b.confidence - a.confidence);\n  }\n\n  private calculateSimilarity(name1: string, name2: string, type1: string, type2: string, config: IAutoMappingConfig): number {\n    // Normalize names\n    const normalized1 = name1.toLowerCase().replace(/[^a-z0-9]/g, '');\n    const normalized2 = name2.toLowerCase().replace(/[^a-z0-9]/g, '');\n\n    // Exact match gets highest score\n    if (normalized1 === normalized2) {\n      return 1.0;\n    }\n\n    // Check for exact prefix match (e.g., \"wrvu_p50\" vs \"wrvu_p90\" should NOT match)\n    const prefix1 = normalized1.replace(/[0-9]/g, '');\n    const prefix2 = normalized2.replace(/[0-9]/g, '');\n    \n    // If prefixes don't match, return very low similarity\n    if (prefix1 !== prefix2) {\n      return 0.1;\n    }\n\n    // For same prefix, check if numbers are different (e.g., p50 vs p90)\n    const numbers1 = normalized1.match(/[0-9]+/g) || [];\n    const numbers2 = normalized2.match(/[0-9]+/g) || [];\n    \n    // If numbers are different, this is likely a different metric (p50 vs p90, p25 vs p75, etc.)\n    if (numbers1.length > 0 && numbers2.length > 0) {\n      const hasDifferentNumbers = numbers1.some(n1 => \n        numbers2.some(n2 => n1 !== n2)\n      );\n      if (hasDifferentNumbers) {\n        console.log(`Different numbers detected: \"${name1}\" vs \"${name2}\" - returning 0.2 similarity`);\n        return 0.2; // Very low similarity for different percentiles/metrics\n      }\n    }\n\n    // Calculate Levenshtein distance for remaining cases\n    const distance = this.levenshteinDistance(normalized1, normalized2);\n    const maxLength = Math.max(normalized1.length, normalized2.length);\n    let similarity = 1 - distance / maxLength;\n\n    // Consider data type if enabled\n    if (config.includeDataTypeMatching) {\n      const typeMatch = type1 === type2;\n      similarity = typeMatch ? similarity : similarity * 0.8;\n    }\n\n    console.log(`Similarity calculation: \"${name1}\" vs \"${name2}\" = ${similarity}`);\n    return similarity;\n  }\n\n  private levenshteinDistance(str1: string, str2: string): number {\n    const m = str1.length;\n    const n = str2.length;\n    const dp: number[][] = Array(m + 1).fill(0).map(() => Array(n + 1).fill(0));\n\n    for (let i = 0; i <= m; i++) dp[i][0] = i;\n    for (let j = 0; j <= n; j++) dp[0][j] = j;\n\n    for (let i = 1; i <= m; i++) {\n      for (let j = 1; j <= n; j++) {\n        if (str1[i - 1] === str2[j - 1]) {\n          dp[i][j] = dp[i - 1][j - 1];\n        } else {\n          dp[i][j] = 1 + Math.min(\n            dp[i - 1][j],     // deletion\n            dp[i][j - 1],     // insertion\n            dp[i - 1][j - 1]  // substitution\n          );\n        }\n      }\n    }\n\n    return dp[m][n];\n  }\n\n  private generateStandardizedName(columns: IColumnInfo[]): string {\n    // Use the shortest name as the base for standardization\n    const shortestName = columns\n      .map(c => c.name)\n      .reduce((a, b) => a.length <= b.length ? a : b);\n\n    // Clean up the name\n    return shortestName\n      .replace(/[^a-zA-Z0-9\\s]/g, ' ')  // Replace special chars with space\n      .replace(/\\s+/g, ' ')             // Replace multiple spaces with single space\n      .trim();\n  }\n\n  async getUnmappedColumns(): Promise<IColumnInfo[]> {\n    const mappings = await this.getAllMappings();\n    console.log('Current mappings count:', mappings.length);\n    \n    // Create a set of mapped column names by survey source\n    const mappedColumns = new Set<string>();\n    mappings.forEach(mapping => {\n      mapping.sourceColumns.forEach(column => {\n        // Use name + surveySource as the unique identifier\n        const key = `${column.name}-${column.surveySource}`;\n        mappedColumns.add(key);\n        console.log('Mapped column key:', key);\n      });\n    });\n\n    // Prefer backend source of truth so every uploaded survey appears\n    const backend = (await import('./BackendService')).default.getInstance();\n    const surveys = await backend.getAllSurveys();\n    const columns: IColumnInfo[] = [];\n\n    for (const survey of surveys as Array<any>) {\n      const meta = await backend.getSurveyMeta(survey.id).catch(() => ({} as any));\n      const headers: string[] = Array.isArray(meta?.columns) && meta.columns.length > 0\n        ? meta.columns\n        : [];\n      headers.forEach((header: string, index: number) => {\n        const columnName = String(header || '').trim();\n        const surveySource = survey.type || survey.name || 'Unknown';\n        const uniqueKey = `${columnName}-${surveySource}`;\n        \n        if (!mappedColumns.has(uniqueKey)) {\n          columns.push({\n            id: `${surveySource}-${columnName}-${index}`, // Use consistent ID based on source and name\n            name: columnName,\n            surveySource: surveySource,\n            dataType: 'string'\n          });\n        } else {\n          console.log('Column already mapped:', uniqueKey);\n        }\n      });\n    }\n\n    console.log('Total unmapped columns found:', columns.length);\n    return columns;\n  }\n\n  private inferDataType(fileContent: string, columnIndex: number): string {\n    const lines = fileContent.split('\\n').slice(1, 6); // Check first 5 rows\n    const values = lines.map(line => line.split(',')[columnIndex]?.trim());\n    \n    // Check if all values are numbers\n    if (values.every(v => !isNaN(Number(v)))) {\n      return 'number';\n    }\n    // Check if all values match date format\n    if (values.every(v => !isNaN(Date.parse(v)))) {\n      return 'date';\n    }\n    // Default to string\n    return 'string';\n  }\n} ","import React, { useEffect, useState, useMemo } from 'react';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Box,\n  Typography,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Stack,\n} from '@mui/material';\nimport { \n  DocumentTextIcon\n} from '@heroicons/react/24/outline';\n\nimport { SpecialtyMappingService } from '../services/SpecialtyMappingService';\nimport { ColumnMappingService } from '../services/ColumnMappingService';\nimport { IStorageService, LocalStorageService } from '../services/StorageService';\nimport BackendService from '../services/BackendService';\nimport { ISurveyRow } from '../types/survey';\nimport { ISpecialtyMapping, ISourceSpecialty } from '../types/specialty';\nimport LoadingSpinner from './ui/loading-spinner';\nimport { ChevronDownIcon, CheckIcon } from '@heroicons/react/24/outline';\nconst SHOW_DEBUG = true;\n\ninterface AggregatedData {\n  standardizedName: string;\n  surveySource: string;\n  surveySpecialty: string;\n  geographicRegion: string;\n  n_orgs: number;\n  n_incumbents: number;\n  tcc_p25: number;\n  tcc_p50: number;\n  tcc_p75: number;\n  tcc_p90: number;\n  wrvu_p25: number;\n  wrvu_p50: number;\n  wrvu_p75: number;\n  wrvu_p90: number;\n  cf_p25: number;\n  cf_p50: number;\n  cf_p75: number;\n  cf_p90: number;\n}\n\n// Utility functions\nconst calculatePercentile = (numbers: number[], percentile: number): number => {\n  if (numbers.length === 0) return 0;\n  const sortedNumbers = numbers.sort((a, b) => a - b);\n  const index = Math.floor((percentile / 100) * sortedNumbers.length);\n  return sortedNumbers[index] || 0;\n};\n\nconst formatCurrency = (value: number, decimals: number = 0): string => {\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals,\n  }).format(value);\n};\n\nconst formatNumber = (value: number): string => {\n  return new Intl.NumberFormat('en-US', {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(value);\n};\n\n// Add utility function for calculating weighted average\nconst calculateWeightedAverage = (values: number[], weights: number[]): number => {\n  if (values.length === 0 || values.length !== weights.length) return 0;\n  const sum = weights.reduce((acc, weight, index) => acc + weight * values[index], 0);\n  const weightSum = weights.reduce((acc, weight) => acc + weight, 0);\n  return weightSum === 0 ? 0 : sum / weightSum;\n};\n\n// Add utility function for calculating simple average\nconst calculateAverage = (values: number[]): number => {\n  if (values.length === 0) return 0;\n  return values.reduce((acc, val) => acc + val, 0) / values.length;\n};\n\n// Fuzzy matching function for specialty names (word-based, not letter-based)\nconst fuzzyMatchSpecialty = (specialty1: string, specialty2: string): boolean => {\n  const normalize = (str: string) => str.toLowerCase().replace(/[^a-z0-9]+/g, ' ').trim();\n  const norm1 = normalize(specialty1);\n  const norm2 = normalize(specialty2);\n\n  if (!norm1 || !norm2) return false;\n\n  // Exact or simple contains\n  if (norm1 === norm2) return true;\n  if (norm1.includes(norm2) || norm2.includes(norm1)) return true;\n\n  const words1 = norm1.split(/\\s+/).filter(w => w.length > 2);\n  const words2 = norm2.split(/\\s+/).filter(w => w.length > 2);\n  if (words1.length === 0 || words2.length === 0) return false;\n\n  const common = words1.filter(w => words2.includes(w));\n  const jaccard = common.length / new Set([...words1, ...words2]).size;\n\n  return jaccard >= 0.6 || common.length >= Math.min(words1.length, words2.length) * 0.8;\n};\n\n// Data transformation function that applies column mappings and specialty mappings\nconst transformSurveyData = (rawData: any[], columnMappings: any[], specialtyMappings: any[], surveySource: string): any[] => {\n  console.log('🔄 Transforming survey data with mappings:', {\n    rawDataLength: rawData.length,\n    columnMappingsCount: columnMappings.length,\n    specialtyMappingsCount: specialtyMappings.length,\n    surveySource\n  });\n  \n  console.log('🔍 First few raw specialties:', rawData.slice(0, 3).map(row => row.specialty));\n  \n  // Special debugging for SullivanCotter raw data\n  if (surveySource === 'SullivanCotter') {\n    const allergyRows = rawData.filter(row => \n      row.specialty && (row.specialty.toLowerCase().includes('allergy') || row.specialty.toLowerCase().includes('immunology'))\n    );\n    console.log('🔍 Found', allergyRows.length, 'Allergy & Immunology rows in SullivanCotter raw data');\n    if (allergyRows.length > 0) {\n      console.log('📋 Sample Allergy & Immunology rows:', allergyRows.slice(0, 3).map(row => row.specialty));\n    }\n  }\n\n  if (rawData.length === 0) return [];\n\n  // Create column mapping lookup for this survey source\n  const columnMappingLookup = new Map();\n  columnMappings.forEach(mapping => {\n    mapping.sourceColumns.forEach((column: any) => {\n      if (column.surveySource === surveySource) {\n        columnMappingLookup.set(column.name, mapping.standardizedName);\n      }\n    });\n  });\n\n  // Create specialty mapping lookup for this survey source\n  const specialtyMappingLookup = new Map();\n  specialtyMappings.forEach(mapping => {\n    mapping.sourceSpecialties.forEach((specialty: any) => {\n      if (specialty.surveySource === surveySource) {\n        specialtyMappingLookup.set(specialty.specialty.toLowerCase(), mapping.standardizedName);\n      }\n    });\n  });\n\n  console.log('📋 Column mapping lookup for', surveySource, ':', Object.fromEntries(columnMappingLookup));\n  console.log('📋 Specialty mapping lookup for', surveySource, ':', Object.fromEntries(specialtyMappingLookup));\n  \n  // Special debugging for SullivanCotter Allergy & Immunology\n  if (surveySource === 'SullivanCotter') {\n    console.log('🔍 Checking SullivanCotter specialty mappings for Allergy & Immunology...');\n    const allergyMappings = Array.from(specialtyMappingLookup.entries()).filter(([key, value]) => \n      key.includes('allergy') || key.includes('immunology') || value.includes('Allergy') || value.includes('Immunology')\n    );\n    console.log('📋 Allergy & Immunology mappings for SullivanCotter:', allergyMappings);\n  }\n  \n  // Debug: Show all available survey sources in mappings\n  const allSurveySources = new Set();\n  specialtyMappings.forEach(mapping => {\n    mapping.sourceSpecialties.forEach((specialty: any) => {\n      allSurveySources.add(specialty.surveySource);\n    });\n  });\n  console.log('📋 All available survey sources in mappings:', Array.from(allSurveySources));\n  console.log('🔍 Looking for survey source:', surveySource);\n  \n\n\n  return rawData.map(row => {\n    const transformedRow: any = {\n      surveySource,\n      specialty: row.specialty || row.normalizedSpecialty || '',\n      originalSpecialty: row.specialty || '', // Keep the original specialty name\n      // Carry through non-metric identity fields from common column names\n      providerType: (row as any).providerType || (row as any).provider_type || '',\n      geographicRegion: (row as any).geographicRegion || (row as any).geographic_region || '',\n      n_orgs: 0,\n      n_incumbents: 0,\n      tcc_p25: 0,\n      tcc_p50: 0,\n      tcc_p75: 0,\n      tcc_p90: 0,\n      wrvu_p25: 0,\n      wrvu_p50: 0,\n      wrvu_p75: 0,\n      wrvu_p90: 0,\n      cf_p25: 0,\n      cf_p50: 0,\n      cf_p75: 0,\n      cf_p90: 0,\n    };\n\n    // Apply specialty mapping\n    const originalSpecialty = String(row.specialty || '').toLowerCase();\n    let standardizedSpecialty = specialtyMappingLookup.get(originalSpecialty);\n    \n    // Special debugging for Allergy & Immunology\n    if (row.specialty && (row.specialty.toLowerCase().includes('allergy') || row.specialty.toLowerCase().includes('immunology'))) {\n      console.log(`🔍 Processing Allergy/Immunology specialty: \"${row.specialty}\" (normalized: \"${originalSpecialty}\")`);\n      console.log(`📋 Available mappings for ${surveySource}:`, Array.from(specialtyMappingLookup.entries()));\n      console.log(`🔍 Looking for mapping: \"${originalSpecialty}\"`);\n      console.log(`🔍 Found mapping: ${standardizedSpecialty || 'NOT FOUND'}`);\n    }\n    \n    // Debug: Log all specialties being processed\n    if (originalSpecialty && !standardizedSpecialty) {\n      console.log(`🔍 Processing specialty: \"${row.specialty}\" (normalized: \"${originalSpecialty}\")`);\n      console.log(`📋 Available mappings for ${surveySource}:`, Array.from(specialtyMappingLookup.entries()));\n    }\n    \n    // If no direct match, try fuzzy matching\n    if (!standardizedSpecialty) {\n      Array.from(specialtyMappingLookup.entries()).forEach(([key, value]) => {\n        if (fuzzyMatchSpecialty(originalSpecialty, key)) {\n          standardizedSpecialty = value;\n          console.log(`🔄 Fuzzy mapped specialty: \"${row.specialty}\" → \"${standardizedSpecialty}\" (matched \"${key}\")`);\n        }\n      });\n    }\n    \n    if (standardizedSpecialty) {\n      transformedRow.specialty = standardizedSpecialty;\n      transformedRow.originalSpecialty = row.specialty || ''; // Keep original for fallback matching\n      console.log(`✅ Mapped specialty: \"${row.specialty}\" → \"${standardizedSpecialty}\"`);\n    } else {\n      console.log(`❌ No mapping found for specialty: \"${row.specialty}\" (normalized: \"${originalSpecialty}\")`);\n      console.log('📋 Available mappings for this survey source:', Array.from(specialtyMappingLookup.entries()));\n      // Keep the original specialty if no mapping found\n      transformedRow.specialty = row.specialty || '';\n      transformedRow.originalSpecialty = row.specialty || '';\n    }\n\n    // Apply column mappings\n    Object.keys(row).forEach(originalColumn => {\n      const standardizedName = columnMappingLookup.get(originalColumn);\n      if (standardizedName) {\n        // Map the value to the standardized column name\n        const value = row[originalColumn];\n        \n        // Handle different metric types\n        if (standardizedName.toLowerCase().includes('tcc')) {\n          if (standardizedName.toLowerCase().includes('p25')) transformedRow.tcc_p25 = Number(value) || 0;\n          else if (standardizedName.toLowerCase().includes('p50')) transformedRow.tcc_p50 = Number(value) || 0;\n          else if (standardizedName.toLowerCase().includes('p75')) transformedRow.tcc_p75 = Number(value) || 0;\n          else if (standardizedName.toLowerCase().includes('p90')) transformedRow.tcc_p90 = Number(value) || 0;\n        } else if (standardizedName.toLowerCase().includes('wrvu')) {\n          if (standardizedName.toLowerCase().includes('p25')) transformedRow.wrvu_p25 = Number(value) || 0;\n          else if (standardizedName.toLowerCase().includes('p50')) transformedRow.wrvu_p50 = Number(value) || 0;\n          else if (standardizedName.toLowerCase().includes('p75')) transformedRow.wrvu_p75 = Number(value) || 0;\n          else if (standardizedName.toLowerCase().includes('p90')) transformedRow.wrvu_p90 = Number(value) || 0;\n        } else if (standardizedName.toLowerCase().includes('cf')) {\n          if (standardizedName.toLowerCase().includes('p25')) transformedRow.cf_p25 = Number(value) || 0;\n          else if (standardizedName.toLowerCase().includes('p50')) transformedRow.cf_p50 = Number(value) || 0;\n          else if (standardizedName.toLowerCase().includes('p75')) transformedRow.cf_p75 = Number(value) || 0;\n          else if (standardizedName.toLowerCase().includes('p90')) transformedRow.cf_p90 = Number(value) || 0;\n        } else if (standardizedName.toLowerCase().includes('orgs')) {\n          transformedRow.n_orgs = Number(value) || 0;\n        } else if (standardizedName.toLowerCase().includes('incumbents')) {\n          transformedRow.n_incumbents = Number(value) || 0;\n        }\n      }\n    });\n\n    return transformedRow;\n  });\n};\n\nconst SurveyAnalytics: React.FC = () => {\n  // Export functions\n  const exportToExcel = () => {\n    const headers = [\n      'Survey Source',\n      'Survey Specialty', \n      'Geographic Region',\n      '# Organizations',\n      '# Incumbents',\n      'TCC P25',\n      'TCC P50',\n      'TCC P75',\n      'TCC P90',\n      'wRVU P25',\n      'wRVU P50',\n      'wRVU P75',\n      'wRVU P90',\n      'CF P25',\n      'CF P50',\n      'CF P75',\n      'CF P90'\n    ];\n\n    const csvData = filteredData.map(row => [\n      row.surveySource,\n      row.surveySpecialty,\n      row.geographicRegion,\n      row.n_orgs,\n      row.n_incumbents,\n      row.tcc_p25,\n      row.tcc_p50,\n      row.tcc_p75,\n      row.tcc_p90,\n      row.wrvu_p25,\n      row.wrvu_p50,\n      row.wrvu_p75,\n      row.wrvu_p90,\n      row.cf_p25,\n      row.cf_p50,\n      row.cf_p75,\n      row.cf_p90\n    ]);\n\n    // Add headers\n    csvData.unshift(headers);\n\n    // Convert to CSV string\n    const csvContent = csvData\n      .map(row => row.map(cell => `\"${cell}\"`).join(','))\n      .join('\\n');\n\n    // Create and download file\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `survey-analytics-${new Date().toISOString().split('T')[0]}.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const exportToCSV = () => {\n    exportToExcel(); // Same function for now\n  };\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [mappings, setMappings] = useState<ISpecialtyMapping[]>([]);\n  const [surveys, setSurveys] = useState<Record<string, ISurveyRow[]>>({});\n  const [filters, setFilters] = useState({\n    specialty: '',\n    providerType: '',\n    region: '',\n    surveySource: ''\n  });\n\n\n\n  const mappingService = useMemo(() => new SpecialtyMappingService(new LocalStorageService()), []);\n  const columnMappingService = useMemo(() => new ColumnMappingService(new LocalStorageService()), []);\n  const storageService = useMemo(() => new LocalStorageService(), []);\n  const backendService = useMemo(() => BackendService.getInstance(), []);\n\n  // Build chain map: standardizedName -> surveySource -> [source specialties]\n  const chainByStandardized = useMemo(() => {\n    const result = new Map<string, Map<string, string[]>>();\n    mappings.forEach(m => {\n      const bySource = new Map<string, string[]>();\n      m.sourceSpecialties.forEach(src => {\n        const list = bySource.get(src.surveySource) || [];\n        list.push(src.specialty);\n        bySource.set(src.surveySource, list);\n      });\n      result.set(m.standardizedName, bySource);\n    });\n    return result;\n  }, [mappings]);\n\n  // Survey counts by source for quick diagnostics\n  const surveyCountsBySource = useMemo(() => {\n    const counts = new Map<string, number>();\n    Object.values(surveys).forEach(rows => {\n      const source = String(rows[0]?.surveySource || 'unknown');\n      counts.set(source, (counts.get(source) || 0) + 1);\n    });\n    return counts;\n  }, [surveys]);\n\n  // Get unique values for filters\n  const uniqueValues = useMemo(() => {\n    const values = {\n      specialties: new Set<string>(),\n      providerTypes: new Set<string>(),\n      regions: new Set<string>(),\n      surveySources: new Set<string>()\n    };\n\n    // Get all standardized names from actual mappings (not just initial mappings)\n    mappings.forEach(mapping => {\n      if (mapping.standardizedName) {\n        values.specialties.add(mapping.standardizedName);\n        console.log('Added specialty from mapping:', mapping.standardizedName);\n      }\n    });\n\n    // Build cascading sets based on current selections (specialty/survey source)\n    console.log('Extracting unique values from surveys with cascading filters:', filters, Object.keys(surveys));\n\n    // Pre-compute selected mapping and source names per survey for specialty cascade\n    const selectedMapping = mappings.find(m => m.standardizedName === filters.specialty);\n    const sourceNamesBySurvey = new Map<string, string[]>();\n    if (selectedMapping) {\n      selectedMapping.sourceSpecialties.forEach(src => {\n        const list = sourceNamesBySurvey.get(src.surveySource) || [];\n        list.push(src.specialty);\n        sourceNamesBySurvey.set(src.surveySource, list);\n      });\n    }\n\n    Object.entries(surveys).forEach(([surveyId, surveyRows]) => {\n      console.log(`Processing survey ${surveyId} with ${surveyRows.length} rows`);\n      surveyRows.forEach(row => {\n        const surveySource = String(row.surveySource || '');\n        // Respect survey source filter\n        if (filters.surveySource && surveySource.toLowerCase() !== filters.surveySource.toLowerCase()) return;\n\n        // Respect specialty filter using standardized or source names\n        if (filters.specialty) {\n          const rowSpec = String(row.specialty || '');\n          const direct = rowSpec.toLowerCase() === filters.specialty.toLowerCase();\n          const srcList = sourceNamesBySurvey.get(surveySource) || [];\n          const viaSource = srcList.some(name => fuzzyMatchSpecialty(rowSpec, name));\n          if (!direct && !viaSource) return;\n        }\n\n        if (row.providerType) {\n          values.providerTypes.add(String(row.providerType));\n          console.log('Added provider type:', row.providerType);\n        }\n        const region = (row as any).geographicRegion || (row as any).geographic_region;\n        if (region) {\n          values.regions.add(String(region));\n          console.log('Added region:', region);\n        }\n        if (row.surveySource) {\n          values.surveySources.add(String(row.surveySource));\n          console.log('Added survey source:', row.surveySource);\n        }\n      });\n    });\n\n    console.log('Total specialties found:', values.specialties.size);\n    console.log('All specialties:', Array.from(values.specialties));\n    console.log('Total survey sources found:', values.surveySources.size);\n    console.log('All survey sources:', Array.from(values.surveySources));\n    console.log('Total provider types found:', values.providerTypes.size);\n    console.log('All provider types:', Array.from(values.providerTypes));\n    console.log('Total regions found:', values.regions.size);\n    console.log('All regions:', Array.from(values.regions));\n\n    return {\n      specialties: Array.from(values.specialties).sort(),\n      providerTypes: Array.from(values.providerTypes).sort(),\n      regions: Array.from(values.regions).sort(),\n      surveySources: Array.from(values.surveySources).sort()\n    };\n  }, [mappings, surveys]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      try {\n        // Load specialty mappings from the actual service (not just initial mappings)\n        const allMappings = await mappingService.getAllMappings();\n        console.log('Loaded specialty mappings:', allMappings.length, 'mappings found');\n        console.log('Available standardized names:', allMappings.map(m => m.standardizedName));\n        \n\n        \n        setMappings(allMappings);\n\n        // Load column mappings\n        const columnMappings = await columnMappingService.getAllMappings();\n        console.log('Loaded column mappings:', columnMappings.length, 'mappings found');\n\n        // Then get survey data from backend\n        const uploadedSurveys = await backendService.getAllSurveys();\n        console.log('📊 Found surveys:', uploadedSurveys.map(s => ({\n          id: s.id,\n          type: (s as any).type,\n          totalRows: (s as any).rowCount,\n          fileName: (s as any).fileName,\n          uploadDate: (s as any).uploadDate\n        })));\n        \n        if (uploadedSurveys.length === 0) {\n          console.error('❌ No surveys found! This is the problem.');\n          setError('No surveys found. Please upload some survey data first.');\n          return;\n        }\n        \n        const surveyData: Record<string, ISurveyRow[]> = {};\n        \n        for (const survey of uploadedSurveys) {\n          try {\n            const surveyType = (survey as any).type;\n            console.log(`🔍 Loading data for survey ${survey.id} (${surveyType})`);\n            // CRITICAL: Request sufficient rows to get all data, including specialties that appear later in the dataset\n        // See docs/ALLERGY_IMMUNOLOGY_FIX.md for details on why this is necessary\n        const data = await backendService.getSurveyData(survey.id, undefined, { limit: 10000 }); // Request up to 10,000 rows to get all data\n            if (data && data.rows) {\n              // Log the column names from the first row\n              if (data.rows.length > 0) {\n                console.log('📋 Available columns:', Object.keys(data.rows[0]));\n              }\n\n\n\n              // Apply column mappings to transform the data\n              console.log(`🔄 Transforming ${data.rows.length} rows for survey ${survey.id} (${surveyType})`);\n              console.log('📋 Available column mappings:', columnMappings.map(m => ({\n                standardizedName: m.standardizedName,\n                sourceColumns: m.sourceColumns.map(c => `${c.name} (${c.surveySource})`)\n              })));\n              \n\n              \n              console.log(`🔄 About to transform ${data.rows.length} rows for survey ${survey.id} (${surveyType})`);\n              const transformedRows = transformSurveyData(data.rows, columnMappings, allMappings, surveyType);\n              console.log(`✅ Transformed ${transformedRows.length} rows for survey ${survey.id}`);\n              \n              // Special debugging for SullivanCotter transformed data\n              if (surveyType === 'SullivanCotter') {\n                const allergyTransformedRows = transformedRows.filter(row => \n                  row.specialty && (row.specialty.toLowerCase().includes('allergy') || row.specialty.toLowerCase().includes('immunology'))\n                );\n                console.log('🔍 Found', allergyTransformedRows.length, 'Allergy & Immunology rows in SullivanCotter transformed data');\n                if (allergyTransformedRows.length > 0) {\n                  console.log('📋 Sample transformed Allergy & Immunology rows:', allergyTransformedRows.slice(0, 3).map(row => row.specialty));\n                }\n              }\n              \n              // Check if any specialties were actually transformed\n              const originalSpecialties = data.rows.slice(0, 5).map(row => row.specialty);\n              const transformedSpecialties = transformedRows.slice(0, 5).map(row => row.specialty);\n              console.log(`📋 Original specialties (first 5):`, originalSpecialties);\n              console.log(`📋 Transformed specialties (first 5):`, transformedSpecialties);\n              \n\n              \n              // Log some sample specialties from the raw data\n              if (data.rows.length > 0) {\n                const sampleSpecialties = data.rows.slice(0, 5).map(row => row.specialty);\n                console.log(`📋 Sample specialties from ${surveyType}:`, sampleSpecialties);\n              }\n              \n              if (transformedRows.length > 0) {\n                console.log('Sample transformed row:', {\n                  surveySource: transformedRows[0].surveySource,\n                  specialty: transformedRows[0].specialty,\n                  tcc_p50: transformedRows[0].tcc_p50,\n                  wrvu_p50: transformedRows[0].wrvu_p50,\n                  cf_p50: transformedRows[0].cf_p50\n                });\n              }\n              \n              surveyData[survey.id] = transformedRows.map(row => {\n                // Ensure all required fields are present and properly typed\n                const processedRow = {\n                  ...row,\n                  surveySource: surveyType,\n                  specialty: row.specialty || row.normalizedSpecialty || '',\n                  originalSpecialty: row.originalSpecialty || row.specialty || row.normalizedSpecialty || '',\n                  // Normalize provider type and region fields from possible snake_case inputs\n                  providerType: (row as any).providerType || (row as any).provider_type || '',\n                  geographicRegion: (row as any).geographicRegion || (row as any).geographic_region || '',\n                  n_orgs: Number(row.n_orgs) || 0,\n                  n_incumbents: Number(row.n_incumbents) || 0,\n                  tcc_p25: Number(row.tcc_p25) || 0,\n                  tcc_p50: Number(row.tcc_p50) || 0,\n                  tcc_p75: Number(row.tcc_p75) || 0,\n                  tcc_p90: Number(row.tcc_p90) || 0,\n                  wrvu_p25: Number(row.wrvu_p25) || 0,\n                  wrvu_p50: Number(row.wrvu_p50) || 0,\n                  wrvu_p75: Number(row.wrvu_p75) || 0,\n                  wrvu_p90: Number(row.wrvu_p90) || 0,\n                  cf_p25: Number(row.cf_p25) || 0,\n                  cf_p50: Number(row.cf_p50) || 0,\n                  cf_p75: Number(row.cf_p75) || 0,\n                  cf_p90: Number(row.cf_p90) || 0,\n                };\n\n                // Log the first row of each survey to verify data\n                if (transformedRows.indexOf(row) === 0) {\n                  console.log('Sample transformed row:', {\n                    surveySource: processedRow.surveySource,\n                    specialty: processedRow.specialty,\n                    providerType: processedRow.providerType,\n                    metrics: {\n                      tcc: { p25: processedRow.tcc_p25, p50: processedRow.tcc_p50, p75: processedRow.tcc_p75, p90: processedRow.tcc_p90 },\n                      wrvu: { p25: processedRow.wrvu_p25, p50: processedRow.wrvu_p50, p75: processedRow.wrvu_p75, p90: processedRow.wrvu_p90 },\n                      cf: { p25: processedRow.cf_p25, p50: processedRow.cf_p50, p75: processedRow.cf_p75, p90: processedRow.cf_p90 }\n                    }\n                  });\n                }\n\n                return processedRow;\n              });\n            }\n          } catch (error) {\n            console.error(`Error processing survey ${survey.id}:`, error);\n          }\n        }\n\n        console.log('Total surveys loaded:', Object.keys(surveyData).length);\n        console.log('Survey data keys:', Object.keys(surveyData));\n        \n        // Collect all specialties from all surveys to see what's available\n        const allSpecialties: string[] = [];\n        Object.entries(surveyData).forEach(([id, rows]) => {\n          const surveySpecialties = Array.from(new Set(rows.map(r => String(r.specialty || '')).filter(Boolean)));\n          allSpecialties.push(...surveySpecialties);\n          \n          console.log(`Survey ${id}:`, {\n            rowCount: rows.length,\n            surveySource: rows[0]?.surveySource,\n            specialties: surveySpecialties,\n            hasData: rows.some(r => r.tcc_p50 > 0 || r.wrvu_p50 > 0),\n            sampleRow: rows[0]\n          });\n        });\n        \n        // Check for Allergy & Immunology specifically\n        const uniqueSpecialties = Array.from(new Set(allSpecialties));\n        console.log('📋 All unique specialties across all surveys:', uniqueSpecialties);\n        \n        const allergySpecialties = uniqueSpecialties.filter(s => \n          String(s).toLowerCase().includes('allergy') || String(s).toLowerCase().includes('immunology')\n        );\n        console.log('🎯 Allergy & Immunology related specialties found:', allergySpecialties);\n        \n        // Check if any survey has Allergy & Immunology rows\n        Object.entries(surveyData).forEach(([id, rows]) => {\n          const allergyRows = rows.filter(row => \n            row.specialty && \n            (String(row.specialty).toLowerCase().includes('allergy') || \n             String(row.specialty).toLowerCase().includes('immunology'))\n          );\n          if (allergyRows.length > 0) {\n            console.log(`✅ Survey ${id} has ${allergyRows.length} Allergy & Immunology rows:`, \n              allergyRows.slice(0, 3).map(row => ({\n                specialty: row.specialty,\n                originalSpecialty: row.originalSpecialty,\n                surveySource: row.surveySource\n              }))\n            );\n          }\n        });\n\n        setSurveys(surveyData);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError('Failed to load data');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [mappingService, storageService]);\n\n  const aggregatedData = useMemo(() => {\n    if (!filters.specialty) return [];\n\n    // Find the selected mapping\n    const selectedMapping = mappings.find(\n      m => m.standardizedName === filters.specialty\n    );\n    if (!selectedMapping) {\n      console.log('❌ No mapping found for specialty:', filters.specialty);\n      console.log('📋 Available mappings:', mappings.map(m => m.standardizedName));\n      return [];\n    }\n\n    console.log('✅ Selected mapping:', selectedMapping);\n    console.log('📊 Available surveys:', Object.keys(surveys));\n    \n    // Collect ALL matching rows from ALL surveys for this standardized specialty\n    const allMatchingRows: ISurveyRow[] = [];\n    \n    // Look through ALL surveys for data matching the selected standardized specialty\n    Object.entries(surveys).forEach(([surveyId, surveyRows]) => {\n      if (!surveyRows || !surveyRows.length) {\n        console.log(`❌ No data found for survey ${surveyId}`);\n        return;\n      }\n\n      const surveySource = surveyRows[0]?.surveySource;\n      console.log(`🔍 Checking survey ${surveyId} (${surveySource}) for specialty \"${filters.specialty}\"`);\n      \n      \n      \n      // Show what source specialties this mapping expects for this survey source\n      const expectedSourceSpecialties = selectedMapping.sourceSpecialties\n        .filter(src => src.surveySource === surveySource)\n        .map(src => src.specialty);\n      console.log(`🎯 Expected source specialties for ${surveySource}:`, expectedSourceSpecialties);\n      \n      // Filter rows that match the selected standardized specialty\n      const filtered = surveyRows.filter(row => {\n        if (!row) return false;\n        \n        // Use the transformed specialty name (which should already be standardized)\n        const rowSpecialty = String(row.specialty || '').trim();\n        const selectedSpecialty = selectedMapping.standardizedName.trim();\n        \n        // Check if the row specialty matches the selected standardized specialty\n        const specialtyMatch = rowSpecialty.toLowerCase() === selectedSpecialty.toLowerCase();\n        \n        // If no direct match, check if this row's original specialty maps to the selected specialty\n        if (!specialtyMatch && row.originalSpecialty) {\n          const originalSpecialty = String(row.originalSpecialty).toLowerCase();\n          const mappingForThisSource = selectedMapping.sourceSpecialties.find(\n            src => src.surveySource === surveySource && src.specialty.toLowerCase() === originalSpecialty\n          );\n          if (mappingForThisSource) {\n            console.log(`✅ Found mapping match: \"${row.originalSpecialty}\" → \"${selectedSpecialty}\"`);\n            return true;\n          }\n        }\n        \n        // Apply other filters\n        const providerTypeMatch = !filters.providerType || \n          String((row as any).providerType || (row as any).provider_type || '').toLowerCase().trim() === filters.providerType.toLowerCase().trim();\n        const regionMatch = !filters.region || \n          String((row as any).geographicRegion || (row as any).geographic_region || '').toLowerCase().trim() === filters.region.toLowerCase().trim();\n        const surveySourceMatch = !filters.surveySource || \n          String(row.surveySource || '').toLowerCase().trim() === filters.surveySource.toLowerCase().trim();\n        \n        const matches = specialtyMatch && providerTypeMatch && regionMatch && surveySourceMatch;\n        \n        if (specialtyMatch) {\n          console.log(`✅ Found matching row: \"${rowSpecialty}\" matches \"${selectedSpecialty}\"`);\n        } else {\n          console.log(`❌ No direct match: \"${rowSpecialty}\" != \"${selectedSpecialty}\"`);\n          // Debug: Show what the row actually contains\n          console.log(`🔍 Row details:`, {\n            surveySource: row.surveySource,\n            specialty: row.specialty,\n            originalSpecialty: (row as any).originalSpecialty,\n            providerType: row.providerType,\n            geographicRegion: row.geographicRegion\n          });\n        }\n        \n        return matches;\n      });\n\n      if (filtered.length > 0) {\n        console.log(`✅ Found ${filtered.length} matching rows in survey ${surveyId} (${surveySource}) for specialty \"${filters.specialty}\"`);\n        allMatchingRows.push(...filtered);\n      } else {\n        console.log(`❌ No matching rows found in survey ${surveyId} (${surveySource}) for specialty \"${filters.specialty}\"`);\n      }\n    });\n\n    console.log(`📊 Total matching rows found across all surveys: ${allMatchingRows.length}`);\n\n    if (allMatchingRows.length === 0) {\n      console.log('❌ No matching rows found for any survey');\n      console.log('📋 Available specialties in mappings:', mappings.map(m => m.standardizedName));\n      console.log('🎯 Selected specialty:', filters.specialty);\n      return [];\n    }\n\n    // Group rows by survey source, provider type, and region\n    const groupedRows = new Map<string, ISurveyRow[]>();\n    allMatchingRows.forEach(row => {\n      const key = `${row.surveySource || ''}-${row.providerType || ''}-${row.geographicRegion || ''}`;\n      if (!groupedRows.has(key)) {\n        groupedRows.set(key, []);\n      }\n      groupedRows.get(key)?.push(row);\n    });\n\n    console.log(`Grouped into ${groupedRows.size} unique combinations`);\n\n    // Create aggregated rows for each group\n    const rows: AggregatedData[] = [];\n    groupedRows.forEach((groupRows, key) => {\n      // Use the first row as base for metadata\n      const row = groupRows[0];\n      \n      // Calculate metrics including averages\n      const metrics = {\n        n_orgs: groupRows.reduce((sum, r) => sum + (Number(r.n_orgs) || 0), 0),\n        n_incumbents: groupRows.reduce((sum, r) => sum + (Number(r.n_incumbents) || 0), 0),\n        // Simple averages\n        tcc_avg: calculateAverage([\n              ...groupRows.map(r => Number(r.tcc_p25) || 0),\n              ...groupRows.map(r => Number(r.tcc_p50) || 0),\n              ...groupRows.map(r => Number(r.tcc_p75) || 0),\n              ...groupRows.map(r => Number(r.tcc_p90) || 0)\n            ].filter(Boolean)),\n            wrvu_avg: calculateAverage([\n              ...groupRows.map(r => Number(r.wrvu_p25) || 0),\n              ...groupRows.map(r => Number(r.wrvu_p50) || 0),\n              ...groupRows.map(r => Number(r.wrvu_p75) || 0),\n              ...groupRows.map(r => Number(r.wrvu_p90) || 0)\n            ].filter(Boolean)),\n            cf_avg: calculateAverage([\n              ...groupRows.map(r => Number(r.cf_p25) || 0),\n              ...groupRows.map(r => Number(r.cf_p50) || 0),\n              ...groupRows.map(r => Number(r.cf_p75) || 0),\n              ...groupRows.map(r => Number(r.cf_p90) || 0)\n            ].filter(Boolean)),\n            // Weighted averages\n            tcc_weighted_avg: calculateWeightedAverage(\n              groupRows.map(r => (Number(r.tcc_p50) || 0)),\n              groupRows.map(r => (Number(r.n_incumbents) || 0))\n            ),\n            wrvu_weighted_avg: calculateWeightedAverage(\n              groupRows.map(r => (Number(r.wrvu_p50) || 0)),\n              groupRows.map(r => (Number(r.n_incumbents) || 0))\n            ),\n            cf_weighted_avg: calculateWeightedAverage(\n              groupRows.map(r => (Number(r.cf_p50) || 0)),\n              groupRows.map(r => (Number(r.n_incumbents) || 0))\n            ),\n            // Percentiles\n            tcc_p25: calculatePercentile(groupRows.map(r => Number(r.tcc_p25) || 0).filter(Boolean), 25),\n            tcc_p50: calculatePercentile(groupRows.map(r => Number(r.tcc_p50) || 0).filter(Boolean), 50),\n            tcc_p75: calculatePercentile(groupRows.map(r => Number(r.tcc_p75) || 0).filter(Boolean), 75),\n            tcc_p90: calculatePercentile(groupRows.map(r => Number(r.tcc_p90) || 0).filter(Boolean), 90),\n            wrvu_p25: calculatePercentile(groupRows.map(r => Number(r.wrvu_p25) || 0).filter(Boolean), 25),\n            wrvu_p50: calculatePercentile(groupRows.map(r => Number(r.wrvu_p50) || 0).filter(Boolean), 50),\n            wrvu_p75: calculatePercentile(groupRows.map(r => Number(r.wrvu_p75) || 0).filter(Boolean), 75),\n            wrvu_p90: calculatePercentile(groupRows.map(r => Number(r.wrvu_p90) || 0).filter(Boolean), 90),\n            cf_p25: calculatePercentile(groupRows.map(r => Number(r.cf_p25) || 0).filter(Boolean), 25),\n            cf_p50: calculatePercentile(groupRows.map(r => Number(r.cf_p50) || 0).filter(Boolean), 50),\n            cf_p75: calculatePercentile(groupRows.map(r => Number(r.cf_p75) || 0).filter(Boolean), 75),\n            cf_p90: calculatePercentile(groupRows.map(r => Number(r.cf_p90) || 0).filter(Boolean), 90),\n          };\n\n          rows.push({\n            standardizedName: selectedMapping.standardizedName,\n            surveySource: String(row.surveySource || ''),\n            surveySpecialty: String(row.specialty || ''),\n            geographicRegion: String(row.geographicRegion || ''),\n            n_orgs: metrics.n_orgs,\n            n_incumbents: metrics.n_incumbents,\n            tcc_p25: metrics.tcc_p25,\n            tcc_p50: metrics.tcc_p50,\n            tcc_p75: metrics.tcc_p75,\n            tcc_p90: metrics.tcc_p90,\n            wrvu_p25: metrics.wrvu_p25,\n            wrvu_p50: metrics.wrvu_p50,\n            wrvu_p75: metrics.wrvu_p75,\n            wrvu_p90: metrics.wrvu_p90,\n            cf_p25: metrics.cf_p25,\n            cf_p50: metrics.cf_p50,\n            cf_p75: metrics.cf_p75,\n            cf_p90: metrics.cf_p90\n          });\n        });\n\n    console.log('Generated rows:', rows);\n    return rows;\n  }, [filters, mappings, surveys]);\n\n  // Filter the data\n  const filteredData = useMemo(() => {\n    console.log('Filtering data with:', filters);\n    console.log('Available aggregated data:', aggregatedData);\n    \n    return aggregatedData.filter(row => {\n      const matchesSpecialty = !filters.specialty || row.standardizedName.toLowerCase().includes(filters.specialty.toLowerCase());\n      const matchesSurveySource = !filters.surveySource || row.surveySource.toLowerCase().includes(filters.surveySource.toLowerCase());\n      const matchesProviderType = !filters.providerType || (\n        Object.values(surveys).some(surveyRows =>\n          surveyRows.some(s =>\n            s.specialty === row.surveySpecialty &&\n            s.surveySource === row.surveySource &&\n            s.providerType?.toLowerCase().includes(filters.providerType.toLowerCase())\n          )\n        )\n      );\n      const matchesRegion = !filters.region || (\n        Object.values(surveys).some(surveyRows =>\n          surveyRows.some(s =>\n            s.specialty === row.surveySpecialty &&\n            s.surveySource === row.surveySource &&\n            s.geographicRegion?.toLowerCase().includes(filters.region.toLowerCase())\n          )\n        )\n      );\n\n      return matchesSpecialty && matchesSurveySource && matchesProviderType && matchesRegion;\n    });\n  }, [aggregatedData, filters, surveys]);\n\n  const handleFilterChange = (filterName: string, value: string) => {\n    setFilters(prev => {\n      const newFilters = { ...prev, [filterName]: value };\n      \n      // Cascading logic: when specialty changes, reset other filters\n      if (filterName === 'specialty') {\n        newFilters.providerType = '';\n        newFilters.region = '';\n        newFilters.surveySource = '';\n      }\n      \n      // When survey source changes, reset provider type and region\n      if (filterName === 'surveySource') {\n        newFilters.providerType = '';\n        newFilters.region = '';\n      }\n      \n      // When provider type changes, reset region\n      if (filterName === 'providerType') {\n        newFilters.region = '';\n      }\n      \n      console.log('Filter changed:', filterName, 'to', value, 'New filters:', newFilters);\n      return newFilters;\n    });\n  };\n\n\n\n  // Add function to group data by standardized specialty\n  const groupBySpecialty = (data: AggregatedData[]): Record<string, AggregatedData[]> => {\n    return data.reduce((acc, row) => {\n      if (!acc[row.standardizedName]) {\n        acc[row.standardizedName] = [];\n      }\n      acc[row.standardizedName].push(row);\n      return acc;\n    }, {} as Record<string, AggregatedData[]>);\n  };\n\n  // Add function to calculate summary rows\n  const calculateSummaryRows = (rows: AggregatedData[]): { simple: AggregatedData, weighted: AggregatedData } => {\n    const totalIncumbents = rows.reduce((sum, row) => sum + row.n_incumbents, 0);\n    \n    const simple: AggregatedData = {\n      standardizedName: 'Simple Avg',\n      surveySource: '',\n      surveySpecialty: '',\n      geographicRegion: '',\n      n_orgs: 0,\n      n_incumbents: 0,\n      tcc_p25: calculateAverage(rows.map(r => r.tcc_p25)),\n      tcc_p50: calculateAverage(rows.map(r => r.tcc_p50)),\n      tcc_p75: calculateAverage(rows.map(r => r.tcc_p75)),\n      tcc_p90: calculateAverage(rows.map(r => r.tcc_p90)),\n      wrvu_p25: calculateAverage(rows.map(r => r.wrvu_p25)),\n      wrvu_p50: calculateAverage(rows.map(r => r.wrvu_p50)),\n      wrvu_p75: calculateAverage(rows.map(r => r.wrvu_p75)),\n      wrvu_p90: calculateAverage(rows.map(r => r.wrvu_p90)),\n      cf_p25: calculateAverage(rows.map(r => r.cf_p25)),\n      cf_p50: calculateAverage(rows.map(r => r.cf_p50)),\n      cf_p75: calculateAverage(rows.map(r => r.cf_p75)),\n      cf_p90: calculateAverage(rows.map(r => r.cf_p90))\n    };\n\n    const weighted: AggregatedData = {\n      standardizedName: 'Weighted Avg',\n      surveySource: '',\n      surveySpecialty: '',\n      geographicRegion: '',\n      n_orgs: 0,\n      n_incumbents: totalIncumbents,\n      tcc_p25: calculateWeightedAverage(rows.map(r => r.tcc_p25), rows.map(r => r.n_incumbents)),\n      tcc_p50: calculateWeightedAverage(rows.map(r => r.tcc_p50), rows.map(r => r.n_incumbents)),\n      tcc_p75: calculateWeightedAverage(rows.map(r => r.tcc_p75), rows.map(r => r.n_incumbents)),\n      tcc_p90: calculateWeightedAverage(rows.map(r => r.tcc_p90), rows.map(r => r.n_incumbents)),\n      wrvu_p25: calculateWeightedAverage(rows.map(r => r.wrvu_p25), rows.map(r => r.n_incumbents)),\n      wrvu_p50: calculateWeightedAverage(rows.map(r => r.wrvu_p50), rows.map(r => r.n_incumbents)),\n      wrvu_p75: calculateWeightedAverage(rows.map(r => r.wrvu_p75), rows.map(r => r.n_incumbents)),\n      wrvu_p90: calculateWeightedAverage(rows.map(r => r.wrvu_p90), rows.map(r => r.n_incumbents)),\n      cf_p25: calculateWeightedAverage(rows.map(r => r.cf_p25), rows.map(r => r.n_incumbents)),\n      cf_p50: calculateWeightedAverage(rows.map(r => r.cf_p50), rows.map(r => r.n_incumbents)),\n      cf_p75: calculateWeightedAverage(rows.map(r => r.cf_p75), rows.map(r => r.n_incumbents)),\n      cf_p90: calculateWeightedAverage(rows.map(r => r.cf_p90), rows.map(r => r.n_incumbents))\n    };\n\n    return { simple, weighted };\n  };\n\n  if (isLoading) {\n    return (\n      <LoadingSpinner \n        message=\"Loading survey analytics...\" \n        fullScreen={true}\n        size=\"lg\"\n      />\n    );\n  }\n\n  if (error) {\n    return (\n      <Box p={3}>\n        <Typography color=\"error\">{error}</Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Filters Card */}\n              <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-8 mt-4\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h3 className=\"text-xl font-semibold text-gray-900\">Data Filters</h3>\n            <p className=\"text-sm text-gray-600 mt-1\">Refine your survey analytics view</p>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            {/* Download Button */}\n            <button\n              onClick={exportToCSV}\n              disabled={filteredData.length === 0}\n              className=\"inline-flex items-center px-6 py-3 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-300 disabled:text-gray-500 text-white text-sm font-medium rounded-lg transition-all duration-200\"\n            >\n              <DocumentTextIcon className=\"h-4 w-4 mr-2\" />\n              Download to Excel\n            </button>\n          </div>\n        </div>\n\n        {/* Filter Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4\">\n          {/* Specialty Filter */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Specialty\n            </label>\n            <FormControl fullWidth size=\"small\">\n              <Select\n                value={filters.specialty}\n                onChange={(e: React.ChangeEvent<{ value: unknown }>) => handleFilterChange('specialty', e.target.value as string)}\n                sx={{\n                  backgroundColor: 'white',\n                  border: '1px solid #d1d5db',\n                  borderRadius: '8px',\n                  '& .MuiOutlinedInput-root': {\n                    fontSize: '0.875rem',\n                    borderRadius: '8px',\n                  },\n                  '&:hover': {\n                    borderColor: '#9ca3af',\n                  },\n                  '&.Mui-focused': {\n                    borderColor: '#3b82f6',\n                  }\n                }}\n                displayEmpty\n              >\n                <MenuItem value=\"\">All Specialties</MenuItem>\n                {uniqueValues.specialties.map((specialty) => (\n                  <MenuItem key={specialty} value={specialty}>\n                    {specialty}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </div>\n\n          {/* Survey Source Filter */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Survey Source\n            </label>\n            <FormControl fullWidth size=\"small\">\n              <Select\n                value={filters.surveySource}\n                onChange={(e: React.ChangeEvent<{ value: unknown }>) => handleFilterChange('surveySource', e.target.value as string)}\n                sx={{\n                  backgroundColor: 'white',\n                  border: '1px solid #d1d5db',\n                  borderRadius: '8px',\n                  '& .MuiOutlinedInput-root': {\n                    fontSize: '0.875rem',\n                    borderRadius: '8px',\n                  },\n                  '&:hover': {\n                    borderColor: '#9ca3af',\n                  },\n                  '&.Mui-focused': {\n                    borderColor: '#3b82f6',\n                  }\n                }}\n                displayEmpty\n              >\n                <MenuItem value=\"\">All Sources</MenuItem>\n                {uniqueValues.surveySources.map((source) => (\n                  <MenuItem key={source} value={source}>\n                    {source}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </div>\n\n          {/* Provider Type Filter */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Provider Type\n            </label>\n            <FormControl fullWidth size=\"small\">\n              <Select\n                value={filters.providerType}\n                onChange={(e: React.ChangeEvent<{ value: unknown }>) => handleFilterChange('providerType', e.target.value as string)}\n                sx={{\n                  backgroundColor: 'white',\n                  border: '1px solid #d1d5db',\n                  borderRadius: '8px',\n                  '& .MuiOutlinedInput-root': {\n                    fontSize: '0.875rem',\n                    borderRadius: '8px',\n                  },\n                  '&:hover': {\n                    borderColor: '#9ca3af',\n                  },\n                  '&.Mui-focused': {\n                    borderColor: '#3b82f6',\n                  }\n                }}\n                displayEmpty\n              >\n                <MenuItem value=\"\">All Types</MenuItem>\n                {uniqueValues.providerTypes.map((type) => (\n                  <MenuItem key={type} value={type}>\n                    {type}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </div>\n\n          {/* Region Filter */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Region\n            </label>\n            <FormControl fullWidth size=\"small\">\n              <Select\n                value={filters.region}\n                onChange={(e: React.ChangeEvent<{ value: unknown }>) => handleFilterChange('region', e.target.value as string)}\n                sx={{\n                  backgroundColor: 'white',\n                  border: '1px solid #d1d5db',\n                  borderRadius: '8px',\n                  '& .MuiOutlinedInput-root': {\n                    fontSize: '0.875rem',\n                    borderRadius: '8px',\n                  },\n                  '&:hover': {\n                    borderColor: '#9ca3af',\n                  },\n                  '&.Mui-focused': {\n                    borderColor: '#3b82f6',\n                  }\n                }}\n                displayEmpty\n              >\n                <MenuItem value=\"\">All Regions</MenuItem>\n                {uniqueValues.regions.map((region) => (\n                  <MenuItem key={region} value={region}>\n                    {region}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </div>\n        </div>\n\n        {/* Clear Filters Button */}\n        {(filters.specialty || filters.providerType || filters.region || filters.surveySource) && (\n          <div className=\"flex justify-end\">\n            <button\n              onClick={() => {\n                setFilters({ specialty: '', providerType: '', region: '', surveySource: '' });\n              }}\n              className=\"inline-flex items-center px-3 py-2 text-sm font-medium text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-lg transition-all duration-200\"\n              title=\"Clear all filters\"\n            >\n              <div className=\"relative w-4 h-4 mr-2\">\n                <svg className=\"w-4 h-4 text-gray-500\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path d=\"M3 3a1 1 0 011-1h12a1 1 0 011 1v3a1 1 0 01-.293.707L12 11.414V15a1 1 0 01-.293.707l-2 2A1 1 0 018 17v-5.586L3.293 6.707A1 1 0 013 6V3z\" />\n                </svg>\n                <svg className=\"absolute -top-1 -right-1 w-3 h-3 text-red-500 bg-white rounded-full\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n                </svg>\n              </div>\n              Clear Filters\n            </button>\n          </div>\n        )}\n      </div>\n\n      {/* Data Table Card */}\n              <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-xl font-semibold text-gray-900\">Survey Analytics Data</h3>\n        </div>\n\n        {filteredData.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <div className=\"w-16 h-16 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center\">\n              <svg className=\"w-8 h-8 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n              </svg>\n            </div>\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No data available</h3>\n            <p className=\"text-gray-500\">Try adjusting your filters to see results</p>\n          </div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <TableContainer \n              component={Paper} \n              sx={{ \n                overflowX: 'auto', \n                overflowY: 'hidden',\n                border: '1px solid #e5e7eb', \n                borderRadius: '12px',\n                '& .MuiTable-root': {\n                  minWidth: '100%'\n                },\n                '&::-webkit-scrollbar': {\n                  height: '8px'\n                },\n                '&::-webkit-scrollbar-track': {\n                  background: '#f1f1f1',\n                  borderRadius: '4px'\n                },\n                '&::-webkit-scrollbar-thumb': {\n                  background: '#cbd5e1',\n                  borderRadius: '4px',\n                  '&:hover': {\n                    background: '#94a3b8'\n                  }\n                }\n              }}\n            >\n              <Table size=\"small\" sx={{ width: '100%' }}>\n                <TableHead>\n                  <TableRow>\n                    <TableCell colSpan={5} sx={{ backgroundColor: '#f8fafc', fontWeight: 'bold', borderBottom: '2px solid #e2e8f0' }}>\n                      Survey Information\n                    </TableCell>\n                    <TableCell colSpan={4} align=\"center\" sx={{ backgroundColor: '#dbeafe', fontWeight: 'bold', borderLeft: '2px solid #e2e8f0', borderBottom: '2px solid #e2e8f0' }}>\n                      Total Cash Compensation (TCC)\n                    </TableCell>\n                    <TableCell colSpan={4} align=\"center\" sx={{ backgroundColor: '#dcfce7', fontWeight: 'bold', borderLeft: '2px solid #e2e8f0', borderBottom: '2px solid #e2e8f0' }}>\n                      Work RVUs (wRVU)\n                    </TableCell>\n                    <TableCell colSpan={4} align=\"center\" sx={{ backgroundColor: '#fef3c7', fontWeight: 'bold', borderLeft: '2px solid #e2e8f0', borderBottom: '2px solid #e2e8f0' }}>\n                      Conversion Factor (CF)\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                    {/* Survey Info Headers */}\n                    <TableCell sx={{ backgroundColor: '#f8fafc', fontWeight: 'bold', fontSize: '0.875rem' }}>Survey Source</TableCell>\n                    <TableCell sx={{ backgroundColor: '#f8fafc', fontWeight: 'bold', fontSize: '0.875rem' }}>Survey Specialty</TableCell>\n                    <TableCell sx={{ backgroundColor: '#f8fafc', fontWeight: 'bold', fontSize: '0.875rem' }}>Region</TableCell>\n                    <TableCell sx={{ backgroundColor: '#f8fafc', fontWeight: 'bold', fontSize: '0.875rem', textAlign: 'right' }}># Orgs</TableCell>\n                    <TableCell sx={{ backgroundColor: '#f8fafc', fontWeight: 'bold', fontSize: '0.875rem', textAlign: 'right' }}># Incumbents</TableCell>\n                    \n                    {/* TCC Headers */}\n                    <TableCell sx={{ backgroundColor: '#dbeafe', borderLeft: '2px solid #e2e8f0', textAlign: 'right', fontSize: '0.875rem' }}>P25</TableCell>\n                    <TableCell sx={{ backgroundColor: '#dbeafe', textAlign: 'right', fontSize: '0.875rem' }}>P50</TableCell>\n                    <TableCell sx={{ backgroundColor: '#dbeafe', textAlign: 'right', fontSize: '0.875rem' }}>P75</TableCell>\n                    <TableCell sx={{ backgroundColor: '#dbeafe', textAlign: 'right', fontSize: '0.875rem' }}>P90</TableCell>\n                    \n                    {/* wRVU Headers */}\n                    <TableCell sx={{ backgroundColor: '#dcfce7', borderLeft: '2px solid #e2e8f0', textAlign: 'right', fontSize: '0.875rem' }}>P25</TableCell>\n                    <TableCell sx={{ backgroundColor: '#dcfce7', textAlign: 'right', fontSize: '0.875rem' }}>P50</TableCell>\n                    <TableCell sx={{ backgroundColor: '#dcfce7', textAlign: 'right', fontSize: '0.875rem' }}>P75</TableCell>\n                    <TableCell sx={{ backgroundColor: '#dcfce7', textAlign: 'right', fontSize: '0.875rem' }}>P90</TableCell>\n                    \n                    {/* CF Headers */}\n                    <TableCell sx={{ backgroundColor: '#fef3c7', borderLeft: '2px solid #e2e8f0', textAlign: 'right', fontSize: '0.875rem' }}>P25</TableCell>\n                    <TableCell sx={{ backgroundColor: '#fef3c7', textAlign: 'right', fontSize: '0.875rem' }}>P50</TableCell>\n                    <TableCell sx={{ backgroundColor: '#fef3c7', textAlign: 'right', fontSize: '0.875rem' }}>P75</TableCell>\n                    <TableCell sx={{ backgroundColor: '#fef3c7', textAlign: 'right', fontSize: '0.875rem' }}>P90</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {Object.entries(groupBySpecialty(filteredData)).map(([specialty, rows]) => (\n                    <React.Fragment key={specialty}>\n                      {rows.map((row, idx) => (\n                        <TableRow \n                          key={`${specialty}-${idx}`}\n                          sx={{ \n                            '&:nth-of-type(odd)': { backgroundColor: '#f8fafc' },\n                            '&:hover': { backgroundColor: '#f1f5f9' },\n                            transition: 'background-color 0.2s'\n                          }}\n                        >\n                          <TableCell sx={{ fontSize: '0.875rem' }}>{row.surveySource}</TableCell>\n                          <TableCell sx={{ fontSize: '0.875rem' }}>{row.surveySpecialty}</TableCell>\n                          <TableCell sx={{ fontSize: '0.875rem' }}>{row.geographicRegion || 'N/A'}</TableCell>\n                          <TableCell align=\"right\" sx={{ fontSize: '0.875rem' }}>{row.n_orgs.toLocaleString()}</TableCell>\n                          <TableCell align=\"right\" sx={{ fontSize: '0.875rem' }}>{row.n_incumbents.toLocaleString()}</TableCell>\n                          \n                          {/* TCC Values */}\n                          <TableCell sx={{ borderLeft: '2px solid #e2e8f0' }} align=\"right\">{formatCurrency(row.tcc_p25)}</TableCell>\n                          <TableCell align=\"right\">{formatCurrency(row.tcc_p50)}</TableCell>\n                          <TableCell align=\"right\">{formatCurrency(row.tcc_p75)}</TableCell>\n                          <TableCell align=\"right\">{formatCurrency(row.tcc_p90)}</TableCell>\n                          \n                          {/* wRVU Values */}\n                          <TableCell sx={{ borderLeft: '2px solid #e2e8f0' }} align=\"right\">{formatNumber(row.wrvu_p25)}</TableCell>\n                          <TableCell align=\"right\">{formatNumber(row.wrvu_p50)}</TableCell>\n                          <TableCell align=\"right\">{formatNumber(row.wrvu_p75)}</TableCell>\n                          <TableCell align=\"right\">{formatNumber(row.wrvu_p90)}</TableCell>\n                          \n                          {/* CF Values */}\n                          <TableCell sx={{ borderLeft: '2px solid #e2e8f0' }} align=\"right\">{formatCurrency(row.cf_p25, 2)}</TableCell>\n                          <TableCell align=\"right\">{formatCurrency(row.cf_p50, 2)}</TableCell>\n                          <TableCell align=\"right\">{formatCurrency(row.cf_p75, 2)}</TableCell>\n                          <TableCell align=\"right\">{formatCurrency(row.cf_p90, 2)}</TableCell>\n                        </TableRow>\n                      ))}\n                      {/* Summary Rows */}\n                      {(() => {\n                        const { simple, weighted } = calculateSummaryRows(rows);\n                        return (\n                          <>\n                            <TableRow sx={{ \n                              backgroundColor: '#f1f5f9',\n                              borderTop: '2px solid #e2e8f0'\n                            }}>\n                              <TableCell sx={{ fontWeight: 'bold', fontSize: '0.875rem' }}>Simple Average</TableCell>\n                              <TableCell sx={{ fontSize: '0.875rem' }}>-</TableCell>\n                              <TableCell sx={{ fontSize: '0.875rem' }}>-</TableCell>\n                              <TableCell align=\"right\" sx={{ fontSize: '0.875rem' }}>{simple.n_orgs}</TableCell>\n                              <TableCell align=\"right\" sx={{ fontSize: '0.875rem' }}>{simple.n_incumbents}</TableCell>\n                              \n                              {/* TCC Values */}\n                              <TableCell sx={{ borderLeft: '2px solid #e2e8f0' }} align=\"right\">{formatCurrency(simple.tcc_p25)}</TableCell>\n                              <TableCell align=\"right\">{formatCurrency(simple.tcc_p50)}</TableCell>\n                              <TableCell align=\"right\">{formatCurrency(simple.tcc_p75)}</TableCell>\n                              <TableCell align=\"right\">{formatCurrency(simple.tcc_p90)}</TableCell>\n                              \n                              {/* wRVU Values */}\n                              <TableCell sx={{ borderLeft: '2px solid #e2e8f0' }} align=\"right\">{formatNumber(simple.wrvu_p25)}</TableCell>\n                              <TableCell align=\"right\">{formatNumber(simple.wrvu_p50)}</TableCell>\n                              <TableCell align=\"right\">{formatNumber(simple.wrvu_p75)}</TableCell>\n                              <TableCell align=\"right\">{formatNumber(simple.wrvu_p90)}</TableCell>\n                              \n                              {/* CF Values */}\n                              <TableCell sx={{ borderLeft: '2px solid #e2e8f0' }} align=\"right\">{formatCurrency(simple.cf_p25, 2)}</TableCell>\n                              <TableCell align=\"right\">{formatCurrency(simple.cf_p50, 2)}</TableCell>\n                              <TableCell align=\"right\">{formatCurrency(simple.cf_p75, 2)}</TableCell>\n                              <TableCell align=\"right\">{formatCurrency(simple.cf_p90, 2)}</TableCell>\n                            </TableRow>\n                            <TableRow sx={{ \n                              backgroundColor: '#dbeafe',\n                              borderBottom: '2px solid #e2e8f0'\n                            }}>\n                              <TableCell sx={{ fontWeight: 'bold', fontSize: '0.875rem' }}>Weighted Average</TableCell>\n                              <TableCell sx={{ fontSize: '0.875rem' }}>-</TableCell>\n                              <TableCell sx={{ fontSize: '0.875rem' }}>-</TableCell>\n                              <TableCell align=\"right\" sx={{ fontSize: '0.875rem' }}>{weighted.n_orgs}</TableCell>\n                              <TableCell align=\"right\" sx={{ fontSize: '0.875rem' }}>{weighted.n_incumbents}</TableCell>\n                              \n                              {/* TCC Values */}\n                              <TableCell sx={{ borderLeft: '2px solid #e2e8f0' }} align=\"right\">{formatCurrency(weighted.tcc_p25)}</TableCell>\n                              <TableCell align=\"right\">{formatCurrency(weighted.tcc_p50)}</TableCell>\n                              <TableCell align=\"right\">{formatCurrency(weighted.tcc_p75)}</TableCell>\n                              <TableCell align=\"right\">{formatCurrency(weighted.tcc_p90)}</TableCell>\n                              \n                              {/* wRVU Values */}\n                              <TableCell sx={{ borderLeft: '2px solid #e2e8f0' }} align=\"right\">{formatNumber(weighted.wrvu_p25)}</TableCell>\n                              <TableCell align=\"right\">{formatNumber(weighted.wrvu_p50)}</TableCell>\n                              <TableCell align=\"right\">{formatNumber(weighted.wrvu_p75)}</TableCell>\n                              <TableCell align=\"right\">{formatNumber(weighted.wrvu_p90)}</TableCell>\n                              \n                              {/* CF Values */}\n                              <TableCell sx={{ borderLeft: '2px solid #e2e8f0' }} align=\"right\">{formatCurrency(weighted.cf_p25, 2)}</TableCell>\n                              <TableCell align=\"right\">{formatCurrency(weighted.cf_p50, 2)}</TableCell>\n                              <TableCell align=\"right\">{formatCurrency(weighted.cf_p75, 2)}</TableCell>\n                              <TableCell align=\"right\">{formatCurrency(weighted.cf_p90, 2)}</TableCell>\n                            </TableRow>\n                          </>\n                        );\n                      })()}\n                    </React.Fragment>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SurveyAnalytics; ","import React from 'react';\nimport { cn } from '../../utils/cn';\n\ninterface LoadingSpinnerProps {\n  message?: string;\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n  variant?: 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'error';\n  fullScreen?: boolean;\n  overlay?: boolean;\n  className?: string;\n}\n\nconst LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ \n  message = 'Loading...', \n  size = 'md',\n  variant = 'primary',\n  fullScreen = false,\n  overlay = false,\n  className\n}) => {\n  const sizeClasses = {\n    xs: 'w-4 h-4',\n    sm: 'w-6 h-6', \n    md: 'w-8 h-8',\n    lg: 'w-12 h-12',\n    xl: 'w-16 h-16'\n  };\n\n  const variantClasses = {\n    default: 'text-gray-600',\n    primary: 'text-indigo-600',\n    secondary: 'text-gray-500',\n    success: 'text-emerald-600',\n    warning: 'text-amber-600',\n    error: 'text-red-600'\n  };\n\n  const spinnerSize = sizeClasses[size];\n  const spinnerColor = variantClasses[variant];\n\n  const SpinnerIcon = () => (\n    <svg \n      className={cn(\n        'animate-spin',\n        spinnerSize,\n        spinnerColor,\n        'inline-block'\n      )}\n      xmlns=\"http://www.w3.org/2000/svg\" \n      fill=\"none\" \n      viewBox=\"0 0 24 24\"\n    >\n      <circle \n        className=\"opacity-25\" \n        cx=\"12\" \n        cy=\"12\" \n        r=\"10\" \n        stroke=\"currentColor\" \n        strokeWidth=\"4\"\n      />\n      <path \n        className=\"opacity-75\" \n        fill=\"currentColor\" \n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n      />\n    </svg>\n  );\n\n  const content = (\n    <div className={cn(\n      'flex flex-col items-center justify-center gap-3',\n      fullScreen ? 'min-h-screen' : 'min-h-[200px]',\n      className\n    )}>\n      <SpinnerIcon />\n      {message && (\n        <p className={cn(\n          'text-sm font-medium text-center',\n          variant === 'default' ? 'text-gray-600' : 'text-gray-700'\n        )}>\n          {message}\n        </p>\n      )}\n    </div>\n  );\n\n  if (overlay) {\n    return (\n      <div className=\"fixed inset-0 flex items-center justify-center bg-white/90 backdrop-blur-sm z-50\">\n        {content}\n      </div>\n    );\n  }\n\n  return content;\n};\n\n// Button loading spinner for inline use\nexport const ButtonSpinner: React.FC<{ size?: 'sm' | 'md' }> = ({ size = 'md' }) => {\n  const sizeClasses = {\n    sm: 'w-4 h-4',\n    md: 'w-5 h-5'\n  };\n\n  return (\n    <svg \n      className={cn(\n        'animate-spin text-current',\n        sizeClasses[size]\n      )}\n      xmlns=\"http://www.w3.org/2000/svg\" \n      fill=\"none\" \n      viewBox=\"0 0 24 24\"\n    >\n      <circle \n        className=\"opacity-25\" \n        cx=\"12\" \n        cy=\"12\" \n        r=\"10\" \n        stroke=\"currentColor\" \n        strokeWidth=\"4\"\n      />\n      <path \n        className=\"opacity-75\" \n        fill=\"currentColor\" \n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n      />\n    </svg>\n  );\n};\n\n// Page loading spinner for full page loads\nexport const PageSpinner: React.FC<{ message?: string }> = ({ message = 'Loading page...' }) => (\n  <LoadingSpinner \n    message={message}\n    size=\"lg\"\n    variant=\"primary\"\n    fullScreen={true}\n  />\n);\n\n// Inline loading spinner for small areas\nexport const InlineSpinner: React.FC<{ message?: string; size?: 'sm' | 'md' }> = ({ \n  message, \n  size = 'md' \n}) => (\n  <LoadingSpinner \n    message={message}\n    size={size}\n    variant=\"default\"\n    className=\"py-8\"\n  />\n);\n\n// Overlay loading spinner for modal/overlay contexts\nexport const OverlaySpinner: React.FC<{ message?: string }> = ({ message = 'Processing...' }) => (\n  <LoadingSpinner \n    message={message}\n    size=\"md\"\n    variant=\"primary\"\n    overlay={true}\n  />\n);\n\nexport default LoadingSpinner;\n"],"names":["ColumnMappingService","constructor","storage","MAPPINGS_KEY","LEARNED_MAPPINGS_KEY","this","createMapping","standardizedName","sourceColumns","payload","res","fetch","method","headers","body","JSON","stringify","json","getAllMappings","ok","Error","_unused","deleteMapping","mappingId","concat","clearAllMappings","console","log","response","status","statusText","result","saveMappings","_mappings","autoMapColumns","config","unmappedColumns","getUnmappedColumns","map","c","name","suggestions","processedColumns","Set","column","has","id","matches","filter","similarity","calculateSimilarity","dataType","match","confidenceThreshold","sort","a","b","length","matchedColumns","m","forEach","add","push","generateStandardizedName","columns","confidence","s","name1","name2","type1","type2","normalized1","toLowerCase","replace","normalized2","numbers1","numbers2","some","n1","n2","levenshteinDistance","Math","max","includeDataTypeMatching","str1","str2","n","dp","Array","fill","i","j","min","reduce","trim","mappings","mappedColumns","mapping","key","surveySource","backend","default","getInstance","surveys","getAllSurveys","survey","meta","getSurveyMeta","catch","isArray","header","index","columnName","String","type","uniqueKey","inferDataType","fileContent","columnIndex","values","split","slice","line","_line$split$columnInd","every","v","isNaN","Number","Date","parse","calculatePercentile","numbers","percentile","sortedNumbers","floor","formatCurrency","value","decimals","arguments","undefined","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatNumber","calculateWeightedAverage","weights","sum","acc","weight","weightSum","calculateAverage","val","fuzzyMatchSpecialty","specialty1","specialty2","normalize","str","norm1","norm2","includes","words1","w","words2","common","size","transformSurveyData","rawData","columnMappings","specialtyMappings","rawDataLength","columnMappingsCount","specialtyMappingsCount","row","specialty","allergyRows","columnMappingLookup","Map","set","specialtyMappingLookup","sourceSpecialties","Object","fromEntries","allergyMappings","from","entries","_ref","allSurveySources","transformedRow","normalizedSpecialty","originalSpecialty","providerType","provider_type","geographicRegion","geographic_region","n_orgs","n_incumbents","tcc_p25","tcc_p50","tcc_p75","tcc_p90","wrvu_p25","wrvu_p50","wrvu_p75","wrvu_p90","cf_p25","cf_p50","cf_p75","cf_p90","standardizedSpecialty","get","_ref2","keys","originalColumn","SurveyAnalytics","isLoading","setIsLoading","useState","error","setError","setMappings","setSurveys","filters","setFilters","region","mappingService","useMemo","SpecialtyMappingService","LocalStorageService","columnMappingService","storageService","backendService","BackendService","uniqueValues","bySource","src","list","counts","rows","_rows$","source","specialties","providerTypes","regions","surveySources","selectedMapping","find","sourceNamesBySurvey","_ref3","surveyId","surveyRows","rowSpec","direct","viaSource","useEffect","async","allMappings","uploadedSurveys","totalRows","rowCount","fileName","uploadDate","surveyData","surveyType","data","getSurveyData","limit","transformedRows","allergyTransformedRows","originalSpecialties","transformedSpecialties","sampleSpecialties","processedRow","_objectSpread","indexOf","metrics","tcc","p25","p50","p75","p90","wrvu","cf","allSpecialties","_ref4","_rows$2","surveySpecialties","r","Boolean","hasData","sampleRow","uniqueSpecialties","allergySpecialties","_ref5","fetchData","aggregatedData","allMatchingRows","_ref6","_surveyRows$","expectedSourceSpecialties","filtered","rowSpecialty","selectedSpecialty","specialtyMatch","providerTypeMatch","regionMatch","surveySourceMatch","groupedRows","_groupedRows$get","groupRows","tcc_avg","wrvu_avg","cf_avg","tcc_weighted_avg","wrvu_weighted_avg","cf_weighted_avg","surveySpecialty","filteredData","matchesSpecialty","matchesSurveySource","matchesProviderType","_s$providerType","matchesRegion","_s$geographicRegion","handleFilterChange","filterName","prev","newFilters","_jsx","LoadingSpinner","message","fullScreen","Box","p","children","Typography","color","_jsxs","className","onClick","exportToCSV","exportToExcel","csvData","unshift","csvContent","cell","join","blob","Blob","link","document","createElement","url","URL","createObjectURL","setAttribute","toISOString","visibility","appendChild","click","removeChild","disabled","DocumentTextIcon","FormControl","fullWidth","Select","onChange","e","target","sx","backgroundColor","border","borderRadius","fontSize","borderColor","displayEmpty","MenuItem","title","viewBox","d","fillRule","clipRule","stroke","strokeLinecap","strokeLinejoin","strokeWidth","TableContainer","component","Paper","overflowX","overflowY","minWidth","height","background","Table","width","TableHead","TableRow","TableCell","colSpan","fontWeight","borderBottom","align","borderLeft","textAlign","TableBody","_ref7","React","idx","transition","toLocaleString","simple","weighted","totalIncumbents","calculateSummaryRows","_Fragment","borderTop","variant","overlay","spinnerSize","xs","sm","md","lg","xl","spinnerColor","primary","secondary","success","warning","SpinnerIcon","cn","xmlns","cx","cy","content","ButtonSpinner"],"sourceRoot":""}