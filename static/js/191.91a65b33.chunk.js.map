{"version":3,"file":"static/js/191.91a65b33.chunk.js","mappings":"qQACA,SAASA,EAAaC,EAInBC,GAAQ,IAJY,MACrBC,EAAK,QACLC,GAEDH,EADII,GAAKC,EAAAA,EAAAA,GAAAL,EAAAM,GAER,OAAoBC,EAAAA,cAAoB,MAAOC,OAAOC,OAAO,CAC3DC,MAAO,6BACPC,KAAM,OACNC,QAAS,YACTC,YAAa,IACbC,OAAQ,eACR,cAAe,OACf,YAAa,OACbC,IAAKd,EACL,kBAAmBE,GAClBC,GAAQF,EAAqBK,EAAAA,cAAoB,QAAS,CAC3DS,GAAIb,GACHD,GAAS,KAAmBK,EAAAA,cAAoB,OAAQ,CACzDU,cAAe,QACfC,eAAgB,QAChBC,EAAG,4KAEP,CACA,MACA,EADiCZ,EAAAA,WAAiBR,G,yECPlD,MAAMqB,GAAgBC,EAAAA,EAAAA,MAAK,IAAM,gFAA0BC,KAAKC,IAAM,CAAOC,QAASD,EAAOC,YACvFC,GAAgBJ,EAAAA,EAAAA,MAAK,IAAM,wEAAiCC,KAAKC,IAAM,CAAOC,QAASD,EAAOC,YAQ9FE,EAAwC1B,IAAA,IAAC,OAAE2B,EAAM,WAAEC,EAAU,SAAEC,GAAU7B,EAAA,OAC7E8B,EAAAA,EAAAA,MAAA,UACEC,QAASA,IAAMF,EAASF,GACxBK,UAAS,iEAAAC,OACPL,EACI,2CACA,oDACHM,SAAA,EAEHC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,sBAAqBE,SAAEP,EAAOS,QAC7CN,EAAAA,EAAAA,MAAA,OAAKE,UAAU,wBAAuBE,SAAA,CAAC,SAAOP,EAAOU,gBAKnDC,EAAa/B,EAAAA,KAAWgC,IAsBvB,IAtBwB,UAC7BC,EAAS,WACTC,EAAU,cACVC,EAAa,gBACbC,EAAe,gBACfC,EAAe,mBACfC,EAAkB,SAClBC,EAAQ,iBACRC,EAAgB,oBAChBC,EAAmB,aACnBC,GAYDV,EAEC,MAAMW,GAAmBC,EAAAA,EAAAA,SAAQ,MAC/BC,UACEtB,EAAAA,EAAAA,MAAA,OAAKE,UAAU,gBAAeE,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,uEAAsEE,UACnFC,EAAAA,EAAAA,KAACkB,EAAAA,EAAU,CAACrB,UAAU,6BAExBG,EAAAA,EAAAA,KAAA,SACEmB,KAAK,OACLC,YAAY,oBACZC,MAAOf,EACPgB,SAAWC,GAAMhB,EAAcgB,EAAEC,OAAOH,OACxCxB,UAAU,6JAIhB4B,QACE9B,EAAAA,EAAAA,MAAA,OAAKE,UAAU,gBAAeE,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,uEAAsEE,UACnFC,EAAAA,EAAAA,KAACkB,EAAAA,EAAU,CAACrB,UAAU,6BAExBG,EAAAA,EAAAA,KAAA,SACEmB,KAAK,OACLC,YAAY,2BACZC,MAAOT,EACPU,SAAWC,GAAMV,EAAoBU,EAAEC,OAAOH,OAC9CxB,UAAU,+JAId,CAACS,EAAYC,EAAeK,EAAkBC,IAsElD,OAnEgBG,EAAAA,EAAAA,SAAQ,KACtB,OAAQX,GACN,IAAK,WACH,OACEV,EAAAA,EAAAA,MAAA,OAAKE,UAAU,YAAWE,SAAA,CACvBgB,EAAiBE,SAEjBS,MAAMC,KAAKnB,EAAgBoB,WAAWC,IAAIC,IAAA,IAAEC,EAAcC,GAAQF,EAAA,OACjEnC,EAAAA,EAAAA,MAAA,OAAwBE,UAAU,oDAAmDE,SAAA,EACnFJ,EAAAA,EAAAA,MAAA,OAAKE,UAAU,gDAA+CE,SAAA,EAC5DC,EAAAA,EAAAA,KAAA,MAAIH,UAAU,oCAAmCE,SAAEgC,KACnDpC,EAAAA,EAAAA,MAAA,KAAGE,UAAU,wBAAuBE,SAAA,CAAEiC,EAAQC,OAAO,2BAEvDjC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAeE,SAC3BiC,EAAQH,IAAKrC,IACZQ,EAAAA,EAAAA,KAACT,EAAU,CAETC,OAAQA,EACRC,WAAYgB,EAAgByB,KAAKC,GAAKA,EAAElC,OAAST,EAAOS,MAAQkC,EAAEJ,eAAiBvC,EAAOuC,cAC1FrC,SAAUgB,GAHLlB,EAAOS,WARV8B,KAkBsC,IAAjDL,MAAMC,KAAKnB,EAAgBoB,WAAWK,SACrCjC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,yCAAwCE,UACrDC,EAAAA,EAAAA,KAAA,KAAGH,UAAU,gBAAeE,SAAC,mCAKvC,IAAK,SACH,OACEJ,EAAAA,EAAAA,MAAA,OAAKE,UAAU,YAAWE,SAAA,CACvBgB,EAAiBU,QAClB9B,EAAAA,EAAAA,MAACyC,EAAAA,SAAQ,CAACC,UAAUrC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,mBAAkBE,SAAC,eAAiBA,SAAA,EAErEC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,YAAWE,SACvBY,EACE2B,OAAOC,GACNA,EAAQC,iBAAiBC,cAAcC,SAAS9B,EAAiB6B,gBACjEF,EAAQI,cAAcT,KAAKU,GAAOA,EAAI3C,KAAKwC,cAAcC,SAAS9B,EAAiB6B,iBAEpFZ,IAAKU,IACJvC,EAAAA,EAAAA,KAACf,EAAa,CAEZsD,QAASA,EACTM,SAAUA,IAAM/B,EAAayB,EAAQ1D,KAFhC0D,EAAQ1D,OAOA,IAApB8B,EAASsB,SACRjC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,yCAAwCE,UACrDC,EAAAA,EAAAA,KAAA,KAAGH,UAAU,gBAAeE,SAAC,oCAMzC,QACE,OAAO,OAEV,CAACM,EAAWU,EAAkBP,EAAiBC,EAAiBC,EAAoBC,EAAUC,EAAkBE,MAKrHX,EAAW2C,YAAc,aAEzB,MAoUA,EApUgCC,KAE9B,MAAOpC,EAAUqC,IAAeC,EAAAA,EAAAA,UAA2B,KACpDC,EAAiBC,IAAsBF,EAAAA,EAAAA,UAAwB,KAC/DxC,EAAiB2C,IAAsBH,EAAAA,EAAAA,UAAwB,KAC/D3C,EAAYC,IAAiB0C,EAAAA,EAAAA,UAAS,KACtCrC,EAAkBC,IAAuBoC,EAAAA,EAAAA,UAAS,KAGlDI,EAASC,IAAcL,EAAAA,EAAAA,WAAS,IAChCM,EAAOC,IAAYP,EAAAA,EAAAA,UAAwB,OAC3C5C,EAAWoD,IAAgBR,EAAAA,EAAAA,UAAgC,aAC3DS,EAAeC,IAAoBV,EAAAA,EAAAA,WAAS,IAC5CW,EAAUC,IAAeZ,EAAAA,EAAAA,WAAS,GAEnCa,EAAiB,IAAIC,EAAAA,EAAqB,IAAIC,EAAAA,IAEpDC,EAAAA,EAAAA,WAAU,KACRC,KACC,KAGHD,EAAAA,EAAAA,WAAU,KACHZ,IAEC1C,EAASsB,OAAS,EACpBwB,EAAa,UAGNP,EAAgBjB,OAAS,GAChCwB,EAAa,cAIhB,CAACJ,EAAS1C,EAASsB,OAAQiB,EAAgBjB,SAE9C,MAAMiC,EAAWC,UACf,IACEb,GAAW,GACX,MAAOc,EAAcC,SAAsBC,QAAQC,IAAI,CACrDT,EAAeU,iBACfV,EAAeW,uBAEjBzB,EAAYoB,GACZjB,EAAmBkB,GACnBb,EAAS,KACX,CAAE,MAAOkB,GACPlB,EAAS,8BACTmB,QAAQpB,MAAM,sBAAuBmB,EACvC,CAAC,QACCpB,GAAW,EACb,GAGIsB,GAAmB5D,EAAAA,EAAAA,SAAQ,IACxBkC,EAAgBZ,OAAO9C,GAC5BA,EAAOS,KAAKwC,cAAcC,SAASpC,EAAWmC,gBAC9CjD,EAAOuC,aAAaU,cAAcC,SAASpC,EAAWmC,gBAEvD,CAACS,EAAiB5C,IAGfE,GAAkBQ,EAAAA,EAAAA,SAAQ,KAC9B,MAAM6D,EAAU,IAAIC,IAKpB,OAJAF,EAAiBG,QAAQvF,IACvB,MAAMwF,EAAUH,EAAQI,IAAIzF,EAAOuC,eAAiB,GACpD8C,EAAQK,IAAI1F,EAAOuC,aAAc,IAAIiD,EAASxF,MAEzCqF,GACN,CAACD,IA4DJ,OAAIvB,GAEArD,EAAAA,EAAAA,KAACmF,EAAAA,GAAc,CACbC,QAAQ,6BACRC,YAAY,EACZC,KAAK,QAMTtF,EAAAA,EAAAA,KAAA,OAAKH,UAAU,sBAAqBE,UAClCJ,EAAAA,EAAAA,MAAA,OAAKE,UAAU,6BAA4BE,SAAA,EAGzCJ,EAAAA,EAAAA,MAAA,OAAKE,UAAU,kEAAiEE,SAAA,EAC9EJ,EAAAA,EAAAA,MAAA,OAAKE,UAAU,yCAAwCE,SAAA,EACrDJ,EAAAA,EAAAA,MAAA,OAAKE,UAAU,0BAAyBE,SAAA,EACtCC,EAAAA,EAAAA,KAAA,UACEJ,QAASA,IAAMiE,GAAaD,GAC5B/D,UAAU,kEACV,aAAY+D,EAAW,wBAA0B,sBAAsB7D,SAEtE6D,GACC5D,EAAAA,EAAAA,KAACuF,EAAAA,EAAe,CAAC1F,UAAU,2BAE3BG,EAAAA,EAAAA,KAACwF,EAAAA,EAAgB,CAAC3F,UAAU,6BAGhCG,EAAAA,EAAAA,KAAA,MAAIH,UAAU,sCAAqCE,SAAC,4BAEtDC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,0BAAyBE,UACtCC,EAAAA,EAAAA,KAACyF,EAAAA,EAAa,CAAC5F,UAAU,iCAI5B+D,IACC5D,EAAAA,EAAAA,KAAA,OAAKH,UAAU,YAAWE,UACxBJ,EAAAA,EAAAA,MAAA,OAAKE,UAAU,uDAAsDE,SAAA,EACnEC,EAAAA,EAAAA,KAAA,MAAIH,UAAU,qCAAoCE,SAAC,4BACnDJ,EAAAA,EAAAA,MAAA,MAAIE,UAAU,yCAAwCE,SAAA,EACpDC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,4GACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,6GACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gHAENC,EAAAA,EAAAA,KAAA,MAAIH,UAAU,qCAAoCE,SAAC,oCACnDJ,EAAAA,EAAAA,MAAA,MAAIE,UAAU,yCAAwCE,SAAA,EACpDC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kFACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gGACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,2EACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wFAENC,EAAAA,EAAAA,KAAA,MAAIH,UAAU,qCAAoCE,SAAC,oBACnDJ,EAAAA,EAAAA,MAAA,MAAIE,UAAU,oCAAmCE,SAAA,EAC/CC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,sGACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,0FACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kFAQdJ,EAAAA,EAAAA,MAAA,OAAKE,UAAU,kEAAiEE,SAAA,EAC9EJ,EAAAA,EAAAA,MAAA,OAAKE,UAAU,yCAAwCE,SAAA,EACrDC,EAAAA,EAAAA,KAAA,MAAIH,UAAU,sCAAqCE,SAAC,oBACpDJ,EAAAA,EAAAA,MAAA,OAAKE,UAAU,iBAAgBE,SAAA,EAC7BJ,EAAAA,EAAAA,MAAA,UACEC,QAASsE,EACTwB,SAAUrC,EACVxD,UAAU,8RAA6RE,SAAA,EAEvSC,EAAAA,EAAAA,KAAC2F,EAAW,CAAC9F,UAAU,iBAAiB,aAG3B,WAAdQ,IACCV,EAAAA,EAAAA,MAAA,UACEC,QAASA,IAAM+D,GAAiB,GAChC9D,UAAU,4NAA2NE,SAAA,EAErOC,EAAAA,EAAAA,KAAC4F,EAAAA,EAAQ,CAAC/F,UAAU,iBAAiB,uBAIzCF,EAAAA,EAAAA,MAAA,UACEC,QArIcuE,UAC1B,GAA+B,IAA3B1D,EAAgBwB,OAEpB,IACE,MAAMO,EAAmBqD,OAAO,mCAChC,IAAKrD,EAAkB,aAEjBsB,EAAegC,cAActD,EAAkB/B,GACrD2C,EAAmB,UACbc,IACNT,EAAa,SACf,CAAE,MAAOF,GACPoB,QAAQpB,MAAM,0BAA2BA,GACzCC,EAAS,2BACX,GAwHYkC,SAAqC,IAA3BjF,EAAgBwB,OAC1BpC,UAAU,+QAA8QE,SAAA,EAExRC,EAAAA,EAAAA,KAAC+F,EAAAA,EAAO,CAAClG,UAAU,iBAAiB,oBAGvB,WAAdQ,IACCV,EAAAA,EAAAA,MAAA,UACEC,QAASuE,UACP,GAAI6B,OAAOC,QAAQ,uEACjB,IACEtB,QAAQuB,IAAI,2CACNpC,EAAeqC,mBACrBxB,QAAQuB,IAAI,mDACZlD,EAAY,IACZS,EAAa,kBACPS,IACNS,QAAQuB,IAAI,qCACd,CAAE,MAAO3C,GACPoB,QAAQpB,MAAM,+BAAgCA,GAC9CC,EAAS,kDACX,GAGJ3D,UAAU,4NAA2NE,SAAA,EAErOC,EAAAA,EAAAA,KAACoG,EAAAA,EAAe,CAACvG,UAAU,iBAAiB,qBAQnD0D,IACCvD,EAAAA,EAAAA,KAAA,OAAKH,UAAU,sDAAqDE,UAClEJ,EAAAA,EAAAA,MAAA,OAAKE,UAAU,OAAME,SAAA,EACnBC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAeE,UAC5BC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,uBAAuBpB,QAAQ,YAAYD,KAAK,eAAcuB,UAC3EC,EAAAA,EAAAA,KAAA,QAAMqG,SAAS,UAAUrH,EAAE,0NAA0NsH,SAAS,iBAGlQtG,EAAAA,EAAAA,KAAA,OAAKH,UAAU,OAAME,UACnBC,EAAAA,EAAAA,KAAA,KAAGH,UAAU,uBAAsBE,SAAEwD,YAO7CvD,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gCAA+BE,UAC5CC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,wBAAuBE,SACnC,CACC,CAAEwG,IAAK,WAAYC,MAAO,oBAC1B,CAAED,IAAK,SAAUC,MAAO,mBACxB3E,IAAK4E,IACLzG,EAAAA,EAAAA,KAAA,UAEEJ,QAASA,IAAM6D,EAAagD,EAAIF,KAChC1G,UAAS,2EAAAC,OACPO,IAAcoG,EAAIF,IACd,oCACA,8EACHxG,SAEF0G,EAAID,OARAC,EAAIF,WAejBvG,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAeE,UAC5BC,EAAAA,EAAAA,KAACG,EAAU,CACTE,UAAWA,EACXC,WAAYA,EACZC,cAAeA,EACfC,gBAAiBA,EACjBC,gBAAiBA,EACjBC,mBAhOgBlB,IAC1B4D,EAAmBsD,GACEA,EAAKxE,KAAKC,GAAKA,EAAElC,OAAST,EAAOS,MAAQkC,EAAEJ,eAAiBvC,EAAOuC,cAE7E2E,EAAKpE,OAAOH,KAAOA,EAAElC,OAAST,EAAOS,MAAQkC,EAAEJ,eAAiBvC,EAAOuC,eAEvE,IAAI2E,EAAMlH,KA2NXmB,SAAUA,EACVC,iBAAkBA,EAClBC,oBAAqBA,EACrBC,aAxMSqD,UACnB,UACQL,EAAe6C,cAAcC,SAC7B1C,GACR,CAAE,MAAOX,GACPoB,QAAQpB,MAAM,0BAA2BA,GACzCC,EAAS,2BACX,UAuMKE,IACC1D,EAAAA,EAAAA,KAAA,OAAKH,UAAU,6EAA4EE,UACzFC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,wEAAuEE,UACpFC,EAAAA,EAAAA,KAACoC,EAAAA,SAAQ,CAACC,UAAUrC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,mBAAkBE,SAAC,eAAiBA,UACrEC,EAAAA,EAAAA,KAACV,EAAa,CACZvB,MAAM,mBACN8I,YAAY,gEACZC,QAASA,IAAMnD,GAAiB,GAChCoD,UA5MM5C,UAKpB,IACEb,GAAW,SACL,IAAIgB,QAAQ0C,GAAWC,WAAWD,EAAS,YAC3C9C,IAENT,EAAa,UACbE,GAAiB,EACnB,CAAE,MAAOJ,GACPoB,QAAQpB,MAAM,sBAAuBA,GACrCC,EAAS,gDACX,CAAC,QACCF,GAAW,EACb,gB,oFCtSJ,SAASmC,EAAa5H,EAInBC,GAAQ,IAJY,MACrBC,EAAK,QACLC,GAEDH,EADII,GAAKC,EAAAA,EAAAA,GAAAL,EAAAM,GAER,OAAoBC,EAAAA,cAAoB,MAAOC,OAAOC,OAAO,CAC3DC,MAAO,6BACPC,KAAM,OACNC,QAAS,YACTC,YAAa,IACbC,OAAQ,eACR,cAAe,OACf,YAAa,OACbC,IAAKd,EACL,kBAAmBE,GAClBC,GAAQF,EAAqBK,EAAAA,cAAoB,QAAS,CAC3DS,GAAIb,GACHD,GAAS,KAAmBK,EAAAA,cAAoB,OAAQ,CACzDU,cAAe,QACfC,eAAgB,QAChBC,EAAG,2PAEP,CACA,MACA,EADiCZ,EAAAA,WAAiBqH,E,kCCpB3C,MAAM1B,EAKXmD,WAAAA,CAAYC,GAA+B,KAJ1BC,aAAe,kBAAkB,KACjCC,qBAAuB,0BAA0B,KAC1DF,aAAO,EAGbG,KAAKH,QAAUA,CACjB,CAEA,mBAAMrB,CAActD,EAA0BG,GAC5C,MAAM4E,EAAU,CAAE/E,mBAAkBG,iBAC9B6E,QAAYC,MAAM,4CAA6C,CACnEC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUP,KAGvB,aADoBC,EAAIO,MAE1B,CAEA,oBAAMvD,GACJ,IACE,MAAMgD,QAAYC,MAAM,6CACxB,IAAKD,EAAIQ,GAAI,MAAM,IAAIC,MAAM,mBAE7B,aADmBT,EAAIO,MAEzB,CAAE,MAAAG,GACA,MAAO,EACT,CACF,CAEA,mBAAMvB,CAAcC,SACZa,MAAM,6CAAD3H,OAA8C8G,GAAa,CAAEc,OAAQ,UAClF,CAEA,sBAAMvB,GACJxB,QAAQuB,IAAI,iDACZ,MAAMiC,QAAiBV,MAAM,4CAA6C,CAAEC,OAAQ,WACpF,IAAKS,EAASH,GACZ,MAAM,IAAIC,MAAM,6BAADnI,OAA8BqI,EAASC,OAAM,KAAAtI,OAAIqI,EAASE,aAE3E,MAAMC,QAAeH,EAASJ,OAC9BpD,QAAQuB,IAAI,6BAA8BoC,EAC5C,CAEA,kBAAcC,CAAaC,GAA6C,CAExE,oBAAMC,CAAeC,GAKnB,MAAMxF,QAAwBoE,KAAK7C,qBACnCE,QAAQuB,IAAI,wBAAyBhD,EAAgBrB,IAAIM,GAAKA,EAAElC,OAEhE,MAAM0I,EAID,GAGCC,EAAmB,IAAIC,IAE7B,IAAK,MAAMrJ,KAAU0D,EAAiB,CACpC,GAAI0F,EAAiBE,IAAItJ,EAAOX,IAAK,SAErC,MAAMkK,EAAU7F,EACbZ,OAAQH,IAAoByG,EAAiBE,IAAI3G,EAAEtD,KACnDgD,IAAKM,IAAc,CAClB3C,OAAQ2C,EACR6G,WAAY1B,KAAK2B,oBAAoBzJ,EAAOS,KAAMkC,EAAElC,KAAMkC,EAAEjC,SAAUV,EAAOU,SAAUwI,MAExFpG,OAAO4G,IACNvE,QAAQuB,IAAI,uBAADpG,OAAwBN,EAAOS,KAAI,WAAAH,OAAUoJ,EAAM1J,OAAOS,KAAI,OAAAH,OAAMoJ,EAAMF,aAC9EE,EAAMF,YAAcN,EAAOS,sBAEnCC,KAAK,CAACC,EAAGC,IAAMA,EAAEN,WAAaK,EAAEL,YAEnC,GAAID,EAAQ9G,OAAS,EAAG,CACtB,MAAMsH,EAAiBR,EAAQlH,IAAI2H,GAAKA,EAAEhK,QAC1C+J,EAAexE,QAAQ5C,GAAKyG,EAAiBa,IAAItH,EAAEtD,KAEnD8F,QAAQuB,IAAI,yBAADpG,OAA0BN,EAAOS,KAAI,WAAAH,OAAUyJ,EAAetH,OAAM,aAC7EsH,EAAe1H,IAAIM,GAAKA,EAAElC,OAE5B0I,EAAYe,KAAK,CACflH,iBAAkB8E,KAAKqC,yBAAyBJ,GAChDvH,QAASuH,EACTK,WAAYb,EAAQ,GAAGC,YAE3B,CACF,CAQA,OANArE,QAAQuB,IAAI,kCAAmCyC,EAAY9G,IAAIgI,IAAC,CAC9D5J,KAAM4J,EAAErH,iBACRR,QAAS6H,EAAE7H,QAAQH,IAAIM,GAAKA,EAAElC,MAC9B2J,WAAYC,EAAED,eAGTjB,EAAYS,KAAK,CAACC,EAAGC,IAAMA,EAAEM,WAAaP,EAAEO,WACrD,CAEQX,mBAAAA,CAAoBa,EAAeC,EAAeC,EAAeC,EAAevB,GAEtF,MAAMwB,EAAcJ,EAAMrH,cAAc0H,QAAQ,aAAc,IACxDC,EAAcL,EAAMtH,cAAc0H,QAAQ,aAAc,IAG9D,GAAID,IAAgBE,EAClB,OAAO,EAQT,GAJgBF,EAAYC,QAAQ,SAAU,MAC9BC,EAAYD,QAAQ,SAAU,IAI5C,MAAO,GAIT,MAAME,EAAWH,EAAYhB,MAAM,YAAc,GAC3CoB,EAAWF,EAAYlB,MAAM,YAAc,GAGjD,GAAImB,EAASpI,OAAS,GAAKqI,EAASrI,OAAS,EAAG,CAI9C,GAH4BoI,EAASnI,KAAKqI,GACxCD,EAASpI,KAAKsI,GAAMD,IAAOC,IAI3B,OADA7F,QAAQuB,IAAI,gCAADpG,OAAiCgK,EAAK,UAAAhK,OAASiK,EAAK,iCACxD,EAEX,CAKA,IAAIf,EAAa,EAFA1B,KAAKmD,oBAAoBP,EAAaE,GACrCM,KAAKC,IAAIT,EAAYjI,OAAQmI,EAAYnI,QAI3D,GAAIyG,EAAOkC,wBAAyB,CAElC5B,EADkBgB,IAAUC,EACHjB,EAA0B,GAAbA,CACxC,CAGA,OADArE,QAAQuB,IAAI,4BAADpG,OAA6BgK,EAAK,UAAAhK,OAASiK,EAAK,QAAAjK,OAAOkJ,IAC3DA,CACT,CAEQyB,mBAAAA,CAAoBI,EAAcC,GACxC,MAAMtB,EAAIqB,EAAK5I,OACT8I,EAAID,EAAK7I,OACT+I,EAAiBtJ,MAAM8H,EAAI,GAAGhL,KAAK,GAAGqD,IAAI,IAAMH,MAAMqJ,EAAI,GAAGvM,KAAK,IAExE,IAAK,IAAIyM,EAAI,EAAGA,GAAKzB,EAAGyB,IAAKD,EAAGC,GAAG,GAAKA,EACxC,IAAK,IAAIC,EAAI,EAAGA,GAAKH,EAAGG,IAAKF,EAAG,GAAGE,GAAKA,EAExC,IAAK,IAAID,EAAI,EAAGA,GAAKzB,EAAGyB,IACtB,IAAK,IAAIC,EAAI,EAAGA,GAAKH,EAAGG,IAClBL,EAAKI,EAAI,KAAOH,EAAKI,EAAI,GAC3BF,EAAGC,GAAGC,GAAKF,EAAGC,EAAI,GAAGC,EAAI,GAEzBF,EAAGC,GAAGC,GAAK,EAAIR,KAAKS,IAClBH,EAAGC,EAAI,GAAGC,GACVF,EAAGC,GAAGC,EAAI,GACVF,EAAGC,EAAI,GAAGC,EAAI,IAMtB,OAAOF,EAAGxB,GAAGuB,EACf,CAEQpB,wBAAAA,CAAyB3H,GAO/B,OALqBA,EAClBH,IAAIM,GAAKA,EAAElC,MACXmL,OAAO,CAAC/B,EAAGC,IAAMD,EAAEpH,QAAUqH,EAAErH,OAASoH,EAAIC,GAI5Ca,QAAQ,kBAAmB,KAC3BA,QAAQ,OAAQ,KAChBkB,MACL,CAEA,wBAAM5G,GACJ,MAAM9D,QAAiB2G,KAAK9C,iBAC5BG,QAAQuB,IAAI,0BAA2BvF,EAASsB,QAGhD,MAAMqJ,EAAgB,IAAIzC,IAC1BlI,EAASoE,QAAQxC,IACfA,EAAQI,cAAcoC,QAAQvF,IAE5B,MAAM+G,EAAG,GAAAzG,OAAMN,EAAOS,KAAI,KAAAH,OAAIN,EAAOuC,cACrCuJ,EAAc7B,IAAIlD,GAClB5B,QAAQuB,IAAI,qBAAsBK,OAKtC,MAAMgF,SAAiB,+BAA4BlM,QAAQmM,cACrDC,QAAgBF,EAAQG,gBACxB1J,EAAyB,GAE/B,IAAK,MAAM2J,KAAUF,EAAuB,CAC1C,MAAMG,QAAaL,EAAQM,cAAcF,EAAO9M,IAAIiN,MAAM,MAAS,KACzCpK,MAAMqK,QAAY,OAAJH,QAAI,IAAJA,OAAI,EAAJA,EAAM5J,UAAY4J,EAAK5J,QAAQC,OAAS,EAC5E2J,EAAK5J,QACL,IACI+C,QAAQ,CAACiH,EAAgBC,KAC/B,MAAMC,EAAaC,OAAOH,GAAU,IAAIX,OAClCtJ,EAAe4J,EAAOxK,MAAQwK,EAAO1L,MAAQ,UAC7CmM,EAAS,GAAAtM,OAAMoM,EAAU,KAAApM,OAAIiC,GAE9BuJ,EAAcxC,IAAIsD,GAQrBzH,QAAQuB,IAAI,yBAA0BkG,GAPtCpK,EAAQ0H,KAAK,CACX7K,GAAG,GAADiB,OAAKiC,EAAY,KAAAjC,OAAIoM,EAAU,KAAApM,OAAImM,GACrChM,KAAMiM,EACNnK,aAAcA,EACd7B,SAAU,YAMlB,CAGA,OADAyE,QAAQuB,IAAI,gCAAiClE,EAAQC,QAC9CD,CACT,CAEQqK,aAAAA,CAAcC,EAAqBC,GACzC,MACMC,EADQF,EAAYG,MAAM,MAAMC,MAAM,EAAG,GAC1B7K,IAAI8K,IAAI,IAAAC,EAAA,OAAgC,QAAhCA,EAAID,EAAKF,MAAM,KAAKF,UAAY,IAAAK,OAAA,EAA5BA,EAA8BvB,SAG/D,OAAImB,EAAOK,MAAMC,IAAMC,MAAMC,OAAOF,KAC3B,SAGLN,EAAOK,MAAMC,IAAMC,MAAME,KAAKC,MAAMJ,KAC/B,OAGF,QACT,E,oFC9PF,SAASvH,EAAe1H,EAIrBC,GAAQ,IAJc,MACvBC,EAAK,QACLC,GAEDH,EADII,GAAKC,EAAAA,EAAAA,GAAAL,EAAAM,GAER,OAAoBC,EAAAA,cAAoB,MAAOC,OAAOC,OAAO,CAC3DC,MAAO,6BACPC,KAAM,OACNC,QAAS,YACTC,YAAa,IACbC,OAAQ,eACR,cAAe,OACf,YAAa,OACbC,IAAKd,EACL,kBAAmBE,GAClBC,GAAQF,EAAqBK,EAAAA,cAAoB,QAAS,CAC3DS,GAAIb,GACHD,GAAS,KAAmBK,EAAAA,cAAoB,OAAQ,CACzDU,cAAe,QACfC,eAAgB,QAChBC,EAAG,+BAEP,CACA,MACA,EADiCZ,EAAAA,WAAiBmH,E,2ECZlD,MAAMJ,EAAgDtH,IAO/C,IAPgD,QACrDuH,EAAU,aAAY,KACtBE,EAAO,KAAI,QACX6H,EAAU,UAAS,WACnB9H,GAAa,EAAK,QAClB+H,GAAU,EAAK,UACfvN,GACDhC,EACC,MAiBMwP,EAjBc,CAClBC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,YACJC,GAAI,aAY0BpI,GAC1BqI,EAViB,CACrBtO,QAAS,gBACTuO,QAAS,kBACTC,UAAW,gBACXC,QAAS,mBACTC,QAAS,iBACTxK,MAAO,gBAI2B4J,GAE9Ba,EAAcA,KAClBrO,EAAAA,EAAAA,MAAA,OACEE,WAAWoO,EAAAA,EAAAA,IACT,eACAZ,EACAM,EACA,gBAEFpP,MAAM,6BACNC,KAAK,OACLC,QAAQ,YAAWsB,SAAA,EAEnBC,EAAAA,EAAAA,KAAA,UACEH,UAAU,aACVqO,GAAG,KACHC,GAAG,KACHC,EAAE,KACFzP,OAAO,eACPD,YAAY,OAEdsB,EAAAA,EAAAA,KAAA,QACEH,UAAU,aACVrB,KAAK,eACLQ,EAAE,uHAKFqP,GACJ1O,EAAAA,EAAAA,MAAA,OAAKE,WAAWoO,EAAAA,EAAAA,IACd,kDACA5I,EAAa,eAAiB,gBAC9BxF,GACAE,SAAA,EACAC,EAAAA,EAAAA,KAACgO,EAAW,IACX5I,IACCpF,EAAAA,EAAAA,KAAA,KAAGH,WAAWoO,EAAAA,EAAAA,IACZ,kCACY,YAAZd,EAAwB,gBAAkB,iBAC1CpN,SACCqF,OAMT,OAAIgI,GAEApN,EAAAA,EAAAA,KAAA,OAAKH,UAAU,mFAAkFE,SAC9FsO,IAKAA,GAIIC,EAAkDlO,IAAsB,IAArB,KAAEkF,EAAO,MAAMlF,EAM7E,OACET,EAAAA,EAAAA,MAAA,OACEE,WAAWoO,EAAAA,EAAAA,IACT,4BARc,CAClBV,GAAI,UACJC,GAAI,WAOYlI,IAEd/G,MAAM,6BACNC,KAAK,OACLC,QAAQ,YAAWsB,SAAA,EAEnBC,EAAAA,EAAAA,KAAA,UACEH,UAAU,aACVqO,GAAG,KACHC,GAAG,KACHC,EAAE,KACFzP,OAAO,eACPD,YAAY,OAEdsB,EAAAA,EAAAA,KAAA,QACEH,UAAU,aACVrB,KAAK,eACLQ,EAAE,wHAuCV,G,oFCnKA,SAAS4G,EAAQ/H,EAIdC,GAAQ,IAJO,MAChBC,EAAK,QACLC,GAEDH,EADII,GAAKC,EAAAA,EAAAA,GAAAL,EAAAM,GAER,OAAoBC,EAAAA,cAAoB,MAAOC,OAAOC,OAAO,CAC3DC,MAAO,6BACPC,KAAM,OACNC,QAAS,YACTC,YAAa,IACbC,OAAQ,eACR,cAAe,OACf,YAAa,OACbC,IAAKd,EACL,kBAAmBE,GAClBC,GAAQF,EAAqBK,EAAAA,cAAoB,QAAS,CAC3DS,GAAIb,GACHD,GAAS,KAAmBK,EAAAA,cAAoB,OAAQ,CACzDU,cAAe,QACfC,eAAgB,QAChBC,EAAG,gEAEP,CACA,MACA,EADiCZ,EAAAA,WAAiBwH,E,oFCvBlD,SAAS2I,EAAmB1Q,EAIzBC,GAAQ,IAJkB,MAC3BC,EAAK,QACLC,GAEDH,EADII,GAAKC,EAAAA,EAAAA,GAAAL,EAAAM,GAER,OAAoBC,EAAAA,cAAoB,MAAOC,OAAOC,OAAO,CAC3DC,MAAO,6BACPC,KAAM,OACNC,QAAS,YACTC,YAAa,IACbC,OAAQ,eACR,cAAe,OACf,YAAa,OACbC,IAAKd,EACL,kBAAmBE,GAClBC,GAAQF,EAAqBK,EAAAA,cAAoB,QAAS,CAC3DS,GAAIb,GACHD,GAAS,KAAmBK,EAAAA,cAAoB,OAAQ,CACzDU,cAAe,QACfC,eAAgB,QAChBC,EAAG,kFAEP,CACA,MACA,EADiCZ,EAAAA,WAAiBmQ,E,oFCvBlD,SAASC,EAAQ3Q,EAIdC,GAAQ,IAJO,MAChBC,EAAK,QACLC,GAEDH,EADII,GAAKC,EAAAA,EAAAA,GAAAL,EAAAM,GAER,OAAoBC,EAAAA,cAAoB,MAAOC,OAAOC,OAAO,CAC3DC,MAAO,6BACPC,KAAM,OACNC,QAAS,YACTC,YAAa,IACbC,OAAQ,eACR,cAAe,OACf,YAAa,OACbC,IAAKd,EACL,kBAAmBE,GAClBC,GAAQF,EAAqBK,EAAAA,cAAoB,QAAS,CAC3DS,GAAIb,GACHD,GAAS,KAAmBK,EAAAA,cAAoB,OAAQ,CACzDU,cAAe,QACfC,eAAgB,QAChBC,EAAG,2BAEP,CACA,MACA,EADiCZ,EAAAA,WAAiBoQ,E,oFCvBlD,SAASC,EAAS5Q,EAIfC,GAAQ,IAJQ,MACjBC,EAAK,QACLC,GAEDH,EADII,GAAKC,EAAAA,EAAAA,GAAAL,EAAAM,GAER,OAAoBC,EAAAA,cAAoB,MAAOC,OAAOC,OAAO,CAC3DC,MAAO,6BACPC,KAAM,OACNC,QAAS,YACTC,YAAa,IACbC,OAAQ,eACR,cAAe,OACf,YAAa,OACbC,IAAKd,EACL,kBAAmBE,GAClBC,GAAQF,EAAqBK,EAAAA,cAAoB,QAAS,CAC3DS,GAAIb,GACHD,GAAS,KAAmBK,EAAAA,cAAoB,OAAQ,CACzDU,cAAe,QACfC,eAAgB,QAChBC,EAAG,kaAEP,CACA,MACA,EADiCZ,EAAAA,WAAiBqQ,E","sources":["../node_modules/@heroicons/react/24/outline/esm/ArrowPathIcon.js","components/ColumnMapping.tsx","../node_modules/@heroicons/react/24/outline/esm/LightBulbIcon.js","services/ColumnMappingService.ts","../node_modules/@heroicons/react/24/outline/esm/ChevronDownIcon.js","components/ui/loading-spinner.tsx","../node_modules/@heroicons/react/24/outline/esm/BoltIcon.js","../node_modules/@heroicons/react/24/outline/esm/MagnifyingGlassIcon.js","../node_modules/@heroicons/react/24/outline/esm/PlusIcon.js","../node_modules/@heroicons/react/24/outline/esm/TrashIcon.js"],"sourcesContent":["import * as React from \"react\";\nfunction ArrowPathIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0 3.181 3.183a8.25 8.25 0 0 0 13.803-3.7M4.031 9.865a8.25 8.25 0 0 1 13.803-3.7l3.181 3.182m0-4.991v4.99\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ArrowPathIcon);\nexport default ForwardRef;","import React, { useState, useEffect, useMemo, Suspense, lazy } from 'react';\r\nimport { \r\n  PlusIcon as AddIcon,\r\n  MagnifyingGlassIcon as SearchIcon,\r\n  BoltIcon,\r\n  TrashIcon as DeleteSweepIcon,\r\n  LightBulbIcon,\r\n  ChevronDownIcon,\r\n  ArrowPathIcon as RefreshIcon,\r\n  ChevronRightIcon\r\n} from '@heroicons/react/24/outline';\r\nimport { ColumnMappingService } from '../services/ColumnMappingService';\r\nimport { LocalStorageService } from '../services/StorageService';\r\nimport { IColumnMapping, IColumnInfo } from '../types/column';\r\nimport LoadingSpinner from './ui/loading-spinner';\r\n\r\n// Lazy load components for better performance\r\nconst MappedColumns = lazy(() => import('./MappedColumns').then(module => ({ default: module.default })));\r\nconst AutoMapDialog = lazy(() => import('./shared/AutoMapDialog').then(module => ({ default: module.default })));\r\n\r\ninterface ColumnCardProps {\r\n  column: IColumnInfo;\r\n  isSelected: boolean;\r\n  onSelect: (column: IColumnInfo) => void;\r\n}\r\n\r\nconst ColumnCard: React.FC<ColumnCardProps> = ({ column, isSelected, onSelect }) => (\r\n  <button\r\n    onClick={() => onSelect(column)}\r\n    className={`w-full p-2 mb-1.5 text-left rounded-md transition-all text-sm ${\r\n      isSelected \r\n        ? 'bg-indigo-100 border-2 border-indigo-500' \r\n        : 'bg-white hover:bg-gray-50 border border-gray-200'\r\n    }`}\r\n  >\r\n    <div className=\"font-medium text-sm\">{column.name}</div>\r\n    <div className=\"text-xs text-gray-500\">Type: {column.dataType}</div>\r\n  </button>\r\n);\r\n\r\n// Memoized tab content component for instant switching\r\nconst TabContent = React.memo(({ \r\n  activeTab, \r\n  searchTerm, \r\n  setSearchTerm, \r\n  columnsBySurvey, \r\n  selectedColumns, \r\n  handleColumnSelect,\r\n  mappings,\r\n  mappedSearchTerm,\r\n  setMappedSearchTerm,\r\n  handleDelete\r\n}: {\r\n  activeTab: string;\r\n  searchTerm: string;\r\n  setSearchTerm: (term: string) => void;\r\n  columnsBySurvey: Map<string, IColumnInfo[]>;\r\n  selectedColumns: IColumnInfo[];\r\n  handleColumnSelect: (column: IColumnInfo) => void;\r\n  mappings: IColumnMapping[];\r\n  mappedSearchTerm: string;\r\n  setMappedSearchTerm: (term: string) => void;\r\n  handleDelete: (mappingId: string) => Promise<void>;\r\n}) => {\r\n  // Memoize search components to prevent re-renders\r\n  const searchComponents = useMemo(() => ({\r\n    unmapped: (\r\n      <div className=\"relative mb-4\">\r\n        <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n          <SearchIcon className=\"h-5 w-5 text-gray-400\" />\r\n        </div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search columns...\"\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n          className=\"block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent text-sm\"\r\n        />\r\n      </div>\r\n    ),\r\n    mapped: (\r\n      <div className=\"relative mb-4\">\r\n        <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n          <SearchIcon className=\"h-5 w-5 text-gray-400\" />\r\n        </div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search mapped columns...\"\r\n          value={mappedSearchTerm}\r\n          onChange={(e) => setMappedSearchTerm(e.target.value)}\r\n          className=\"block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent text-sm\"\r\n        />\r\n      </div>\r\n    )\r\n  }), [searchTerm, setSearchTerm, mappedSearchTerm, setMappedSearchTerm]);\r\n\r\n  // Memoize tab content to prevent unnecessary re-renders\r\n  const content = useMemo(() => {\r\n    switch (activeTab) {\r\n      case 'unmapped':\r\n        return (\r\n          <div className=\"space-y-4\">\r\n            {searchComponents.unmapped}\r\n            {/* Columns by Survey Source */}\r\n            {Array.from(columnsBySurvey.entries()).map(([surveySource, columns]) => (\r\n              <div key={surveySource} className=\"border border-gray-200 rounded-lg overflow-hidden\">\r\n                <div className=\"bg-gray-50 px-4 py-2 border-b border-gray-200\">\r\n                  <h4 className=\"text-sm font-medium text-gray-900\">{surveySource}</h4>\r\n                  <p className=\"text-xs text-gray-500\">{columns.length} unmapped columns</p>\r\n                </div>\r\n                <div className=\"p-4 space-y-2\">\r\n                  {columns.map((column) => (\r\n                    <ColumnCard\r\n                      key={column.name}\r\n                      column={column}\r\n                      isSelected={selectedColumns.some(c => c.name === column.name && c.surveySource === column.surveySource)}\r\n                      onSelect={handleColumnSelect}\r\n                    />\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            ))}\r\n\r\n            {Array.from(columnsBySurvey.entries()).length === 0 && (\r\n              <div className=\"text-center py-8 bg-gray-50 rounded-lg\">\r\n                <p className=\"text-gray-500\">No unmapped columns found</p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        );\r\n      case 'mapped':\r\n        return (\r\n          <div className=\"space-y-4\">\r\n            {searchComponents.mapped}\r\n            <Suspense fallback={<div className=\"text-center py-4\">Loading...</div>}>\r\n              {/* Mapped Columns */}\r\n              <div className=\"space-y-3\">\r\n                {mappings\r\n                  .filter(mapping => \r\n                    mapping.standardizedName.toLowerCase().includes(mappedSearchTerm.toLowerCase()) ||\r\n                    mapping.sourceColumns.some(col => col.name.toLowerCase().includes(mappedSearchTerm.toLowerCase()))\r\n                  )\r\n                  .map((mapping) => (\r\n                    <MappedColumns\r\n                      key={mapping.id}\r\n                      mapping={mapping}\r\n                      onDelete={() => handleDelete(mapping.id)}\r\n                    />\r\n                  ))}\r\n              </div>\r\n\r\n              {mappings.length === 0 && (\r\n                <div className=\"text-center py-8 bg-gray-50 rounded-lg\">\r\n                  <p className=\"text-gray-500\">No mapped columns found</p>\r\n                </div>\r\n              )}\r\n            </Suspense>\r\n          </div>\r\n        );\r\n      default:\r\n        return null;\r\n    }\r\n  }, [activeTab, searchComponents, columnsBySurvey, selectedColumns, handleColumnSelect, mappings, mappedSearchTerm, handleDelete]);\r\n\r\n  return content;\r\n});\r\n\r\nTabContent.displayName = 'TabContent';\r\n\r\nconst ColumnMapping: React.FC = () => {\r\n  // State for data\r\n  const [mappings, setMappings] = useState<IColumnMapping[]>([]);\r\n  const [unmappedColumns, setUnmappedColumns] = useState<IColumnInfo[]>([]);\r\n  const [selectedColumns, setSelectedColumns] = useState<IColumnInfo[]>([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [mappedSearchTerm, setMappedSearchTerm] = useState('');\r\n  \r\n  // State for UI\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [activeTab, setActiveTab] = useState<'unmapped' | 'mapped'>('unmapped');\r\n  const [isAutoMapOpen, setIsAutoMapOpen] = useState(false);\r\n  const [showHelp, setShowHelp] = useState(false);\r\n\r\n  const mappingService = new ColumnMappingService(new LocalStorageService());\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n  }, []);\r\n\r\n  // Smart tab selection based on data availability\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      // If there are mappings, default to mapped tab\r\n      if (mappings.length > 0) {\r\n        setActiveTab('mapped');\r\n      }\r\n      // If there are unmapped columns and no mappings, default to unmapped tab\r\n      else if (unmappedColumns.length > 0) {\r\n        setActiveTab('unmapped');\r\n      }\r\n      // Otherwise, keep current tab or default to unmapped\r\n    }\r\n  }, [loading, mappings.length, unmappedColumns.length]);\r\n\r\n  const loadData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const [mappingsData, unmappedData] = await Promise.all([\r\n        mappingService.getAllMappings(),\r\n        mappingService.getUnmappedColumns()\r\n      ]);\r\n      setMappings(mappingsData);\r\n      setUnmappedColumns(unmappedData);\r\n      setError(null);\r\n    } catch (err) {\r\n      setError('Failed to load column data');\r\n      console.error('Error loading data:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const filteredUnmapped = useMemo(() => {\r\n    return unmappedColumns.filter(column => \r\n      column.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      column.surveySource.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n  }, [unmappedColumns, searchTerm]);\r\n\r\n  // Group columns by survey source\r\n  const columnsBySurvey = useMemo(() => {\r\n    const grouped = new Map<string, IColumnInfo[]>();\r\n    filteredUnmapped.forEach(column => {\r\n      const current = grouped.get(column.surveySource) || [];\r\n      grouped.set(column.surveySource, [...current, column]);\r\n    });\r\n    return grouped;\r\n  }, [filteredUnmapped]);\r\n\r\n  const handleColumnSelect = (column: IColumnInfo) => {\r\n    setSelectedColumns(prev => {\r\n      const isSelected = prev.some(c => c.name === column.name && c.surveySource === column.surveySource);\r\n      if (isSelected) {\r\n        return prev.filter(c => !(c.name === column.name && c.surveySource === column.surveySource));\r\n      } else {\r\n        return [...prev, column];\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleCreateMapping = async () => {\r\n    if (selectedColumns.length === 0) return;\r\n\r\n    try {\r\n      const standardizedName = prompt('Enter standardized column name:');\r\n      if (!standardizedName) return;\r\n\r\n      await mappingService.createMapping(standardizedName, selectedColumns);\r\n      setSelectedColumns([]);\r\n      await loadData();\r\n      setActiveTab('mapped');\r\n    } catch (error) {\r\n      console.error('Error creating mapping:', error);\r\n      setError('Failed to create mapping');\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (mappingId: string) => {\r\n    try {\r\n      await mappingService.deleteMapping(mappingId);\r\n      await loadData();\r\n    } catch (error) {\r\n      console.error('Error deleting mapping:', error);\r\n      setError('Failed to delete mapping');\r\n    }\r\n  };\r\n\r\n  const handleAutoMap = async (config: {\r\n    confidenceThreshold: number;\r\n    useExistingMappings: boolean;\r\n    enableFuzzyMatching: boolean;\r\n  }) => {\r\n    try {\r\n      setLoading(true);\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n      await loadData();\r\n      \r\n      setActiveTab('mapped');\r\n      setIsAutoMapOpen(false);\r\n    } catch (error) {\r\n      console.error('Auto-mapping error:', error);\r\n      setError('Failed to auto-map columns. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <LoadingSpinner \r\n        message=\"Loading column mappings...\" \r\n        fullScreen={true}\r\n        size=\"lg\"\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full min-h-screen\">\r\n      <div className=\"w-full flex flex-col gap-4\">\r\n\r\n        {/* Help Section */}\r\n        <div className=\"w-full bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <button\r\n                onClick={() => setShowHelp(!showHelp)}\r\n                className=\"p-1 hover:bg-gray-100 rounded-lg transition-colors duration-200\"\r\n                aria-label={showHelp ? \"Collapse help section\" : \"Expand help section\"}\r\n              >\r\n                {showHelp ? (\r\n                  <ChevronDownIcon className=\"h-5 w-5 text-gray-500\" />\r\n                ) : (\r\n                  <ChevronRightIcon className=\"h-5 w-5 text-gray-500\" />\r\n                )}\r\n              </button>\r\n              <h3 className=\"text-lg font-semibold text-gray-900\">Column Mapping Help</h3>\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <LightBulbIcon className=\"h-5 w-5 text-indigo-600\" />\r\n            </div>\r\n          </div>\r\n          \r\n          {showHelp && (\r\n            <div className=\"space-y-4\">\r\n              <div className=\"bg-indigo-50 border border-indigo-200 rounded-lg p-4\">\r\n                <h4 className=\"font-semibold text-indigo-900 mb-2\">How Auto-Mapping Works</h4>\r\n                <ul className=\"text-sm text-indigo-800 space-y-1 mb-4\">\r\n                  <li>• The app uses smart matching to suggest standardized column names for each survey's data columns</li>\r\n                  <li>• Auto-mapping considers column names, data types, and patterns to suggest the most likely matches</li>\r\n                  <li>• You can adjust the confidence threshold and enable/disable fuzzy matching in the Auto-Map dialog</li>\r\n                </ul>\r\n                <h4 className=\"font-semibold text-indigo-900 mb-2\">How to Review and Fix Mappings</h4>\r\n                <ul className=\"text-sm text-indigo-800 space-y-1 mb-4\">\r\n                  <li>• After auto-mapping, review the suggested mappings in the \"Mapped\" tab</li>\r\n                  <li>• If a column is mapped incorrectly, you can delete the mapping and manually remap it</li>\r\n                  <li>• Use the search bar to quickly find and review specific columns</li>\r\n                  <li>• Clearing all mappings will reset the process and allow you to start over</li>\r\n                </ul>\r\n                <h4 className=\"font-semibold text-indigo-900 mb-2\">Best Practices</h4>\r\n                <ul className=\"text-sm text-indigo-800 space-y-1\">\r\n                  <li>• Always review auto-mapped results for accuracy, especially for columns with similar names</li>\r\n                  <li>• Use consistent column naming conventions in your source data for best results</li>\r\n                  <li>• Contact support if you encounter persistent mapping issues</li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Main Mapping Section */}\r\n        <div className=\"w-full bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\r\n          <div className=\"flex items-center justify-between mb-4\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900\">Column Mapping</h3>\r\n            <div className=\"flex space-x-2\">\r\n              <button\r\n                onClick={loadData}\r\n                disabled={loading}\r\n                className=\"inline-flex items-center px-3 py-1.5 text-sm font-medium rounded-lg text-gray-700 bg-white border border-gray-300 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n              >\r\n                <RefreshIcon className=\"h-4 w-4 mr-2\" />\r\n                Refresh\r\n              </button>\r\n              {activeTab !== 'mapped' && (\r\n                <button\r\n                  onClick={() => setIsAutoMapOpen(true)}\r\n                  className=\"inline-flex items-center px-3 py-1.5 text-sm font-medium rounded-lg text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-200\"\r\n                >\r\n                  <BoltIcon className=\"h-4 w-4 mr-2\" />\r\n                  Auto-Map Columns\r\n                </button>\r\n              )}\r\n              <button\r\n                onClick={handleCreateMapping}\r\n                disabled={selectedColumns.length === 0}\r\n                className=\"inline-flex items-center px-3 py-1.5 text-sm font-medium rounded-lg text-white bg-emerald-600 hover:bg-emerald-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n              >\r\n                <AddIcon className=\"h-4 w-4 mr-2\" />\r\n                Create Mapping\r\n              </button>\r\n              {activeTab === 'mapped' && (\r\n                <button\r\n                  onClick={async () => {\r\n                    if (window.confirm('Are you sure you want to clear all mappings? This cannot be undone.')) {\r\n                      try {\r\n                        console.log('User confirmed clear all mappings');\r\n                        await mappingService.clearAllMappings();\r\n                        console.log('Successfully cleared all mappings from database');\r\n                        setMappings([]);\r\n                        setActiveTab('unmapped');\r\n                        await loadData();\r\n                        console.log('UI updated after clearing mappings');\r\n                      } catch (error) {\r\n                        console.error('Error clearing all mappings:', error);\r\n                        setError('Failed to clear all mappings. Please try again.');\r\n                      }\r\n                    }\r\n                  }}\r\n                  className=\"inline-flex items-center px-3 py-1.5 text-sm font-medium rounded-lg text-red-600 hover:text-red-700 hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors duration-200\"\r\n                >\r\n                  <DeleteSweepIcon className=\"h-4 w-4 mr-2\" />\r\n                  Clear All\r\n                </button>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Error Display */}\r\n          {error && (\r\n            <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n              <div className=\"flex\">\r\n                <div className=\"flex-shrink-0\">\r\n                  <svg className=\"h-5 w-5 text-red-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                </div>\r\n                <div className=\"ml-3\">\r\n                  <p className=\"text-sm text-red-800\">{error}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Tabs */}\r\n          <div className=\"border-b border-gray-200 mb-4\">\r\n            <nav className=\"-mb-px flex space-x-8\">\r\n              {[\r\n                { key: 'unmapped', label: 'Unmapped Columns' },\r\n                { key: 'mapped', label: 'Mapped Columns' }\r\n              ].map((tab) => (\r\n                <button\r\n                  key={tab.key}\r\n                  onClick={() => setActiveTab(tab.key as 'unmapped' | 'mapped')}\r\n                  className={`py-2 px-1 border-b-2 font-medium text-sm transition-colors duration-200 ${\r\n                    activeTab === tab.key\r\n                      ? 'border-indigo-500 text-indigo-600'\r\n                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\r\n                  }`}\r\n                >\r\n                  {tab.label}\r\n                </button>\r\n              ))}\r\n            </nav>\r\n          </div>\r\n\r\n          {/* Tab Content - Optimized for instant switching */}\r\n          <div className=\"min-h-[400px]\">\r\n            <TabContent\r\n              activeTab={activeTab}\r\n              searchTerm={searchTerm}\r\n              setSearchTerm={setSearchTerm}\r\n              columnsBySurvey={columnsBySurvey}\r\n              selectedColumns={selectedColumns}\r\n              handleColumnSelect={handleColumnSelect}\r\n              mappings={mappings}\r\n              mappedSearchTerm={mappedSearchTerm}\r\n              setMappedSearchTerm={setMappedSearchTerm}\r\n              handleDelete={handleDelete}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Auto-Mapping Dialog */}\r\n        {isAutoMapOpen && (\r\n          <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50\">\r\n            <div className=\"relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white\">\r\n              <Suspense fallback={<div className=\"text-center py-4\">Loading...</div>}>\r\n                <AutoMapDialog\r\n                  title=\"Auto-Map Columns\"\r\n                  description=\"Automatically map columns based on similarity and data types.\"\r\n                  onClose={() => setIsAutoMapOpen(false)}\r\n                  onAutoMap={handleAutoMap}\r\n                />\r\n              </Suspense>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColumnMapping; ","import * as React from \"react\";\nfunction LightBulbIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 18v-5.25m0 0a6.01 6.01 0 0 0 1.5-.189m-1.5.189a6.01 6.01 0 0 1-1.5-.189m3.75 7.478a12.06 12.06 0 0 1-4.5 0m3.75 2.383a14.406 14.406 0 0 1-3 0M14.25 18v-.192c0-.983.658-1.823 1.508-2.316a7.5 7.5 0 1 0-7.517 0c.85.493 1.509 1.333 1.509 2.316V18\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(LightBulbIcon);\nexport default ForwardRef;","import { LocalStorageService } from './StorageService';\r\nimport BackendService from './BackendService';\r\nimport { IColumnMapping, IColumnInfo, IAutoMappingConfig } from '../types/column';\r\n\r\nexport class ColumnMappingService {\r\n  private readonly MAPPINGS_KEY = 'column_mappings';\r\n  private readonly LEARNED_MAPPINGS_KEY = 'learned-column-mappings';\r\n  private storage: LocalStorageService;\r\n\r\n  constructor(storage: LocalStorageService) {\r\n    this.storage = storage;\r\n  }\r\n\r\n  async createMapping(standardizedName: string, sourceColumns: IColumnInfo[]): Promise<IColumnMapping> {\r\n    const payload = { standardizedName, sourceColumns };\r\n    const res = await fetch('http://localhost:3001/api/mappings/column', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(payload)\r\n    });\r\n    const saved = await res.json();\r\n    return saved as IColumnMapping;\r\n  }\r\n\r\n  async getAllMappings(): Promise<IColumnMapping[]> {\r\n    try {\r\n      const res = await fetch('http://localhost:3001/api/mappings/column');\r\n      if (!res.ok) throw new Error('Failed to fetch');\r\n      const data = await res.json();\r\n      return data as IColumnMapping[];\r\n    } catch {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async deleteMapping(mappingId: string): Promise<void> {\r\n    await fetch(`http://localhost:3001/api/mappings/column/${mappingId}`, { method: 'DELETE' });\r\n  }\r\n\r\n  async clearAllMappings(): Promise<void> {\r\n    console.log('Clearing all column mappings from database...');\r\n    const response = await fetch('http://localhost:3001/api/mappings/column', { method: 'DELETE' });\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to clear mappings: ${response.status} ${response.statusText}`);\r\n    }\r\n    const result = await response.json();\r\n    console.log('Clear all mappings result:', result);\r\n  }\r\n\r\n  private async saveMappings(_mappings: IColumnMapping[]): Promise<void> {}\r\n\r\n  async autoMapColumns(config: IAutoMappingConfig): Promise<Array<{\r\n    standardizedName: string;\r\n    columns: IColumnInfo[];\r\n    confidence: number;\r\n  }>> {\r\n    const unmappedColumns = await this.getUnmappedColumns();\r\n    console.log('Auto-mapping columns:', unmappedColumns.map(c => c.name));\r\n    \r\n    const suggestions: Array<{\r\n      standardizedName: string;\r\n      columns: IColumnInfo[];\r\n      confidence: number;\r\n    }> = [];\r\n\r\n    // Group columns by similarity\r\n    const processedColumns = new Set<string>();\r\n    \r\n    for (const column of unmappedColumns) {\r\n      if (processedColumns.has(column.id)) continue;\r\n\r\n      const matches = unmappedColumns\r\n        .filter((c: IColumnInfo) => !processedColumns.has(c.id))\r\n        .map((c: IColumnInfo) => ({\r\n          column: c,\r\n          similarity: this.calculateSimilarity(column.name, c.name, c.dataType, column.dataType, config)\r\n        }))\r\n        .filter(match => {\r\n          console.log(`Similarity between \"${column.name}\" and \"${match.column.name}\": ${match.similarity}`);\r\n          return match.similarity >= config.confidenceThreshold;\r\n        })\r\n        .sort((a, b) => b.similarity - a.similarity);\r\n\r\n      if (matches.length > 0) {\r\n        const matchedColumns = matches.map(m => m.column);\r\n        matchedColumns.forEach(c => processedColumns.add(c.id));\r\n\r\n        console.log(`Creating mapping for \"${column.name}\" with ${matchedColumns.length} columns:`, \r\n          matchedColumns.map(c => c.name));\r\n\r\n        suggestions.push({\r\n          standardizedName: this.generateStandardizedName(matchedColumns),\r\n          columns: matchedColumns,\r\n          confidence: matches[0].similarity\r\n        });\r\n      }\r\n    }\r\n\r\n    console.log('Final auto-mapping suggestions:', suggestions.map(s => ({\r\n      name: s.standardizedName,\r\n      columns: s.columns.map(c => c.name),\r\n      confidence: s.confidence\r\n    })));\r\n\r\n    return suggestions.sort((a, b) => b.confidence - a.confidence);\r\n  }\r\n\r\n  private calculateSimilarity(name1: string, name2: string, type1: string, type2: string, config: IAutoMappingConfig): number {\r\n    // Normalize names\r\n    const normalized1 = name1.toLowerCase().replace(/[^a-z0-9]/g, '');\r\n    const normalized2 = name2.toLowerCase().replace(/[^a-z0-9]/g, '');\r\n\r\n    // Exact match gets highest score\r\n    if (normalized1 === normalized2) {\r\n      return 1.0;\r\n    }\r\n\r\n    // Check for exact prefix match (e.g., \"wrvu_p50\" vs \"wrvu_p90\" should NOT match)\r\n    const prefix1 = normalized1.replace(/[0-9]/g, '');\r\n    const prefix2 = normalized2.replace(/[0-9]/g, '');\r\n    \r\n    // If prefixes don't match, return very low similarity\r\n    if (prefix1 !== prefix2) {\r\n      return 0.1;\r\n    }\r\n\r\n    // For same prefix, check if numbers are different (e.g., p50 vs p90)\r\n    const numbers1 = normalized1.match(/[0-9]+/g) || [];\r\n    const numbers2 = normalized2.match(/[0-9]+/g) || [];\r\n    \r\n    // If numbers are different, this is likely a different metric (p50 vs p90, p25 vs p75, etc.)\r\n    if (numbers1.length > 0 && numbers2.length > 0) {\r\n      const hasDifferentNumbers = numbers1.some(n1 => \r\n        numbers2.some(n2 => n1 !== n2)\r\n      );\r\n      if (hasDifferentNumbers) {\r\n        console.log(`Different numbers detected: \"${name1}\" vs \"${name2}\" - returning 0.2 similarity`);\r\n        return 0.2; // Very low similarity for different percentiles/metrics\r\n      }\r\n    }\r\n\r\n    // Calculate Levenshtein distance for remaining cases\r\n    const distance = this.levenshteinDistance(normalized1, normalized2);\r\n    const maxLength = Math.max(normalized1.length, normalized2.length);\r\n    let similarity = 1 - distance / maxLength;\r\n\r\n    // Consider data type if enabled\r\n    if (config.includeDataTypeMatching) {\r\n      const typeMatch = type1 === type2;\r\n      similarity = typeMatch ? similarity : similarity * 0.8;\r\n    }\r\n\r\n    console.log(`Similarity calculation: \"${name1}\" vs \"${name2}\" = ${similarity}`);\r\n    return similarity;\r\n  }\r\n\r\n  private levenshteinDistance(str1: string, str2: string): number {\r\n    const m = str1.length;\r\n    const n = str2.length;\r\n    const dp: number[][] = Array(m + 1).fill(0).map(() => Array(n + 1).fill(0));\r\n\r\n    for (let i = 0; i <= m; i++) dp[i][0] = i;\r\n    for (let j = 0; j <= n; j++) dp[0][j] = j;\r\n\r\n    for (let i = 1; i <= m; i++) {\r\n      for (let j = 1; j <= n; j++) {\r\n        if (str1[i - 1] === str2[j - 1]) {\r\n          dp[i][j] = dp[i - 1][j - 1];\r\n        } else {\r\n          dp[i][j] = 1 + Math.min(\r\n            dp[i - 1][j],     // deletion\r\n            dp[i][j - 1],     // insertion\r\n            dp[i - 1][j - 1]  // substitution\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    return dp[m][n];\r\n  }\r\n\r\n  private generateStandardizedName(columns: IColumnInfo[]): string {\r\n    // Use the shortest name as the base for standardization\r\n    const shortestName = columns\r\n      .map(c => c.name)\r\n      .reduce((a, b) => a.length <= b.length ? a : b);\r\n\r\n    // Clean up the name\r\n    return shortestName\r\n      .replace(/[^a-zA-Z0-9\\s]/g, ' ')  // Replace special chars with space\r\n      .replace(/\\s+/g, ' ')             // Replace multiple spaces with single space\r\n      .trim();\r\n  }\r\n\r\n  async getUnmappedColumns(): Promise<IColumnInfo[]> {\r\n    const mappings = await this.getAllMappings();\r\n    console.log('Current mappings count:', mappings.length);\r\n    \r\n    // Create a set of mapped column names by survey source\r\n    const mappedColumns = new Set<string>();\r\n    mappings.forEach(mapping => {\r\n      mapping.sourceColumns.forEach(column => {\r\n        // Use name + surveySource as the unique identifier\r\n        const key = `${column.name}-${column.surveySource}`;\r\n        mappedColumns.add(key);\r\n        console.log('Mapped column key:', key);\r\n      });\r\n    });\r\n\r\n    // Prefer backend source of truth so every uploaded survey appears\r\n    const backend = (await import('./BackendService')).default.getInstance();\r\n    const surveys = await backend.getAllSurveys();\r\n    const columns: IColumnInfo[] = [];\r\n\r\n    for (const survey of surveys as Array<any>) {\r\n      const meta = await backend.getSurveyMeta(survey.id).catch(() => ({} as any));\r\n      const headers: string[] = Array.isArray(meta?.columns) && meta.columns.length > 0\r\n        ? meta.columns\r\n        : [];\r\n      headers.forEach((header: string, index: number) => {\r\n        const columnName = String(header || '').trim();\r\n        const surveySource = survey.type || survey.name || 'Unknown';\r\n        const uniqueKey = `${columnName}-${surveySource}`;\r\n        \r\n        if (!mappedColumns.has(uniqueKey)) {\r\n          columns.push({\r\n            id: `${surveySource}-${columnName}-${index}`, // Use consistent ID based on source and name\r\n            name: columnName,\r\n            surveySource: surveySource,\r\n            dataType: 'string'\r\n          });\r\n        } else {\r\n          console.log('Column already mapped:', uniqueKey);\r\n        }\r\n      });\r\n    }\r\n\r\n    console.log('Total unmapped columns found:', columns.length);\r\n    return columns;\r\n  }\r\n\r\n  private inferDataType(fileContent: string, columnIndex: number): string {\r\n    const lines = fileContent.split('\\n').slice(1, 6); // Check first 5 rows\r\n    const values = lines.map(line => line.split(',')[columnIndex]?.trim());\r\n    \r\n    // Check if all values are numbers\r\n    if (values.every(v => !isNaN(Number(v)))) {\r\n      return 'number';\r\n    }\r\n    // Check if all values match date format\r\n    if (values.every(v => !isNaN(Date.parse(v)))) {\r\n      return 'date';\r\n    }\r\n    // Default to string\r\n    return 'string';\r\n  }\r\n} ","import * as React from \"react\";\nfunction ChevronDownIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m19.5 8.25-7.5 7.5-7.5-7.5\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ChevronDownIcon);\nexport default ForwardRef;","import React from 'react';\r\nimport { cn } from '../../utils/cn';\r\n\r\ninterface LoadingSpinnerProps {\r\n  message?: string;\r\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\r\n  variant?: 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'error';\r\n  fullScreen?: boolean;\r\n  overlay?: boolean;\r\n  className?: string;\r\n}\r\n\r\nconst LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ \r\n  message = 'Loading...', \r\n  size = 'md',\r\n  variant = 'primary',\r\n  fullScreen = false,\r\n  overlay = false,\r\n  className\r\n}) => {\r\n  const sizeClasses = {\r\n    xs: 'w-4 h-4',\r\n    sm: 'w-6 h-6', \r\n    md: 'w-8 h-8',\r\n    lg: 'w-12 h-12',\r\n    xl: 'w-16 h-16'\r\n  };\r\n\r\n  const variantClasses = {\r\n    default: 'text-gray-600',\r\n    primary: 'text-indigo-600',\r\n    secondary: 'text-gray-500',\r\n    success: 'text-emerald-600',\r\n    warning: 'text-amber-600',\r\n    error: 'text-red-600'\r\n  };\r\n\r\n  const spinnerSize = sizeClasses[size];\r\n  const spinnerColor = variantClasses[variant];\r\n\r\n  const SpinnerIcon = () => (\r\n    <svg \r\n      className={cn(\r\n        'animate-spin',\r\n        spinnerSize,\r\n        spinnerColor,\r\n        'inline-block'\r\n      )}\r\n      xmlns=\"http://www.w3.org/2000/svg\" \r\n      fill=\"none\" \r\n      viewBox=\"0 0 24 24\"\r\n    >\r\n      <circle \r\n        className=\"opacity-25\" \r\n        cx=\"12\" \r\n        cy=\"12\" \r\n        r=\"10\" \r\n        stroke=\"currentColor\" \r\n        strokeWidth=\"4\"\r\n      />\r\n      <path \r\n        className=\"opacity-75\" \r\n        fill=\"currentColor\" \r\n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\r\n      />\r\n    </svg>\r\n  );\r\n\r\n  const content = (\r\n    <div className={cn(\r\n      'flex flex-col items-center justify-center gap-3',\r\n      fullScreen ? 'min-h-screen' : 'min-h-[200px]',\r\n      className\r\n    )}>\r\n      <SpinnerIcon />\r\n      {message && (\r\n        <p className={cn(\r\n          'text-sm font-medium text-center',\r\n          variant === 'default' ? 'text-gray-600' : 'text-gray-700'\r\n        )}>\r\n          {message}\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  if (overlay) {\r\n    return (\r\n      <div className=\"fixed inset-0 flex items-center justify-center bg-white/90 backdrop-blur-sm z-50\">\r\n        {content}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return content;\r\n};\r\n\r\n// Button loading spinner for inline use\r\nexport const ButtonSpinner: React.FC<{ size?: 'sm' | 'md' }> = ({ size = 'md' }) => {\r\n  const sizeClasses = {\r\n    sm: 'w-4 h-4',\r\n    md: 'w-5 h-5'\r\n  };\r\n\r\n  return (\r\n    <svg \r\n      className={cn(\r\n        'animate-spin text-current',\r\n        sizeClasses[size]\r\n      )}\r\n      xmlns=\"http://www.w3.org/2000/svg\" \r\n      fill=\"none\" \r\n      viewBox=\"0 0 24 24\"\r\n    >\r\n      <circle \r\n        className=\"opacity-25\" \r\n        cx=\"12\" \r\n        cy=\"12\" \r\n        r=\"10\" \r\n        stroke=\"currentColor\" \r\n        strokeWidth=\"4\"\r\n      />\r\n      <path \r\n        className=\"opacity-75\" \r\n        fill=\"currentColor\" \r\n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\r\n      />\r\n    </svg>\r\n  );\r\n};\r\n\r\n// Page loading spinner for full page loads\r\nexport const PageSpinner: React.FC<{ message?: string }> = ({ message = 'Loading page...' }) => (\r\n  <LoadingSpinner \r\n    message={message}\r\n    size=\"lg\"\r\n    variant=\"primary\"\r\n    fullScreen={true}\r\n  />\r\n);\r\n\r\n// Inline loading spinner for small areas\r\nexport const InlineSpinner: React.FC<{ message?: string; size?: 'sm' | 'md' }> = ({ \r\n  message, \r\n  size = 'md' \r\n}) => (\r\n  <LoadingSpinner \r\n    message={message}\r\n    size={size}\r\n    variant=\"default\"\r\n    className=\"py-8\"\r\n  />\r\n);\r\n\r\n// Overlay loading spinner for modal/overlay contexts\r\nexport const OverlaySpinner: React.FC<{ message?: string }> = ({ message = 'Processing...' }) => (\r\n  <LoadingSpinner \r\n    message={message}\r\n    size=\"md\"\r\n    variant=\"primary\"\r\n    overlay={true}\r\n  />\r\n);\r\n\r\nexport default LoadingSpinner;\r\n","import * as React from \"react\";\nfunction BoltIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m3.75 13.5 10.5-11.25L12 10.5h8.25L9.75 21.75 12 13.5H3.75Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(BoltIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction MagnifyingGlassIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(MagnifyingGlassIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction PlusIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M12 4.5v15m7.5-7.5h-15\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(PlusIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction TrashIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(TrashIcon);\nexport default ForwardRef;"],"names":["ArrowPathIcon","_ref","svgRef","title","titleId","props","_objectWithoutProperties","_excluded","React","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","ref","id","strokeLinecap","strokeLinejoin","d","MappedColumns","lazy","then","module","default","AutoMapDialog","ColumnCard","column","isSelected","onSelect","_jsxs","onClick","className","concat","children","_jsx","name","dataType","TabContent","_ref2","activeTab","searchTerm","setSearchTerm","columnsBySurvey","selectedColumns","handleColumnSelect","mappings","mappedSearchTerm","setMappedSearchTerm","handleDelete","searchComponents","useMemo","unmapped","SearchIcon","type","placeholder","value","onChange","e","target","mapped","Array","from","entries","map","_ref3","surveySource","columns","length","some","c","Suspense","fallback","filter","mapping","standardizedName","toLowerCase","includes","sourceColumns","col","onDelete","displayName","ColumnMapping","setMappings","useState","unmappedColumns","setUnmappedColumns","setSelectedColumns","loading","setLoading","error","setError","setActiveTab","isAutoMapOpen","setIsAutoMapOpen","showHelp","setShowHelp","mappingService","ColumnMappingService","LocalStorageService","useEffect","loadData","async","mappingsData","unmappedData","Promise","all","getAllMappings","getUnmappedColumns","err","console","filteredUnmapped","grouped","Map","forEach","current","get","set","LoadingSpinner","message","fullScreen","size","ChevronDownIcon","ChevronRightIcon","LightBulbIcon","disabled","RefreshIcon","BoltIcon","prompt","createMapping","AddIcon","window","confirm","log","clearAllMappings","DeleteSweepIcon","fillRule","clipRule","key","label","tab","prev","deleteMapping","mappingId","description","onClose","onAutoMap","resolve","setTimeout","constructor","storage","MAPPINGS_KEY","LEARNED_MAPPINGS_KEY","this","payload","res","fetch","method","headers","body","JSON","stringify","json","ok","Error","_unused","response","status","statusText","result","saveMappings","_mappings","autoMapColumns","config","suggestions","processedColumns","Set","has","matches","similarity","calculateSimilarity","match","confidenceThreshold","sort","a","b","matchedColumns","m","add","push","generateStandardizedName","confidence","s","name1","name2","type1","type2","normalized1","replace","normalized2","numbers1","numbers2","n1","n2","levenshteinDistance","Math","max","includeDataTypeMatching","str1","str2","n","dp","i","j","min","reduce","trim","mappedColumns","backend","getInstance","surveys","getAllSurveys","survey","meta","getSurveyMeta","catch","isArray","header","index","columnName","String","uniqueKey","inferDataType","fileContent","columnIndex","values","split","slice","line","_line$split$columnInd","every","v","isNaN","Number","Date","parse","variant","overlay","spinnerSize","xs","sm","md","lg","xl","spinnerColor","primary","secondary","success","warning","SpinnerIcon","cn","cx","cy","r","content","ButtonSpinner","MagnifyingGlassIcon","PlusIcon","TrashIcon"],"sourceRoot":""}