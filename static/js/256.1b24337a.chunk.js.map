{"version":3,"file":"static/js/256.1b24337a.chunk.js","mappings":"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","sources":["services/BackendService.ts"],"sourcesContent":["import { \n  ISurveyData, \n  ISurveyRow \n} from '../types/survey';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\nclass BackendService {\n  private static instance: BackendService;\n\n  private constructor() {}\n\n  public static getInstance(): BackendService {\n    if (!BackendService.instance) {\n      BackendService.instance = new BackendService();\n    }\n    return BackendService.instance;\n  }\n\n  // Get survey metadata (includes original columns list)\n  public async getSurveyMeta(surveyId: string): Promise<{ columns?: string[] }> {\n    const response = await fetch(`${API_BASE_URL}/survey/${surveyId}/meta`);\n    if (!response.ok) throw new Error('Failed to fetch survey metadata');\n    return await response.json();\n  }\n\n  // Upload a survey file\n  public async uploadSurvey(\n    file: File,\n    surveyName: string,\n    surveyYear: number,\n    surveyType: string,\n    onProgress?: (percent: number) => void\n  ): Promise<{ surveyId: string; rowCount: number }> {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('name', surveyName);\n    formData.append('year', surveyYear.toString());\n    formData.append('type', surveyType);\n\n    // Use XHR to report real upload progress\n    const xhr = new XMLHttpRequest();\n    const promise = new Promise<{ surveyId: string; rowCount: number }>((resolve, reject) => {\n      xhr.open('POST', `${API_BASE_URL}/upload`);\n      xhr.onload = () => {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          try {\n            const result = JSON.parse(xhr.responseText);\n            resolve({ surveyId: result.surveyId, rowCount: result.rowCount });\n          } catch (err) {\n            reject(new Error('Invalid server response'));\n          }\n        } else {\n          reject(new Error(`Upload failed: ${xhr.status} ${xhr.statusText}`));\n        }\n      };\n      xhr.onerror = () => reject(new Error('Network error during upload'));\n      xhr.upload.onprogress = (event) => {\n        if (!onProgress || !event.lengthComputable) return;\n        const percent = Math.round((event.loaded / event.total) * 100);\n        onProgress(percent);\n      };\n      xhr.send(formData);\n    });\n\n    return promise;\n  }\n\n  // Get all surveys\n  public async getAllSurveys(): Promise<ISurveyData[]> {\n    const response = await fetch(`${API_BASE_URL}/surveys`);\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch surveys');\n    }\n\n    const surveys = await response.json();\n    \n    // Transform backend format to frontend format\n    return surveys.map((survey: any) => ({\n      id: survey.id,\n      name: survey.name,\n      year: survey.year.toString(),\n      type: survey.type,\n      uploadDate: survey.uploadDate,\n      rowCount: survey.rowCount ?? survey.row_count ?? 0,\n      specialtyCount: survey.specialtyCount ?? survey.specialty_count ?? 0,\n      dataPoints: survey.dataPoints ?? survey.data_points ?? 0,\n      colorAccent: survey.colorAccent || '#6366F1',\n      metadata: survey.metadata\n    }));\n  }\n\n  // Get survey data with filters\n  // CRITICAL: Always pass options.limit for large datasets to avoid missing data\n  // See docs/ALLERGY_IMMUNOLOGY_FIX.md for details on the 100-row default limit issue\n  public async getSurveyData(\n    surveyId: string,\n    filters?: {\n      specialty?: string;\n      providerType?: string;\n      region?: string;\n    },\n    options?: { page?: number; limit?: number }\n  ): Promise<{ rows: ISurveyRow[]; pagination?: { page: number; limit: number; total: number; pages: number } }>{\n    const params = new URLSearchParams();\n    if (filters?.specialty) params.append('specialty', filters.specialty);\n    if (filters?.providerType) params.append('providerType', filters.providerType);\n    if (filters?.region) params.append('region', filters.region);\n    if (options?.page) params.append('page', String(options.page));\n    if (options?.limit) params.append('limit', String(options.limit));\n\n    const response = await fetch(`${API_BASE_URL}/survey/${surveyId}/data?${params.toString()}`);\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch survey data');\n    }\n\n    const data = await response.json();\n    \n    // Transform backend format to frontend format\n    // Backend returns { data: [...], pagination: {...} }\n    const surveyData = data.data || data;\n    // Keep all keys so the grid can render every original column.\n    const rows = surveyData.map((row: any) => ({ ...row }));\n    const pagination = data.pagination\n      ? {\n          page: Number(data.pagination.page) || 1,\n          limit: Number(data.pagination.limit) || rows.length,\n          total: Number(data.pagination.total) || rows.length,\n          pages: Number(data.pagination.pages) || 1,\n        }\n      : undefined;\n    return { rows, pagination };\n  }\n\n  // Get available filters\n  public async getAvailableFiltersForSurvey(surveyId: string): Promise<{\n    specialties: string[];\n    providerTypes: string[];\n    regions: string[];\n  }> {\n    const response = await fetch(`${API_BASE_URL}/survey/${surveyId}/filters`);\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch filters');\n    }\n\n    return await response.json();\n  }\n\n  // Delete a survey\n  public async deleteSurvey(surveyId: string): Promise<void> {\n    const response = await fetch(`${API_BASE_URL}/survey/${surveyId}`, {\n      method: 'DELETE',\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to delete survey');\n    }\n  }\n\n  // Delete all surveys\n  public async deleteAllSurveys(): Promise<void> {\n    const response = await fetch(`${API_BASE_URL}/surveys`, { method: 'DELETE' });\n    if (!response.ok) throw new Error('Failed to delete all surveys');\n  }\n\n  // Export survey data\n  public async exportSurveyData(\n    surveyId: string,\n    format: 'csv' | 'json' = 'csv'\n  ): Promise<Blob> {\n    const response = await fetch(`${API_BASE_URL}/survey/${surveyId}/export?format=${format}`);\n    \n    if (!response.ok) {\n      throw new Error('Failed to export survey data');\n    }\n\n    return await response.blob();\n  }\n\n  // Health check\n  public async healthCheck(): Promise<boolean> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/health`);\n      return response.ok;\n    } catch {\n      return false;\n    }\n  }\n}\n\nexport default BackendService;\n"],"names":["API_BASE_URL","process","REACT_APP_API_URL","BackendService","constructor","getInstance","instance","getSurveyMeta","surveyId","response","fetch","concat","ok","Error","json","uploadSurvey","file","surveyName","surveyYear","surveyType","onProgress","formData","FormData","append","toString","xhr","XMLHttpRequest","Promise","resolve","reject","open","onload","status","result","JSON","parse","responseText","rowCount","err","statusText","onerror","upload","onprogress","event","lengthComputable","percent","Math","round","loaded","total","send","getAllSurveys","map","survey","_ref","_survey$rowCount","_ref2","_survey$specialtyCoun","_ref3","_survey$dataPoints","id","name","year","type","uploadDate","row_count","specialtyCount","specialty_count","dataPoints","data_points","colorAccent","metadata","getSurveyData","filters","options","params","URLSearchParams","specialty","providerType","region","page","String","limit","data","rows","row","_objectSpread","pagination","Number","length","pages","undefined","getAvailableFiltersForSurvey","deleteSurvey","method","deleteAllSurveys","exportSurveyData","format","arguments","blob","healthCheck","_unused"],"sourceRoot":""}