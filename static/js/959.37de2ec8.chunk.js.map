{"version":3,"file":"static/js/959.37de2ec8.chunk.js","mappings":"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","sources":["services/ColumnMappingService.ts","components/SurveyAnalytics.tsx","components/ui/loading-spinner.tsx"],"sourcesContent":["import { LocalStorageService } from './StorageService';\r\nimport BackendService from './BackendService';\r\nimport { IColumnMapping, IColumnInfo, IAutoMappingConfig } from '../types/column';\r\n\r\nexport class ColumnMappingService {\r\n  private readonly MAPPINGS_KEY = 'column_mappings';\r\n  private readonly LEARNED_MAPPINGS_KEY = 'learned-column-mappings';\r\n  private storage: LocalStorageService;\r\n\r\n  constructor(storage: LocalStorageService) {\r\n    this.storage = storage;\r\n  }\r\n\r\n  async createMapping(standardizedName: string, sourceColumns: IColumnInfo[]): Promise<IColumnMapping> {\r\n    const payload = { standardizedName, sourceColumns };\r\n    const res = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:3001/api'}/mappings/column`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(payload)\r\n    });\r\n    const saved = await res.json();\r\n    return saved as IColumnMapping;\r\n  }\r\n\r\n  async getAllMappings(): Promise<IColumnMapping[]> {\r\n    try {\r\n      const res = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:3001/api'}/mappings/column`);\r\n      if (!res.ok) throw new Error('Failed to fetch');\r\n      const data = await res.json();\r\n      return data as IColumnMapping[];\r\n    } catch {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async deleteMapping(mappingId: string): Promise<void> {\r\n    await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:3001/api'}/mappings/column/${mappingId}`, { method: 'DELETE' });\r\n  }\r\n\r\n  async clearAllMappings(): Promise<void> {\r\n    console.log('Clearing all column mappings from database...');\r\n    const response = await fetch(`${process.env.REACT_APP_API_URL || 'http://localhost:3001/api'}/mappings/column`, { method: 'DELETE' });\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to clear mappings: ${response.status} ${response.statusText}`);\r\n    }\r\n    const result = await response.json();\r\n    console.log('Clear all mappings result:', result);\r\n  }\r\n\r\n  private async saveMappings(_mappings: IColumnMapping[]): Promise<void> {}\r\n\r\n  async autoMapColumns(config: IAutoMappingConfig): Promise<Array<{\r\n    standardizedName: string;\r\n    columns: IColumnInfo[];\r\n    confidence: number;\r\n  }>> {\r\n    const unmappedColumns = await this.getUnmappedColumns();\r\n    console.log('Auto-mapping columns:', unmappedColumns.map(c => c.name));\r\n    \r\n    const suggestions: Array<{\r\n      standardizedName: string;\r\n      columns: IColumnInfo[];\r\n      confidence: number;\r\n    }> = [];\r\n\r\n    // Group columns by similarity\r\n    const processedColumns = new Set<string>();\r\n    \r\n    for (const column of unmappedColumns) {\r\n      if (processedColumns.has(column.id)) continue;\r\n\r\n      const matches = unmappedColumns\r\n        .filter((c: IColumnInfo) => !processedColumns.has(c.id))\r\n        .map((c: IColumnInfo) => ({\r\n          column: c,\r\n          similarity: this.calculateSimilarity(column.name, c.name, c.dataType, column.dataType, config)\r\n        }))\r\n        .filter(match => {\r\n          console.log(`Similarity between \"${column.name}\" and \"${match.column.name}\": ${match.similarity}`);\r\n          return match.similarity >= config.confidenceThreshold;\r\n        })\r\n        .sort((a, b) => b.similarity - a.similarity);\r\n\r\n      if (matches.length > 0) {\r\n        const matchedColumns = matches.map(m => m.column);\r\n        matchedColumns.forEach(c => processedColumns.add(c.id));\r\n\r\n        console.log(`Creating mapping for \"${column.name}\" with ${matchedColumns.length} columns:`, \r\n          matchedColumns.map(c => c.name));\r\n\r\n        suggestions.push({\r\n          standardizedName: this.generateStandardizedName(matchedColumns),\r\n          columns: matchedColumns,\r\n          confidence: matches[0].similarity\r\n        });\r\n      }\r\n    }\r\n\r\n    console.log('Final auto-mapping suggestions:', suggestions.map(s => ({\r\n      name: s.standardizedName,\r\n      columns: s.columns.map(c => c.name),\r\n      confidence: s.confidence\r\n    })));\r\n\r\n    return suggestions.sort((a, b) => b.confidence - a.confidence);\r\n  }\r\n\r\n  private calculateSimilarity(name1: string, name2: string, type1: string, type2: string, config: IAutoMappingConfig): number {\r\n    // Normalize names\r\n    const normalized1 = name1.toLowerCase().replace(/[^a-z0-9]/g, '');\r\n    const normalized2 = name2.toLowerCase().replace(/[^a-z0-9]/g, '');\r\n\r\n    // Exact match gets highest score\r\n    if (normalized1 === normalized2) {\r\n      return 1.0;\r\n    }\r\n\r\n    // Check for exact prefix match (e.g., \"wrvu_p50\" vs \"wrvu_p90\" should NOT match)\r\n    const prefix1 = normalized1.replace(/[0-9]/g, '');\r\n    const prefix2 = normalized2.replace(/[0-9]/g, '');\r\n    \r\n    // If prefixes don't match, return very low similarity\r\n    if (prefix1 !== prefix2) {\r\n      return 0.1;\r\n    }\r\n\r\n    // For same prefix, check if numbers are different (e.g., p50 vs p90)\r\n    const numbers1 = normalized1.match(/[0-9]+/g) || [];\r\n    const numbers2 = normalized2.match(/[0-9]+/g) || [];\r\n    \r\n    // If numbers are different, this is likely a different metric (p50 vs p90, p25 vs p75, etc.)\r\n    if (numbers1.length > 0 && numbers2.length > 0) {\r\n      const hasDifferentNumbers = numbers1.some(n1 => \r\n        numbers2.some(n2 => n1 !== n2)\r\n      );\r\n      if (hasDifferentNumbers) {\r\n        console.log(`Different numbers detected: \"${name1}\" vs \"${name2}\" - returning 0.2 similarity`);\r\n        return 0.2; // Very low similarity for different percentiles/metrics\r\n      }\r\n    }\r\n\r\n    // Calculate Levenshtein distance for remaining cases\r\n    const distance = this.levenshteinDistance(normalized1, normalized2);\r\n    const maxLength = Math.max(normalized1.length, normalized2.length);\r\n    let similarity = 1 - distance / maxLength;\r\n\r\n    // Consider data type if enabled\r\n    if (config.includeDataTypeMatching) {\r\n      const typeMatch = type1 === type2;\r\n      similarity = typeMatch ? similarity : similarity * 0.8;\r\n    }\r\n\r\n    console.log(`Similarity calculation: \"${name1}\" vs \"${name2}\" = ${similarity}`);\r\n    return similarity;\r\n  }\r\n\r\n  private levenshteinDistance(str1: string, str2: string): number {\r\n    const m = str1.length;\r\n    const n = str2.length;\r\n    const dp: number[][] = Array(m + 1).fill(0).map(() => Array(n + 1).fill(0));\r\n\r\n    for (let i = 0; i <= m; i++) dp[i][0] = i;\r\n    for (let j = 0; j <= n; j++) dp[0][j] = j;\r\n\r\n    for (let i = 1; i <= m; i++) {\r\n      for (let j = 1; j <= n; j++) {\r\n        if (str1[i - 1] === str2[j - 1]) {\r\n          dp[i][j] = dp[i - 1][j - 1];\r\n        } else {\r\n          dp[i][j] = 1 + Math.min(\r\n            dp[i - 1][j],     // deletion\r\n            dp[i][j - 1],     // insertion\r\n            dp[i - 1][j - 1]  // substitution\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    return dp[m][n];\r\n  }\r\n\r\n  private generateStandardizedName(columns: IColumnInfo[]): string {\r\n    // Use the shortest name as the base for standardization\r\n    const shortestName = columns\r\n      .map(c => c.name)\r\n      .reduce((a, b) => a.length <= b.length ? a : b);\r\n\r\n    // Clean up the name\r\n    return shortestName\r\n      .replace(/[^a-zA-Z0-9\\s]/g, ' ')  // Replace special chars with space\r\n      .replace(/\\s+/g, ' ')             // Replace multiple spaces with single space\r\n      .trim();\r\n  }\r\n\r\n  async getUnmappedColumns(): Promise<IColumnInfo[]> {\r\n    const mappings = await this.getAllMappings();\r\n    console.log('Current mappings count:', mappings.length);\r\n    \r\n    // Create a set of mapped column names by survey source\r\n    const mappedColumns = new Set<string>();\r\n    mappings.forEach(mapping => {\r\n      mapping.sourceColumns.forEach(column => {\r\n        // Use name + surveySource as the unique identifier\r\n        const key = `${column.name}-${column.surveySource}`;\r\n        mappedColumns.add(key);\r\n        console.log('Mapped column key:', key);\r\n      });\r\n    });\r\n\r\n    // Prefer backend source of truth so every uploaded survey appears\r\n    const backend = (await import('./BackendService')).default.getInstance();\r\n    const surveys = await backend.getAllSurveys();\r\n    const columns: IColumnInfo[] = [];\r\n\r\n    for (const survey of surveys as Array<any>) {\r\n      const meta = await backend.getSurveyMeta(survey.id).catch(() => ({} as any));\r\n      const headers: string[] = Array.isArray(meta?.columns) && meta.columns.length > 0\r\n        ? meta.columns\r\n        : [];\r\n      headers.forEach((header: string, index: number) => {\r\n        const columnName = String(header || '').trim();\r\n        const surveySource = survey.type || survey.name || 'Unknown';\r\n        const uniqueKey = `${columnName}-${surveySource}`;\r\n        \r\n        if (!mappedColumns.has(uniqueKey)) {\r\n          columns.push({\r\n            id: `${surveySource}-${columnName}-${index}`, // Use consistent ID based on source and name\r\n            name: columnName,\r\n            surveySource: surveySource,\r\n            dataType: 'string'\r\n          });\r\n        } else {\r\n          console.log('Column already mapped:', uniqueKey);\r\n        }\r\n      });\r\n    }\r\n\r\n    console.log('Total unmapped columns found:', columns.length);\r\n    return columns;\r\n  }\r\n\r\n  private inferDataType(fileContent: string, columnIndex: number): string {\r\n    const lines = fileContent.split('\\n').slice(1, 6); // Check first 5 rows\r\n    const values = lines.map(line => line.split(',')[columnIndex]?.trim());\r\n    \r\n    // Check if all values are numbers\r\n    if (values.every(v => !isNaN(Number(v)))) {\r\n      return 'number';\r\n    }\r\n    // Check if all values match date format\r\n    if (values.every(v => !isNaN(Date.parse(v)))) {\r\n      return 'date';\r\n    }\r\n    // Default to string\r\n    return 'string';\r\n  }\r\n} ","import React, { useEffect, useState, useMemo } from 'react';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Box,\r\n  Typography,\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Stack,\r\n} from '@mui/material';\r\nimport { \r\n  DocumentTextIcon\r\n} from '@heroicons/react/24/outline';\r\n\r\nimport { SpecialtyMappingService } from '../services/SpecialtyMappingService';\r\nimport { ColumnMappingService } from '../services/ColumnMappingService';\r\nimport { IStorageService, LocalStorageService } from '../services/StorageService';\r\nimport BackendService from '../services/BackendService';\r\nimport { ISurveyRow } from '../types/survey';\r\nimport { ISpecialtyMapping, ISourceSpecialty } from '../types/specialty';\r\nimport LoadingSpinner from './ui/loading-spinner';\r\nimport { ChevronDownIcon, CheckIcon } from '@heroicons/react/24/outline';\r\nconst SHOW_DEBUG = true;\r\n\r\ninterface AggregatedData {\r\n  standardizedName: string;\r\n  surveySource: string;\r\n  surveySpecialty: string;\r\n  geographicRegion: string;\r\n  n_orgs: number;\r\n  n_incumbents: number;\r\n  tcc_p25: number;\r\n  tcc_p50: number;\r\n  tcc_p75: number;\r\n  tcc_p90: number;\r\n  wrvu_p25: number;\r\n  wrvu_p50: number;\r\n  wrvu_p75: number;\r\n  wrvu_p90: number;\r\n  cf_p25: number;\r\n  cf_p50: number;\r\n  cf_p75: number;\r\n  cf_p90: number;\r\n}\r\n\r\n// Utility functions\r\nconst calculatePercentile = (numbers: number[], percentile: number): number => {\r\n  if (numbers.length === 0) return 0;\r\n  const sortedNumbers = numbers.sort((a, b) => a - b);\r\n  const index = Math.floor((percentile / 100) * sortedNumbers.length);\r\n  return sortedNumbers[index] || 0;\r\n};\r\n\r\nconst formatCurrency = (value: number, decimals: number = 0): string => {\r\n  return new Intl.NumberFormat('en-US', {\r\n    style: 'currency',\r\n    currency: 'USD',\r\n    minimumFractionDigits: decimals,\r\n    maximumFractionDigits: decimals,\r\n  }).format(value);\r\n};\r\n\r\nconst formatNumber = (value: number): string => {\r\n  return new Intl.NumberFormat('en-US', {\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2,\r\n  }).format(value);\r\n};\r\n\r\n// Add utility function for calculating weighted average\r\nconst calculateWeightedAverage = (values: number[], weights: number[]): number => {\r\n  if (values.length === 0 || values.length !== weights.length) return 0;\r\n  const sum = weights.reduce((acc, weight, index) => acc + weight * values[index], 0);\r\n  const weightSum = weights.reduce((acc, weight) => acc + weight, 0);\r\n  return weightSum === 0 ? 0 : sum / weightSum;\r\n};\r\n\r\n// Add utility function for calculating simple average\r\nconst calculateAverage = (values: number[]): number => {\r\n  if (values.length === 0) return 0;\r\n  return values.reduce((acc, val) => acc + val, 0) / values.length;\r\n};\r\n\r\n// Fuzzy matching function for specialty names (word-based, not letter-based)\r\nconst fuzzyMatchSpecialty = (specialty1: string, specialty2: string): boolean => {\r\n  const normalize = (str: string) => str.toLowerCase().replace(/[^a-z0-9]+/g, ' ').trim();\r\n  const norm1 = normalize(specialty1);\r\n  const norm2 = normalize(specialty2);\r\n\r\n  if (!norm1 || !norm2) return false;\r\n\r\n  // Exact or simple contains\r\n  if (norm1 === norm2) return true;\r\n  if (norm1.includes(norm2) || norm2.includes(norm1)) return true;\r\n\r\n  const words1 = norm1.split(/\\s+/).filter(w => w.length > 2);\r\n  const words2 = norm2.split(/\\s+/).filter(w => w.length > 2);\r\n  if (words1.length === 0 || words2.length === 0) return false;\r\n\r\n  const common = words1.filter(w => words2.includes(w));\r\n  const jaccard = common.length / new Set([...words1, ...words2]).size;\r\n\r\n  return jaccard >= 0.6 || common.length >= Math.min(words1.length, words2.length) * 0.8;\r\n};\r\n\r\n// Data transformation function that applies column mappings and specialty mappings\r\nconst transformSurveyData = (rawData: any[], columnMappings: any[], specialtyMappings: any[], surveySource: string): any[] => {\r\n  console.log('🔄 Transforming survey data with mappings:', {\r\n    rawDataLength: rawData.length,\r\n    columnMappingsCount: columnMappings.length,\r\n    specialtyMappingsCount: specialtyMappings.length,\r\n    surveySource\r\n  });\r\n  \r\n  console.log('🔍 First few raw specialties:', rawData.slice(0, 3).map(row => row.specialty));\r\n  \r\n  // Special debugging for SullivanCotter raw data\r\n  if (surveySource === 'SullivanCotter') {\r\n    const allergyRows = rawData.filter(row => \r\n      row.specialty && (row.specialty.toLowerCase().includes('allergy') || row.specialty.toLowerCase().includes('immunology'))\r\n    );\r\n    console.log('🔍 Found', allergyRows.length, 'Allergy & Immunology rows in SullivanCotter raw data');\r\n    if (allergyRows.length > 0) {\r\n      console.log('📋 Sample Allergy & Immunology rows:', allergyRows.slice(0, 3).map(row => row.specialty));\r\n    }\r\n  }\r\n\r\n  if (rawData.length === 0) return [];\r\n\r\n  // Create column mapping lookup for this survey source\r\n  const columnMappingLookup = new Map();\r\n  columnMappings.forEach(mapping => {\r\n    mapping.sourceColumns.forEach((column: any) => {\r\n      if (column.surveySource === surveySource) {\r\n        columnMappingLookup.set(column.name, mapping.standardizedName);\r\n      }\r\n    });\r\n  });\r\n\r\n  // Create specialty mapping lookup for this survey source\r\n  const specialtyMappingLookup = new Map();\r\n  specialtyMappings.forEach(mapping => {\r\n    mapping.sourceSpecialties.forEach((specialty: any) => {\r\n      if (specialty.surveySource === surveySource) {\r\n        specialtyMappingLookup.set(specialty.specialty.toLowerCase(), mapping.standardizedName);\r\n      }\r\n    });\r\n  });\r\n\r\n  console.log('📋 Column mapping lookup for', surveySource, ':', Object.fromEntries(columnMappingLookup));\r\n  console.log('📋 Specialty mapping lookup for', surveySource, ':', Object.fromEntries(specialtyMappingLookup));\r\n  \r\n  // Special debugging for SullivanCotter Allergy & Immunology\r\n  if (surveySource === 'SullivanCotter') {\r\n    console.log('🔍 Checking SullivanCotter specialty mappings for Allergy & Immunology...');\r\n    const allergyMappings = Array.from(specialtyMappingLookup.entries()).filter(([key, value]) => \r\n      key.includes('allergy') || key.includes('immunology') || value.includes('Allergy') || value.includes('Immunology')\r\n    );\r\n    console.log('📋 Allergy & Immunology mappings for SullivanCotter:', allergyMappings);\r\n  }\r\n  \r\n  // Debug: Show all available survey sources in mappings\r\n  const allSurveySources = new Set();\r\n  specialtyMappings.forEach(mapping => {\r\n    mapping.sourceSpecialties.forEach((specialty: any) => {\r\n      allSurveySources.add(specialty.surveySource);\r\n    });\r\n  });\r\n  console.log('📋 All available survey sources in mappings:', Array.from(allSurveySources));\r\n  console.log('🔍 Looking for survey source:', surveySource);\r\n  \r\n\r\n\r\n  return rawData.map(row => {\r\n    const transformedRow: any = {\r\n      surveySource,\r\n      specialty: row.specialty || row.normalizedSpecialty || '',\r\n      originalSpecialty: row.specialty || '', // Keep the original specialty name\r\n      // Carry through non-metric identity fields from common column names\r\n      providerType: (row as any).providerType || (row as any).provider_type || '',\r\n      geographicRegion: (row as any).geographicRegion || (row as any).geographic_region || '',\r\n      n_orgs: 0,\r\n      n_incumbents: 0,\r\n      tcc_p25: 0,\r\n      tcc_p50: 0,\r\n      tcc_p75: 0,\r\n      tcc_p90: 0,\r\n      wrvu_p25: 0,\r\n      wrvu_p50: 0,\r\n      wrvu_p75: 0,\r\n      wrvu_p90: 0,\r\n      cf_p25: 0,\r\n      cf_p50: 0,\r\n      cf_p75: 0,\r\n      cf_p90: 0,\r\n    };\r\n\r\n    // Apply specialty mapping\r\n    const originalSpecialty = String(row.specialty || '').toLowerCase();\r\n    let standardizedSpecialty = specialtyMappingLookup.get(originalSpecialty);\r\n    \r\n    // Special debugging for Allergy & Immunology\r\n    if (row.specialty && (row.specialty.toLowerCase().includes('allergy') || row.specialty.toLowerCase().includes('immunology'))) {\r\n      console.log(`🔍 Processing Allergy/Immunology specialty: \"${row.specialty}\" (normalized: \"${originalSpecialty}\")`);\r\n      console.log(`📋 Available mappings for ${surveySource}:`, Array.from(specialtyMappingLookup.entries()));\r\n      console.log(`🔍 Looking for mapping: \"${originalSpecialty}\"`);\r\n      console.log(`🔍 Found mapping: ${standardizedSpecialty || 'NOT FOUND'}`);\r\n    }\r\n    \r\n    // Debug: Log all specialties being processed\r\n    if (originalSpecialty && !standardizedSpecialty) {\r\n      console.log(`🔍 Processing specialty: \"${row.specialty}\" (normalized: \"${originalSpecialty}\")`);\r\n      console.log(`📋 Available mappings for ${surveySource}:`, Array.from(specialtyMappingLookup.entries()));\r\n    }\r\n    \r\n    // If no direct match, try fuzzy matching\r\n    if (!standardizedSpecialty) {\r\n      Array.from(specialtyMappingLookup.entries()).forEach(([key, value]) => {\r\n        if (fuzzyMatchSpecialty(originalSpecialty, key)) {\r\n          standardizedSpecialty = value;\r\n          console.log(`🔄 Fuzzy mapped specialty: \"${row.specialty}\" → \"${standardizedSpecialty}\" (matched \"${key}\")`);\r\n        }\r\n      });\r\n    }\r\n    \r\n    if (standardizedSpecialty) {\r\n      transformedRow.specialty = standardizedSpecialty;\r\n      transformedRow.originalSpecialty = row.specialty || ''; // Keep original for fallback matching\r\n      console.log(`✅ Mapped specialty: \"${row.specialty}\" → \"${standardizedSpecialty}\"`);\r\n    } else {\r\n      console.log(`❌ No mapping found for specialty: \"${row.specialty}\" (normalized: \"${originalSpecialty}\")`);\r\n      console.log('📋 Available mappings for this survey source:', Array.from(specialtyMappingLookup.entries()));\r\n      // Keep the original specialty if no mapping found\r\n      transformedRow.specialty = row.specialty || '';\r\n      transformedRow.originalSpecialty = row.specialty || '';\r\n    }\r\n\r\n    // Apply column mappings\r\n    Object.keys(row).forEach(originalColumn => {\r\n      const standardizedName = columnMappingLookup.get(originalColumn);\r\n      if (standardizedName) {\r\n        // Map the value to the standardized column name\r\n        const value = row[originalColumn];\r\n        \r\n        // Handle different metric types\r\n        if (standardizedName.toLowerCase().includes('tcc')) {\r\n          if (standardizedName.toLowerCase().includes('p25')) transformedRow.tcc_p25 = Number(value) || 0;\r\n          else if (standardizedName.toLowerCase().includes('p50')) transformedRow.tcc_p50 = Number(value) || 0;\r\n          else if (standardizedName.toLowerCase().includes('p75')) transformedRow.tcc_p75 = Number(value) || 0;\r\n          else if (standardizedName.toLowerCase().includes('p90')) transformedRow.tcc_p90 = Number(value) || 0;\r\n        } else if (standardizedName.toLowerCase().includes('wrvu')) {\r\n          if (standardizedName.toLowerCase().includes('p25')) transformedRow.wrvu_p25 = Number(value) || 0;\r\n          else if (standardizedName.toLowerCase().includes('p50')) transformedRow.wrvu_p50 = Number(value) || 0;\r\n          else if (standardizedName.toLowerCase().includes('p75')) transformedRow.wrvu_p75 = Number(value) || 0;\r\n          else if (standardizedName.toLowerCase().includes('p90')) transformedRow.wrvu_p90 = Number(value) || 0;\r\n        } else if (standardizedName.toLowerCase().includes('cf')) {\r\n          if (standardizedName.toLowerCase().includes('p25')) transformedRow.cf_p25 = Number(value) || 0;\r\n          else if (standardizedName.toLowerCase().includes('p50')) transformedRow.cf_p50 = Number(value) || 0;\r\n          else if (standardizedName.toLowerCase().includes('p75')) transformedRow.cf_p75 = Number(value) || 0;\r\n          else if (standardizedName.toLowerCase().includes('p90')) transformedRow.cf_p90 = Number(value) || 0;\r\n        } else if (standardizedName.toLowerCase().includes('orgs')) {\r\n          transformedRow.n_orgs = Number(value) || 0;\r\n        } else if (standardizedName.toLowerCase().includes('incumbents')) {\r\n          transformedRow.n_incumbents = Number(value) || 0;\r\n        }\r\n      }\r\n    });\r\n\r\n    return transformedRow;\r\n  });\r\n};\r\n\r\nconst SurveyAnalytics: React.FC = () => {\r\n  // Export functions\r\n  const exportToExcel = () => {\r\n    const headers = [\r\n      'Survey Source',\r\n      'Survey Specialty', \r\n      'Geographic Region',\r\n      '# Organizations',\r\n      '# Incumbents',\r\n      'TCC P25',\r\n      'TCC P50',\r\n      'TCC P75',\r\n      'TCC P90',\r\n      'wRVU P25',\r\n      'wRVU P50',\r\n      'wRVU P75',\r\n      'wRVU P90',\r\n      'CF P25',\r\n      'CF P50',\r\n      'CF P75',\r\n      'CF P90'\r\n    ];\r\n\r\n    const csvData = filteredData.map(row => [\r\n      row.surveySource,\r\n      row.surveySpecialty,\r\n      row.geographicRegion,\r\n      row.n_orgs,\r\n      row.n_incumbents,\r\n      row.tcc_p25,\r\n      row.tcc_p50,\r\n      row.tcc_p75,\r\n      row.tcc_p90,\r\n      row.wrvu_p25,\r\n      row.wrvu_p50,\r\n      row.wrvu_p75,\r\n      row.wrvu_p90,\r\n      row.cf_p25,\r\n      row.cf_p50,\r\n      row.cf_p75,\r\n      row.cf_p90\r\n    ]);\r\n\r\n    // Add headers\r\n    csvData.unshift(headers);\r\n\r\n    // Convert to CSV string\r\n    const csvContent = csvData\r\n      .map(row => row.map(cell => `\"${cell}\"`).join(','))\r\n      .join('\\n');\r\n\r\n    // Create and download file\r\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n    const link = document.createElement('a');\r\n    const url = URL.createObjectURL(blob);\r\n    link.setAttribute('href', url);\r\n    link.setAttribute('download', `survey-analytics-${new Date().toISOString().split('T')[0]}.csv`);\r\n    link.style.visibility = 'hidden';\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  const exportToCSV = () => {\r\n    exportToExcel(); // Same function for now\r\n  };\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [mappings, setMappings] = useState<ISpecialtyMapping[]>([]);\r\n  const [surveys, setSurveys] = useState<Record<string, ISurveyRow[]>>({});\r\n  const [filters, setFilters] = useState({\r\n    specialty: '',\r\n    providerType: '',\r\n    region: '',\r\n    surveySource: ''\r\n  });\r\n\r\n\r\n\r\n  const mappingService = useMemo(() => new SpecialtyMappingService(new LocalStorageService()), []);\r\n  const columnMappingService = useMemo(() => new ColumnMappingService(new LocalStorageService()), []);\r\n  const storageService = useMemo(() => new LocalStorageService(), []);\r\n  const backendService = useMemo(() => BackendService.getInstance(), []);\r\n\r\n  // Build chain map: standardizedName -> surveySource -> [source specialties]\r\n  const chainByStandardized = useMemo(() => {\r\n    const result = new Map<string, Map<string, string[]>>();\r\n    mappings.forEach(m => {\r\n      const bySource = new Map<string, string[]>();\r\n      m.sourceSpecialties.forEach(src => {\r\n        const list = bySource.get(src.surveySource) || [];\r\n        list.push(src.specialty);\r\n        bySource.set(src.surveySource, list);\r\n      });\r\n      result.set(m.standardizedName, bySource);\r\n    });\r\n    return result;\r\n  }, [mappings]);\r\n\r\n  // Survey counts by source for quick diagnostics\r\n  const surveyCountsBySource = useMemo(() => {\r\n    const counts = new Map<string, number>();\r\n    Object.values(surveys).forEach(rows => {\r\n      const source = String(rows[0]?.surveySource || 'unknown');\r\n      counts.set(source, (counts.get(source) || 0) + 1);\r\n    });\r\n    return counts;\r\n  }, [surveys]);\r\n\r\n  // Get unique values for filters\r\n  const uniqueValues = useMemo(() => {\r\n    const values = {\r\n      specialties: new Set<string>(),\r\n      providerTypes: new Set<string>(),\r\n      regions: new Set<string>(),\r\n      surveySources: new Set<string>()\r\n    };\r\n\r\n    // Get all standardized names from actual mappings (not just initial mappings)\r\n    mappings.forEach(mapping => {\r\n      if (mapping.standardizedName) {\r\n        values.specialties.add(mapping.standardizedName);\r\n        console.log('Added specialty from mapping:', mapping.standardizedName);\r\n      }\r\n    });\r\n\r\n    // Build cascading sets based on current selections (specialty/survey source)\r\n    console.log('Extracting unique values from surveys with cascading filters:', filters, Object.keys(surveys));\r\n\r\n    // Pre-compute selected mapping and source names per survey for specialty cascade\r\n    const selectedMapping = mappings.find(m => m.standardizedName === filters.specialty);\r\n    const sourceNamesBySurvey = new Map<string, string[]>();\r\n    if (selectedMapping) {\r\n      selectedMapping.sourceSpecialties.forEach(src => {\r\n        const list = sourceNamesBySurvey.get(src.surveySource) || [];\r\n        list.push(src.specialty);\r\n        sourceNamesBySurvey.set(src.surveySource, list);\r\n      });\r\n    }\r\n\r\n    Object.entries(surveys).forEach(([surveyId, surveyRows]) => {\r\n      console.log(`Processing survey ${surveyId} with ${surveyRows.length} rows`);\r\n      surveyRows.forEach(row => {\r\n        const surveySource = String(row.surveySource || '');\r\n        // Respect survey source filter\r\n        if (filters.surveySource && surveySource.toLowerCase() !== filters.surveySource.toLowerCase()) return;\r\n\r\n        // Respect specialty filter using standardized or source names\r\n        if (filters.specialty) {\r\n          const rowSpec = String(row.specialty || '');\r\n          const direct = rowSpec.toLowerCase() === filters.specialty.toLowerCase();\r\n          const srcList = sourceNamesBySurvey.get(surveySource) || [];\r\n          const viaSource = srcList.some(name => fuzzyMatchSpecialty(rowSpec, name));\r\n          if (!direct && !viaSource) return;\r\n        }\r\n\r\n        if (row.providerType) {\r\n          values.providerTypes.add(String(row.providerType));\r\n          console.log('Added provider type:', row.providerType);\r\n        }\r\n        const region = (row as any).geographicRegion || (row as any).geographic_region;\r\n        if (region) {\r\n          values.regions.add(String(region));\r\n          console.log('Added region:', region);\r\n        }\r\n        if (row.surveySource) {\r\n          values.surveySources.add(String(row.surveySource));\r\n          console.log('Added survey source:', row.surveySource);\r\n        }\r\n      });\r\n    });\r\n\r\n    console.log('Total specialties found:', values.specialties.size);\r\n    console.log('All specialties:', Array.from(values.specialties));\r\n    console.log('Total survey sources found:', values.surveySources.size);\r\n    console.log('All survey sources:', Array.from(values.surveySources));\r\n    console.log('Total provider types found:', values.providerTypes.size);\r\n    console.log('All provider types:', Array.from(values.providerTypes));\r\n    console.log('Total regions found:', values.regions.size);\r\n    console.log('All regions:', Array.from(values.regions));\r\n\r\n    return {\r\n      specialties: Array.from(values.specialties).sort(),\r\n      providerTypes: Array.from(values.providerTypes).sort(),\r\n      regions: Array.from(values.regions).sort(),\r\n      surveySources: Array.from(values.surveySources).sort()\r\n    };\r\n  }, [mappings, surveys]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setIsLoading(true);\r\n      try {\r\n        // Load specialty mappings from the actual service (not just initial mappings)\r\n        const allMappings = await mappingService.getAllMappings();\r\n        console.log('Loaded specialty mappings:', allMappings.length, 'mappings found');\r\n        console.log('Available standardized names:', allMappings.map(m => m.standardizedName));\r\n        \r\n\r\n        \r\n        setMappings(allMappings);\r\n\r\n        // Load column mappings\r\n        const columnMappings = await columnMappingService.getAllMappings();\r\n        console.log('Loaded column mappings:', columnMappings.length, 'mappings found');\r\n\r\n        // Then get survey data from backend\r\n        const uploadedSurveys = await backendService.getAllSurveys();\r\n        console.log('📊 Found surveys:', uploadedSurveys.map(s => ({\r\n          id: s.id,\r\n          type: (s as any).type,\r\n          totalRows: (s as any).rowCount,\r\n          fileName: (s as any).fileName,\r\n          uploadDate: (s as any).uploadDate\r\n        })));\r\n        \r\n        if (uploadedSurveys.length === 0) {\r\n          console.error('❌ No surveys found! This is the problem.');\r\n          setError('No surveys found. Please upload some survey data first.');\r\n          return;\r\n        }\r\n        \r\n        const surveyData: Record<string, ISurveyRow[]> = {};\r\n        \r\n        for (const survey of uploadedSurveys) {\r\n          try {\r\n            const surveyType = (survey as any).type;\r\n            console.log(`🔍 Loading data for survey ${survey.id} (${surveyType})`);\r\n            // CRITICAL: Request sufficient rows to get all data, including specialties that appear later in the dataset\r\n        // See docs/ALLERGY_IMMUNOLOGY_FIX.md for details on why this is necessary\r\n        const data = await backendService.getSurveyData(survey.id, undefined, { limit: 10000 }); // Request up to 10,000 rows to get all data\r\n            if (data && data.rows) {\r\n              // Log the column names from the first row\r\n              if (data.rows.length > 0) {\r\n                console.log('📋 Available columns:', Object.keys(data.rows[0]));\r\n              }\r\n\r\n\r\n\r\n              // Apply column mappings to transform the data\r\n              console.log(`🔄 Transforming ${data.rows.length} rows for survey ${survey.id} (${surveyType})`);\r\n              console.log('📋 Available column mappings:', columnMappings.map(m => ({\r\n                standardizedName: m.standardizedName,\r\n                sourceColumns: m.sourceColumns.map(c => `${c.name} (${c.surveySource})`)\r\n              })));\r\n              \r\n\r\n              \r\n              console.log(`🔄 About to transform ${data.rows.length} rows for survey ${survey.id} (${surveyType})`);\r\n              const transformedRows = transformSurveyData(data.rows, columnMappings, allMappings, surveyType);\r\n              console.log(`✅ Transformed ${transformedRows.length} rows for survey ${survey.id}`);\r\n              \r\n              // Special debugging for SullivanCotter transformed data\r\n              if (surveyType === 'SullivanCotter') {\r\n                const allergyTransformedRows = transformedRows.filter(row => \r\n                  row.specialty && (row.specialty.toLowerCase().includes('allergy') || row.specialty.toLowerCase().includes('immunology'))\r\n                );\r\n                console.log('🔍 Found', allergyTransformedRows.length, 'Allergy & Immunology rows in SullivanCotter transformed data');\r\n                if (allergyTransformedRows.length > 0) {\r\n                  console.log('📋 Sample transformed Allergy & Immunology rows:', allergyTransformedRows.slice(0, 3).map(row => row.specialty));\r\n                }\r\n              }\r\n              \r\n              // Check if any specialties were actually transformed\r\n              const originalSpecialties = data.rows.slice(0, 5).map(row => row.specialty);\r\n              const transformedSpecialties = transformedRows.slice(0, 5).map(row => row.specialty);\r\n              console.log(`📋 Original specialties (first 5):`, originalSpecialties);\r\n              console.log(`📋 Transformed specialties (first 5):`, transformedSpecialties);\r\n              \r\n\r\n              \r\n              // Log some sample specialties from the raw data\r\n              if (data.rows.length > 0) {\r\n                const sampleSpecialties = data.rows.slice(0, 5).map(row => row.specialty);\r\n                console.log(`📋 Sample specialties from ${surveyType}:`, sampleSpecialties);\r\n              }\r\n              \r\n              if (transformedRows.length > 0) {\r\n                console.log('Sample transformed row:', {\r\n                  surveySource: transformedRows[0].surveySource,\r\n                  specialty: transformedRows[0].specialty,\r\n                  tcc_p50: transformedRows[0].tcc_p50,\r\n                  wrvu_p50: transformedRows[0].wrvu_p50,\r\n                  cf_p50: transformedRows[0].cf_p50\r\n                });\r\n              }\r\n              \r\n              surveyData[survey.id] = transformedRows.map(row => {\r\n                // Ensure all required fields are present and properly typed\r\n                const processedRow = {\r\n                  ...row,\r\n                  surveySource: surveyType,\r\n                  specialty: row.specialty || row.normalizedSpecialty || '',\r\n                  originalSpecialty: row.originalSpecialty || row.specialty || row.normalizedSpecialty || '',\r\n                  // Normalize provider type and region fields from possible snake_case inputs\r\n                  providerType: (row as any).providerType || (row as any).provider_type || '',\r\n                  geographicRegion: (row as any).geographicRegion || (row as any).geographic_region || '',\r\n                  n_orgs: Number(row.n_orgs) || 0,\r\n                  n_incumbents: Number(row.n_incumbents) || 0,\r\n                  tcc_p25: Number(row.tcc_p25) || 0,\r\n                  tcc_p50: Number(row.tcc_p50) || 0,\r\n                  tcc_p75: Number(row.tcc_p75) || 0,\r\n                  tcc_p90: Number(row.tcc_p90) || 0,\r\n                  wrvu_p25: Number(row.wrvu_p25) || 0,\r\n                  wrvu_p50: Number(row.wrvu_p50) || 0,\r\n                  wrvu_p75: Number(row.wrvu_p75) || 0,\r\n                  wrvu_p90: Number(row.wrvu_p90) || 0,\r\n                  cf_p25: Number(row.cf_p25) || 0,\r\n                  cf_p50: Number(row.cf_p50) || 0,\r\n                  cf_p75: Number(row.cf_p75) || 0,\r\n                  cf_p90: Number(row.cf_p90) || 0,\r\n                };\r\n\r\n                // Log the first row of each survey to verify data\r\n                if (transformedRows.indexOf(row) === 0) {\r\n                  console.log('Sample transformed row:', {\r\n                    surveySource: processedRow.surveySource,\r\n                    specialty: processedRow.specialty,\r\n                    providerType: processedRow.providerType,\r\n                    metrics: {\r\n                      tcc: { p25: processedRow.tcc_p25, p50: processedRow.tcc_p50, p75: processedRow.tcc_p75, p90: processedRow.tcc_p90 },\r\n                      wrvu: { p25: processedRow.wrvu_p25, p50: processedRow.wrvu_p50, p75: processedRow.wrvu_p75, p90: processedRow.wrvu_p90 },\r\n                      cf: { p25: processedRow.cf_p25, p50: processedRow.cf_p50, p75: processedRow.cf_p75, p90: processedRow.cf_p90 }\r\n                    }\r\n                  });\r\n                }\r\n\r\n                return processedRow;\r\n              });\r\n            }\r\n          } catch (error) {\r\n            console.error(`Error processing survey ${survey.id}:`, error);\r\n          }\r\n        }\r\n\r\n        console.log('Total surveys loaded:', Object.keys(surveyData).length);\r\n        console.log('Survey data keys:', Object.keys(surveyData));\r\n        \r\n        // Collect all specialties from all surveys to see what's available\r\n        const allSpecialties: string[] = [];\r\n        Object.entries(surveyData).forEach(([id, rows]) => {\r\n          const surveySpecialties = Array.from(new Set(rows.map(r => String(r.specialty || '')).filter(Boolean)));\r\n          allSpecialties.push(...surveySpecialties);\r\n          \r\n          console.log(`Survey ${id}:`, {\r\n            rowCount: rows.length,\r\n            surveySource: rows[0]?.surveySource,\r\n            specialties: surveySpecialties,\r\n            hasData: rows.some(r => r.tcc_p50 > 0 || r.wrvu_p50 > 0),\r\n            sampleRow: rows[0]\r\n          });\r\n        });\r\n        \r\n        // Check for Allergy & Immunology specifically\r\n        const uniqueSpecialties = Array.from(new Set(allSpecialties));\r\n        console.log('📋 All unique specialties across all surveys:', uniqueSpecialties);\r\n        \r\n        const allergySpecialties = uniqueSpecialties.filter(s => \r\n          String(s).toLowerCase().includes('allergy') || String(s).toLowerCase().includes('immunology')\r\n        );\r\n        console.log('🎯 Allergy & Immunology related specialties found:', allergySpecialties);\r\n        \r\n        // Check if any survey has Allergy & Immunology rows\r\n        Object.entries(surveyData).forEach(([id, rows]) => {\r\n          const allergyRows = rows.filter(row => \r\n            row.specialty && \r\n            (String(row.specialty).toLowerCase().includes('allergy') || \r\n             String(row.specialty).toLowerCase().includes('immunology'))\r\n          );\r\n          if (allergyRows.length > 0) {\r\n            console.log(`✅ Survey ${id} has ${allergyRows.length} Allergy & Immunology rows:`, \r\n              allergyRows.slice(0, 3).map(row => ({\r\n                specialty: row.specialty,\r\n                originalSpecialty: row.originalSpecialty,\r\n                surveySource: row.surveySource\r\n              }))\r\n            );\r\n          }\r\n        });\r\n\r\n        setSurveys(surveyData);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        setError('Failed to load data');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [mappingService, storageService]);\r\n\r\n  const aggregatedData = useMemo(() => {\r\n    if (!filters.specialty) return [];\r\n\r\n    // Find the selected mapping\r\n    const selectedMapping = mappings.find(\r\n      m => m.standardizedName === filters.specialty\r\n    );\r\n    if (!selectedMapping) {\r\n      console.log('❌ No mapping found for specialty:', filters.specialty);\r\n      console.log('📋 Available mappings:', mappings.map(m => m.standardizedName));\r\n      return [];\r\n    }\r\n\r\n    console.log('✅ Selected mapping:', selectedMapping);\r\n    console.log('📊 Available surveys:', Object.keys(surveys));\r\n    \r\n    // Collect ALL matching rows from ALL surveys for this standardized specialty\r\n    const allMatchingRows: ISurveyRow[] = [];\r\n    \r\n    // Look through ALL surveys for data matching the selected standardized specialty\r\n    Object.entries(surveys).forEach(([surveyId, surveyRows]) => {\r\n      if (!surveyRows || !surveyRows.length) {\r\n        console.log(`❌ No data found for survey ${surveyId}`);\r\n        return;\r\n      }\r\n\r\n      const surveySource = surveyRows[0]?.surveySource;\r\n      console.log(`🔍 Checking survey ${surveyId} (${surveySource}) for specialty \"${filters.specialty}\"`);\r\n      \r\n      \r\n      \r\n      // Show what source specialties this mapping expects for this survey source\r\n      const expectedSourceSpecialties = selectedMapping.sourceSpecialties\r\n        .filter(src => src.surveySource === surveySource)\r\n        .map(src => src.specialty);\r\n      console.log(`🎯 Expected source specialties for ${surveySource}:`, expectedSourceSpecialties);\r\n      \r\n      // Filter rows that match the selected standardized specialty\r\n      const filtered = surveyRows.filter(row => {\r\n        if (!row) return false;\r\n        \r\n        // Use the transformed specialty name (which should already be standardized)\r\n        const rowSpecialty = String(row.specialty || '').trim();\r\n        const selectedSpecialty = selectedMapping.standardizedName.trim();\r\n        \r\n        // Check if the row specialty matches the selected standardized specialty\r\n        const specialtyMatch = rowSpecialty.toLowerCase() === selectedSpecialty.toLowerCase();\r\n        \r\n        // If no direct match, check if this row's original specialty maps to the selected specialty\r\n        if (!specialtyMatch && row.originalSpecialty) {\r\n          const originalSpecialty = String(row.originalSpecialty).toLowerCase();\r\n          const mappingForThisSource = selectedMapping.sourceSpecialties.find(\r\n            src => src.surveySource === surveySource && src.specialty.toLowerCase() === originalSpecialty\r\n          );\r\n          if (mappingForThisSource) {\r\n            console.log(`✅ Found mapping match: \"${row.originalSpecialty}\" → \"${selectedSpecialty}\"`);\r\n            return true;\r\n          }\r\n        }\r\n        \r\n        // Apply other filters\r\n        const providerTypeMatch = !filters.providerType || \r\n          String((row as any).providerType || (row as any).provider_type || '').toLowerCase().trim() === filters.providerType.toLowerCase().trim();\r\n        const regionMatch = !filters.region || \r\n          String((row as any).geographicRegion || (row as any).geographic_region || '').toLowerCase().trim() === filters.region.toLowerCase().trim();\r\n        const surveySourceMatch = !filters.surveySource || \r\n          String(row.surveySource || '').toLowerCase().trim() === filters.surveySource.toLowerCase().trim();\r\n        \r\n        const matches = specialtyMatch && providerTypeMatch && regionMatch && surveySourceMatch;\r\n        \r\n        if (specialtyMatch) {\r\n          console.log(`✅ Found matching row: \"${rowSpecialty}\" matches \"${selectedSpecialty}\"`);\r\n        } else {\r\n          console.log(`❌ No direct match: \"${rowSpecialty}\" != \"${selectedSpecialty}\"`);\r\n          // Debug: Show what the row actually contains\r\n          console.log(`🔍 Row details:`, {\r\n            surveySource: row.surveySource,\r\n            specialty: row.specialty,\r\n            originalSpecialty: (row as any).originalSpecialty,\r\n            providerType: row.providerType,\r\n            geographicRegion: row.geographicRegion\r\n          });\r\n        }\r\n        \r\n        return matches;\r\n      });\r\n\r\n      if (filtered.length > 0) {\r\n        console.log(`✅ Found ${filtered.length} matching rows in survey ${surveyId} (${surveySource}) for specialty \"${filters.specialty}\"`);\r\n        allMatchingRows.push(...filtered);\r\n      } else {\r\n        console.log(`❌ No matching rows found in survey ${surveyId} (${surveySource}) for specialty \"${filters.specialty}\"`);\r\n      }\r\n    });\r\n\r\n    console.log(`📊 Total matching rows found across all surveys: ${allMatchingRows.length}`);\r\n\r\n    if (allMatchingRows.length === 0) {\r\n      console.log('❌ No matching rows found for any survey');\r\n      console.log('📋 Available specialties in mappings:', mappings.map(m => m.standardizedName));\r\n      console.log('🎯 Selected specialty:', filters.specialty);\r\n      return [];\r\n    }\r\n\r\n    // Group rows by survey source, provider type, and region\r\n    const groupedRows = new Map<string, ISurveyRow[]>();\r\n    allMatchingRows.forEach(row => {\r\n      const key = `${row.surveySource || ''}-${row.providerType || ''}-${row.geographicRegion || ''}`;\r\n      if (!groupedRows.has(key)) {\r\n        groupedRows.set(key, []);\r\n      }\r\n      groupedRows.get(key)?.push(row);\r\n    });\r\n\r\n    console.log(`Grouped into ${groupedRows.size} unique combinations`);\r\n\r\n    // Create aggregated rows for each group\r\n    const rows: AggregatedData[] = [];\r\n    groupedRows.forEach((groupRows, key) => {\r\n      // Use the first row as base for metadata\r\n      const row = groupRows[0];\r\n      \r\n      // Calculate metrics including averages\r\n      const metrics = {\r\n        n_orgs: groupRows.reduce((sum, r) => sum + (Number(r.n_orgs) || 0), 0),\r\n        n_incumbents: groupRows.reduce((sum, r) => sum + (Number(r.n_incumbents) || 0), 0),\r\n        // Simple averages\r\n        tcc_avg: calculateAverage([\r\n              ...groupRows.map(r => Number(r.tcc_p25) || 0),\r\n              ...groupRows.map(r => Number(r.tcc_p50) || 0),\r\n              ...groupRows.map(r => Number(r.tcc_p75) || 0),\r\n              ...groupRows.map(r => Number(r.tcc_p90) || 0)\r\n            ].filter(Boolean)),\r\n            wrvu_avg: calculateAverage([\r\n              ...groupRows.map(r => Number(r.wrvu_p25) || 0),\r\n              ...groupRows.map(r => Number(r.wrvu_p50) || 0),\r\n              ...groupRows.map(r => Number(r.wrvu_p75) || 0),\r\n              ...groupRows.map(r => Number(r.wrvu_p90) || 0)\r\n            ].filter(Boolean)),\r\n            cf_avg: calculateAverage([\r\n              ...groupRows.map(r => Number(r.cf_p25) || 0),\r\n              ...groupRows.map(r => Number(r.cf_p50) || 0),\r\n              ...groupRows.map(r => Number(r.cf_p75) || 0),\r\n              ...groupRows.map(r => Number(r.cf_p90) || 0)\r\n            ].filter(Boolean)),\r\n            // Weighted averages\r\n            tcc_weighted_avg: calculateWeightedAverage(\r\n              groupRows.map(r => (Number(r.tcc_p50) || 0)),\r\n              groupRows.map(r => (Number(r.n_incumbents) || 0))\r\n            ),\r\n            wrvu_weighted_avg: calculateWeightedAverage(\r\n              groupRows.map(r => (Number(r.wrvu_p50) || 0)),\r\n              groupRows.map(r => (Number(r.n_incumbents) || 0))\r\n            ),\r\n            cf_weighted_avg: calculateWeightedAverage(\r\n              groupRows.map(r => (Number(r.cf_p50) || 0)),\r\n              groupRows.map(r => (Number(r.n_incumbents) || 0))\r\n            ),\r\n            // Percentiles\r\n            tcc_p25: calculatePercentile(groupRows.map(r => Number(r.tcc_p25) || 0).filter(Boolean), 25),\r\n            tcc_p50: calculatePercentile(groupRows.map(r => Number(r.tcc_p50) || 0).filter(Boolean), 50),\r\n            tcc_p75: calculatePercentile(groupRows.map(r => Number(r.tcc_p75) || 0).filter(Boolean), 75),\r\n            tcc_p90: calculatePercentile(groupRows.map(r => Number(r.tcc_p90) || 0).filter(Boolean), 90),\r\n            wrvu_p25: calculatePercentile(groupRows.map(r => Number(r.wrvu_p25) || 0).filter(Boolean), 25),\r\n            wrvu_p50: calculatePercentile(groupRows.map(r => Number(r.wrvu_p50) || 0).filter(Boolean), 50),\r\n            wrvu_p75: calculatePercentile(groupRows.map(r => Number(r.wrvu_p75) || 0).filter(Boolean), 75),\r\n            wrvu_p90: calculatePercentile(groupRows.map(r => Number(r.wrvu_p90) || 0).filter(Boolean), 90),\r\n            cf_p25: calculatePercentile(groupRows.map(r => Number(r.cf_p25) || 0).filter(Boolean), 25),\r\n            cf_p50: calculatePercentile(groupRows.map(r => Number(r.cf_p50) || 0).filter(Boolean), 50),\r\n            cf_p75: calculatePercentile(groupRows.map(r => Number(r.cf_p75) || 0).filter(Boolean), 75),\r\n            cf_p90: calculatePercentile(groupRows.map(r => Number(r.cf_p90) || 0).filter(Boolean), 90),\r\n          };\r\n\r\n          rows.push({\r\n            standardizedName: selectedMapping.standardizedName,\r\n            surveySource: String(row.surveySource || ''),\r\n            surveySpecialty: String(row.specialty || ''),\r\n            geographicRegion: String(row.geographicRegion || ''),\r\n            n_orgs: metrics.n_orgs,\r\n            n_incumbents: metrics.n_incumbents,\r\n            tcc_p25: metrics.tcc_p25,\r\n            tcc_p50: metrics.tcc_p50,\r\n            tcc_p75: metrics.tcc_p75,\r\n            tcc_p90: metrics.tcc_p90,\r\n            wrvu_p25: metrics.wrvu_p25,\r\n            wrvu_p50: metrics.wrvu_p50,\r\n            wrvu_p75: metrics.wrvu_p75,\r\n            wrvu_p90: metrics.wrvu_p90,\r\n            cf_p25: metrics.cf_p25,\r\n            cf_p50: metrics.cf_p50,\r\n            cf_p75: metrics.cf_p75,\r\n            cf_p90: metrics.cf_p90\r\n          });\r\n        });\r\n\r\n    console.log('Generated rows:', rows);\r\n    return rows;\r\n  }, [filters, mappings, surveys]);\r\n\r\n  // Filter the data\r\n  const filteredData = useMemo(() => {\r\n    console.log('Filtering data with:', filters);\r\n    console.log('Available aggregated data:', aggregatedData);\r\n    \r\n    return aggregatedData.filter(row => {\r\n      const matchesSpecialty = !filters.specialty || row.standardizedName.toLowerCase().includes(filters.specialty.toLowerCase());\r\n      const matchesSurveySource = !filters.surveySource || row.surveySource.toLowerCase().includes(filters.surveySource.toLowerCase());\r\n      const matchesProviderType = !filters.providerType || (\r\n        Object.values(surveys).some(surveyRows =>\r\n          surveyRows.some(s =>\r\n            s.specialty === row.surveySpecialty &&\r\n            s.surveySource === row.surveySource &&\r\n            s.providerType?.toLowerCase().includes(filters.providerType.toLowerCase())\r\n          )\r\n        )\r\n      );\r\n      const matchesRegion = !filters.region || (\r\n        Object.values(surveys).some(surveyRows =>\r\n          surveyRows.some(s =>\r\n            s.specialty === row.surveySpecialty &&\r\n            s.surveySource === row.surveySource &&\r\n            s.geographicRegion?.toLowerCase().includes(filters.region.toLowerCase())\r\n          )\r\n        )\r\n      );\r\n\r\n      return matchesSpecialty && matchesSurveySource && matchesProviderType && matchesRegion;\r\n    });\r\n  }, [aggregatedData, filters, surveys]);\r\n\r\n  const handleFilterChange = (filterName: string, value: string) => {\r\n    setFilters(prev => {\r\n      const newFilters = { ...prev, [filterName]: value };\r\n      \r\n      // Cascading logic: when specialty changes, reset other filters\r\n      if (filterName === 'specialty') {\r\n        newFilters.providerType = '';\r\n        newFilters.region = '';\r\n        newFilters.surveySource = '';\r\n      }\r\n      \r\n      // When survey source changes, reset provider type and region\r\n      if (filterName === 'surveySource') {\r\n        newFilters.providerType = '';\r\n        newFilters.region = '';\r\n      }\r\n      \r\n      // When provider type changes, reset region\r\n      if (filterName === 'providerType') {\r\n        newFilters.region = '';\r\n      }\r\n      \r\n      console.log('Filter changed:', filterName, 'to', value, 'New filters:', newFilters);\r\n      return newFilters;\r\n    });\r\n  };\r\n\r\n\r\n\r\n  // Add function to group data by standardized specialty\r\n  const groupBySpecialty = (data: AggregatedData[]): Record<string, AggregatedData[]> => {\r\n    return data.reduce((acc, row) => {\r\n      if (!acc[row.standardizedName]) {\r\n        acc[row.standardizedName] = [];\r\n      }\r\n      acc[row.standardizedName].push(row);\r\n      return acc;\r\n    }, {} as Record<string, AggregatedData[]>);\r\n  };\r\n\r\n  // Add function to calculate summary rows\r\n  const calculateSummaryRows = (rows: AggregatedData[]): { simple: AggregatedData, weighted: AggregatedData } => {\r\n    const totalIncumbents = rows.reduce((sum, row) => sum + row.n_incumbents, 0);\r\n    \r\n    const simple: AggregatedData = {\r\n      standardizedName: 'Simple Avg',\r\n      surveySource: '',\r\n      surveySpecialty: '',\r\n      geographicRegion: '',\r\n      n_orgs: 0,\r\n      n_incumbents: 0,\r\n      tcc_p25: calculateAverage(rows.map(r => r.tcc_p25)),\r\n      tcc_p50: calculateAverage(rows.map(r => r.tcc_p50)),\r\n      tcc_p75: calculateAverage(rows.map(r => r.tcc_p75)),\r\n      tcc_p90: calculateAverage(rows.map(r => r.tcc_p90)),\r\n      wrvu_p25: calculateAverage(rows.map(r => r.wrvu_p25)),\r\n      wrvu_p50: calculateAverage(rows.map(r => r.wrvu_p50)),\r\n      wrvu_p75: calculateAverage(rows.map(r => r.wrvu_p75)),\r\n      wrvu_p90: calculateAverage(rows.map(r => r.wrvu_p90)),\r\n      cf_p25: calculateAverage(rows.map(r => r.cf_p25)),\r\n      cf_p50: calculateAverage(rows.map(r => r.cf_p50)),\r\n      cf_p75: calculateAverage(rows.map(r => r.cf_p75)),\r\n      cf_p90: calculateAverage(rows.map(r => r.cf_p90))\r\n    };\r\n\r\n    const weighted: AggregatedData = {\r\n      standardizedName: 'Weighted Avg',\r\n      surveySource: '',\r\n      surveySpecialty: '',\r\n      geographicRegion: '',\r\n      n_orgs: 0,\r\n      n_incumbents: totalIncumbents,\r\n      tcc_p25: calculateWeightedAverage(rows.map(r => r.tcc_p25), rows.map(r => r.n_incumbents)),\r\n      tcc_p50: calculateWeightedAverage(rows.map(r => r.tcc_p50), rows.map(r => r.n_incumbents)),\r\n      tcc_p75: calculateWeightedAverage(rows.map(r => r.tcc_p75), rows.map(r => r.n_incumbents)),\r\n      tcc_p90: calculateWeightedAverage(rows.map(r => r.tcc_p90), rows.map(r => r.n_incumbents)),\r\n      wrvu_p25: calculateWeightedAverage(rows.map(r => r.wrvu_p25), rows.map(r => r.n_incumbents)),\r\n      wrvu_p50: calculateWeightedAverage(rows.map(r => r.wrvu_p50), rows.map(r => r.n_incumbents)),\r\n      wrvu_p75: calculateWeightedAverage(rows.map(r => r.wrvu_p75), rows.map(r => r.n_incumbents)),\r\n      wrvu_p90: calculateWeightedAverage(rows.map(r => r.wrvu_p90), rows.map(r => r.n_incumbents)),\r\n      cf_p25: calculateWeightedAverage(rows.map(r => r.cf_p25), rows.map(r => r.n_incumbents)),\r\n      cf_p50: calculateWeightedAverage(rows.map(r => r.cf_p50), rows.map(r => r.n_incumbents)),\r\n      cf_p75: calculateWeightedAverage(rows.map(r => r.cf_p75), rows.map(r => r.n_incumbents)),\r\n      cf_p90: calculateWeightedAverage(rows.map(r => r.cf_p90), rows.map(r => r.n_incumbents))\r\n    };\r\n\r\n    return { simple, weighted };\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <LoadingSpinner \r\n        message=\"Loading survey analytics...\" \r\n        fullScreen={true}\r\n        size=\"lg\"\r\n      />\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Box p={3}>\r\n        <Typography color=\"error\">{error}</Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50\">\r\n      {/* Filters Card */}\r\n              <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-8 mt-4\">\r\n        <div className=\"flex items-center justify-between mb-6\">\r\n          <div>\r\n            <h3 className=\"text-xl font-semibold text-gray-900\">Data Filters</h3>\r\n            <p className=\"text-sm text-gray-600 mt-1\">Refine your survey analytics view</p>\r\n          </div>\r\n          <div className=\"flex items-center space-x-3\">\r\n            {/* Download Button */}\r\n            <button\r\n              onClick={exportToCSV}\r\n              disabled={filteredData.length === 0}\r\n              className=\"inline-flex items-center px-6 py-3 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-300 disabled:text-gray-500 text-white text-sm font-medium rounded-lg transition-all duration-200\"\r\n            >\r\n              <DocumentTextIcon className=\"h-4 w-4 mr-2\" />\r\n              Download to Excel\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Filter Grid */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4\">\r\n          {/* Specialty Filter */}\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n              Specialty\r\n            </label>\r\n            <FormControl fullWidth size=\"small\">\r\n              <Select\r\n                value={filters.specialty}\r\n                onChange={(e: React.ChangeEvent<{ value: unknown }>) => handleFilterChange('specialty', e.target.value as string)}\r\n                sx={{\r\n                  backgroundColor: 'white',\r\n                  border: '1px solid #d1d5db',\r\n                  borderRadius: '8px',\r\n                  '& .MuiOutlinedInput-root': {\r\n                    fontSize: '0.875rem',\r\n                    borderRadius: '8px',\r\n                  },\r\n                  '&:hover': {\r\n                    borderColor: '#9ca3af',\r\n                  },\r\n                  '&.Mui-focused': {\r\n                    borderColor: '#3b82f6',\r\n                  }\r\n                }}\r\n                displayEmpty\r\n              >\r\n                <MenuItem value=\"\">All Specialties</MenuItem>\r\n                {uniqueValues.specialties.map((specialty) => (\r\n                  <MenuItem key={specialty} value={specialty}>\r\n                    {specialty}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n\r\n          {/* Survey Source Filter */}\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n              Survey Source\r\n            </label>\r\n            <FormControl fullWidth size=\"small\">\r\n              <Select\r\n                value={filters.surveySource}\r\n                onChange={(e: React.ChangeEvent<{ value: unknown }>) => handleFilterChange('surveySource', e.target.value as string)}\r\n                sx={{\r\n                  backgroundColor: 'white',\r\n                  border: '1px solid #d1d5db',\r\n                  borderRadius: '8px',\r\n                  '& .MuiOutlinedInput-root': {\r\n                    fontSize: '0.875rem',\r\n                    borderRadius: '8px',\r\n                  },\r\n                  '&:hover': {\r\n                    borderColor: '#9ca3af',\r\n                  },\r\n                  '&.Mui-focused': {\r\n                    borderColor: '#3b82f6',\r\n                  }\r\n                }}\r\n                displayEmpty\r\n              >\r\n                <MenuItem value=\"\">All Sources</MenuItem>\r\n                {uniqueValues.surveySources.map((source) => (\r\n                  <MenuItem key={source} value={source}>\r\n                    {source}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n\r\n          {/* Provider Type Filter */}\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n              Provider Type\r\n            </label>\r\n            <FormControl fullWidth size=\"small\">\r\n              <Select\r\n                value={filters.providerType}\r\n                onChange={(e: React.ChangeEvent<{ value: unknown }>) => handleFilterChange('providerType', e.target.value as string)}\r\n                sx={{\r\n                  backgroundColor: 'white',\r\n                  border: '1px solid #d1d5db',\r\n                  borderRadius: '8px',\r\n                  '& .MuiOutlinedInput-root': {\r\n                    fontSize: '0.875rem',\r\n                    borderRadius: '8px',\r\n                  },\r\n                  '&:hover': {\r\n                    borderColor: '#9ca3af',\r\n                  },\r\n                  '&.Mui-focused': {\r\n                    borderColor: '#3b82f6',\r\n                  }\r\n                }}\r\n                displayEmpty\r\n              >\r\n                <MenuItem value=\"\">All Types</MenuItem>\r\n                {uniqueValues.providerTypes.map((type) => (\r\n                  <MenuItem key={type} value={type}>\r\n                    {type}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n\r\n          {/* Region Filter */}\r\n          <div>\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n              Region\r\n            </label>\r\n            <FormControl fullWidth size=\"small\">\r\n              <Select\r\n                value={filters.region}\r\n                onChange={(e: React.ChangeEvent<{ value: unknown }>) => handleFilterChange('region', e.target.value as string)}\r\n                sx={{\r\n                  backgroundColor: 'white',\r\n                  border: '1px solid #d1d5db',\r\n                  borderRadius: '8px',\r\n                  '& .MuiOutlinedInput-root': {\r\n                    fontSize: '0.875rem',\r\n                    borderRadius: '8px',\r\n                  },\r\n                  '&:hover': {\r\n                    borderColor: '#9ca3af',\r\n                  },\r\n                  '&.Mui-focused': {\r\n                    borderColor: '#3b82f6',\r\n                  }\r\n                }}\r\n                displayEmpty\r\n              >\r\n                <MenuItem value=\"\">All Regions</MenuItem>\r\n                {uniqueValues.regions.map((region) => (\r\n                  <MenuItem key={region} value={region}>\r\n                    {region}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Clear Filters Button */}\r\n        {(filters.specialty || filters.providerType || filters.region || filters.surveySource) && (\r\n          <div className=\"flex justify-end\">\r\n            <button\r\n              onClick={() => {\r\n                setFilters({ specialty: '', providerType: '', region: '', surveySource: '' });\r\n              }}\r\n              className=\"inline-flex items-center px-3 py-2 text-sm font-medium text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-lg transition-all duration-200\"\r\n              title=\"Clear all filters\"\r\n            >\r\n              <div className=\"relative w-4 h-4 mr-2\">\r\n                <svg className=\"w-4 h-4 text-gray-500\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                  <path d=\"M3 3a1 1 0 011-1h12a1 1 0 011 1v3a1 1 0 01-.293.707L12 11.414V15a1 1 0 01-.293.707l-2 2A1 1 0 018 17v-5.586L3.293 6.707A1 1 0 013 6V3z\" />\r\n                </svg>\r\n                <svg className=\"absolute -top-1 -right-1 w-3 h-3 text-red-500 bg-white rounded-full\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                  <path fillRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\r\n                </svg>\r\n              </div>\r\n              Clear Filters\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Data Table Card */}\r\n              <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\r\n        <div className=\"flex items-center justify-between mb-6\">\r\n          <h3 className=\"text-xl font-semibold text-gray-900\">Survey Analytics Data</h3>\r\n        </div>\r\n\r\n        {filteredData.length === 0 ? (\r\n          <div className=\"text-center py-12\">\r\n            <div className=\"w-16 h-16 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center\">\r\n              <svg className=\"w-8 h-8 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\r\n              </svg>\r\n            </div>\r\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No data available</h3>\r\n            <p className=\"text-gray-500\">Try adjusting your filters to see results</p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"overflow-x-auto\">\r\n            <TableContainer \r\n              component={Paper} \r\n              sx={{ \r\n                overflowX: 'auto', \r\n                overflowY: 'hidden',\r\n                border: '1px solid #e5e7eb', \r\n                borderRadius: '12px',\r\n                '& .MuiTable-root': {\r\n                  minWidth: '100%'\r\n                },\r\n                '&::-webkit-scrollbar': {\r\n                  height: '8px'\r\n                },\r\n                '&::-webkit-scrollbar-track': {\r\n                  background: '#f1f1f1',\r\n                  borderRadius: '4px'\r\n                },\r\n                '&::-webkit-scrollbar-thumb': {\r\n                  background: '#cbd5e1',\r\n                  borderRadius: '4px',\r\n                  '&:hover': {\r\n                    background: '#94a3b8'\r\n                  }\r\n                }\r\n              }}\r\n            >\r\n              <Table size=\"small\" sx={{ width: '100%' }}>\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell colSpan={5} sx={{ backgroundColor: '#f8fafc', fontWeight: 'bold', borderBottom: '2px solid #e2e8f0' }}>\r\n                      Survey Information\r\n                    </TableCell>\r\n                    <TableCell colSpan={4} align=\"center\" sx={{ backgroundColor: '#dbeafe', fontWeight: 'bold', borderLeft: '2px solid #e2e8f0', borderBottom: '2px solid #e2e8f0' }}>\r\n                      Total Cash Compensation (TCC)\r\n                    </TableCell>\r\n                    <TableCell colSpan={4} align=\"center\" sx={{ backgroundColor: '#dcfce7', fontWeight: 'bold', borderLeft: '2px solid #e2e8f0', borderBottom: '2px solid #e2e8f0' }}>\r\n                      Work RVUs (wRVU)\r\n                    </TableCell>\r\n                    <TableCell colSpan={4} align=\"center\" sx={{ backgroundColor: '#fef3c7', fontWeight: 'bold', borderLeft: '2px solid #e2e8f0', borderBottom: '2px solid #e2e8f0' }}>\r\n                      Conversion Factor (CF)\r\n                    </TableCell>\r\n                  </TableRow>\r\n                  <TableRow>\r\n                    {/* Survey Info Headers */}\r\n                    <TableCell sx={{ backgroundColor: '#f8fafc', fontWeight: 'bold', fontSize: '0.875rem' }}>Survey Source</TableCell>\r\n                    <TableCell sx={{ backgroundColor: '#f8fafc', fontWeight: 'bold', fontSize: '0.875rem' }}>Survey Specialty</TableCell>\r\n                    <TableCell sx={{ backgroundColor: '#f8fafc', fontWeight: 'bold', fontSize: '0.875rem' }}>Region</TableCell>\r\n                    <TableCell sx={{ backgroundColor: '#f8fafc', fontWeight: 'bold', fontSize: '0.875rem', textAlign: 'right' }}># Orgs</TableCell>\r\n                    <TableCell sx={{ backgroundColor: '#f8fafc', fontWeight: 'bold', fontSize: '0.875rem', textAlign: 'right' }}># Incumbents</TableCell>\r\n                    \r\n                    {/* TCC Headers */}\r\n                    <TableCell sx={{ backgroundColor: '#dbeafe', borderLeft: '2px solid #e2e8f0', textAlign: 'right', fontSize: '0.875rem' }}>P25</TableCell>\r\n                    <TableCell sx={{ backgroundColor: '#dbeafe', textAlign: 'right', fontSize: '0.875rem' }}>P50</TableCell>\r\n                    <TableCell sx={{ backgroundColor: '#dbeafe', textAlign: 'right', fontSize: '0.875rem' }}>P75</TableCell>\r\n                    <TableCell sx={{ backgroundColor: '#dbeafe', textAlign: 'right', fontSize: '0.875rem' }}>P90</TableCell>\r\n                    \r\n                    {/* wRVU Headers */}\r\n                    <TableCell sx={{ backgroundColor: '#dcfce7', borderLeft: '2px solid #e2e8f0', textAlign: 'right', fontSize: '0.875rem' }}>P25</TableCell>\r\n                    <TableCell sx={{ backgroundColor: '#dcfce7', textAlign: 'right', fontSize: '0.875rem' }}>P50</TableCell>\r\n                    <TableCell sx={{ backgroundColor: '#dcfce7', textAlign: 'right', fontSize: '0.875rem' }}>P75</TableCell>\r\n                    <TableCell sx={{ backgroundColor: '#dcfce7', textAlign: 'right', fontSize: '0.875rem' }}>P90</TableCell>\r\n                    \r\n                    {/* CF Headers */}\r\n                    <TableCell sx={{ backgroundColor: '#fef3c7', borderLeft: '2px solid #e2e8f0', textAlign: 'right', fontSize: '0.875rem' }}>P25</TableCell>\r\n                    <TableCell sx={{ backgroundColor: '#fef3c7', textAlign: 'right', fontSize: '0.875rem' }}>P50</TableCell>\r\n                    <TableCell sx={{ backgroundColor: '#fef3c7', textAlign: 'right', fontSize: '0.875rem' }}>P75</TableCell>\r\n                    <TableCell sx={{ backgroundColor: '#fef3c7', textAlign: 'right', fontSize: '0.875rem' }}>P90</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {Object.entries(groupBySpecialty(filteredData)).map(([specialty, rows]) => (\r\n                    <React.Fragment key={specialty}>\r\n                      {rows.map((row, idx) => (\r\n                        <TableRow \r\n                          key={`${specialty}-${idx}`}\r\n                          sx={{ \r\n                            '&:nth-of-type(odd)': { backgroundColor: '#f8fafc' },\r\n                            '&:hover': { backgroundColor: '#f1f5f9' },\r\n                            transition: 'background-color 0.2s'\r\n                          }}\r\n                        >\r\n                          <TableCell sx={{ fontSize: '0.875rem' }}>{row.surveySource}</TableCell>\r\n                          <TableCell sx={{ fontSize: '0.875rem' }}>{row.surveySpecialty}</TableCell>\r\n                          <TableCell sx={{ fontSize: '0.875rem' }}>{row.geographicRegion || 'N/A'}</TableCell>\r\n                          <TableCell align=\"right\" sx={{ fontSize: '0.875rem' }}>{row.n_orgs.toLocaleString()}</TableCell>\r\n                          <TableCell align=\"right\" sx={{ fontSize: '0.875rem' }}>{row.n_incumbents.toLocaleString()}</TableCell>\r\n                          \r\n                          {/* TCC Values */}\r\n                          <TableCell sx={{ borderLeft: '2px solid #e2e8f0' }} align=\"right\">{formatCurrency(row.tcc_p25)}</TableCell>\r\n                          <TableCell align=\"right\">{formatCurrency(row.tcc_p50)}</TableCell>\r\n                          <TableCell align=\"right\">{formatCurrency(row.tcc_p75)}</TableCell>\r\n                          <TableCell align=\"right\">{formatCurrency(row.tcc_p90)}</TableCell>\r\n                          \r\n                          {/* wRVU Values */}\r\n                          <TableCell sx={{ borderLeft: '2px solid #e2e8f0' }} align=\"right\">{formatNumber(row.wrvu_p25)}</TableCell>\r\n                          <TableCell align=\"right\">{formatNumber(row.wrvu_p50)}</TableCell>\r\n                          <TableCell align=\"right\">{formatNumber(row.wrvu_p75)}</TableCell>\r\n                          <TableCell align=\"right\">{formatNumber(row.wrvu_p90)}</TableCell>\r\n                          \r\n                          {/* CF Values */}\r\n                          <TableCell sx={{ borderLeft: '2px solid #e2e8f0' }} align=\"right\">{formatCurrency(row.cf_p25, 2)}</TableCell>\r\n                          <TableCell align=\"right\">{formatCurrency(row.cf_p50, 2)}</TableCell>\r\n                          <TableCell align=\"right\">{formatCurrency(row.cf_p75, 2)}</TableCell>\r\n                          <TableCell align=\"right\">{formatCurrency(row.cf_p90, 2)}</TableCell>\r\n                        </TableRow>\r\n                      ))}\r\n                      {/* Summary Rows */}\r\n                      {(() => {\r\n                        const { simple, weighted } = calculateSummaryRows(rows);\r\n                        return (\r\n                          <>\r\n                            <TableRow sx={{ \r\n                              backgroundColor: '#f1f5f9',\r\n                              borderTop: '2px solid #e2e8f0'\r\n                            }}>\r\n                              <TableCell sx={{ fontWeight: 'bold', fontSize: '0.875rem' }}>Simple Average</TableCell>\r\n                              <TableCell sx={{ fontSize: '0.875rem' }}>-</TableCell>\r\n                              <TableCell sx={{ fontSize: '0.875rem' }}>-</TableCell>\r\n                              <TableCell align=\"right\" sx={{ fontSize: '0.875rem' }}>{simple.n_orgs}</TableCell>\r\n                              <TableCell align=\"right\" sx={{ fontSize: '0.875rem' }}>{simple.n_incumbents}</TableCell>\r\n                              \r\n                              {/* TCC Values */}\r\n                              <TableCell sx={{ borderLeft: '2px solid #e2e8f0' }} align=\"right\">{formatCurrency(simple.tcc_p25)}</TableCell>\r\n                              <TableCell align=\"right\">{formatCurrency(simple.tcc_p50)}</TableCell>\r\n                              <TableCell align=\"right\">{formatCurrency(simple.tcc_p75)}</TableCell>\r\n                              <TableCell align=\"right\">{formatCurrency(simple.tcc_p90)}</TableCell>\r\n                              \r\n                              {/* wRVU Values */}\r\n                              <TableCell sx={{ borderLeft: '2px solid #e2e8f0' }} align=\"right\">{formatNumber(simple.wrvu_p25)}</TableCell>\r\n                              <TableCell align=\"right\">{formatNumber(simple.wrvu_p50)}</TableCell>\r\n                              <TableCell align=\"right\">{formatNumber(simple.wrvu_p75)}</TableCell>\r\n                              <TableCell align=\"right\">{formatNumber(simple.wrvu_p90)}</TableCell>\r\n                              \r\n                              {/* CF Values */}\r\n                              <TableCell sx={{ borderLeft: '2px solid #e2e8f0' }} align=\"right\">{formatCurrency(simple.cf_p25, 2)}</TableCell>\r\n                              <TableCell align=\"right\">{formatCurrency(simple.cf_p50, 2)}</TableCell>\r\n                              <TableCell align=\"right\">{formatCurrency(simple.cf_p75, 2)}</TableCell>\r\n                              <TableCell align=\"right\">{formatCurrency(simple.cf_p90, 2)}</TableCell>\r\n                            </TableRow>\r\n                            <TableRow sx={{ \r\n                              backgroundColor: '#dbeafe',\r\n                              borderBottom: '2px solid #e2e8f0'\r\n                            }}>\r\n                              <TableCell sx={{ fontWeight: 'bold', fontSize: '0.875rem' }}>Weighted Average</TableCell>\r\n                              <TableCell sx={{ fontSize: '0.875rem' }}>-</TableCell>\r\n                              <TableCell sx={{ fontSize: '0.875rem' }}>-</TableCell>\r\n                              <TableCell align=\"right\" sx={{ fontSize: '0.875rem' }}>{weighted.n_orgs}</TableCell>\r\n                              <TableCell align=\"right\" sx={{ fontSize: '0.875rem' }}>{weighted.n_incumbents}</TableCell>\r\n                              \r\n                              {/* TCC Values */}\r\n                              <TableCell sx={{ borderLeft: '2px solid #e2e8f0' }} align=\"right\">{formatCurrency(weighted.tcc_p25)}</TableCell>\r\n                              <TableCell align=\"right\">{formatCurrency(weighted.tcc_p50)}</TableCell>\r\n                              <TableCell align=\"right\">{formatCurrency(weighted.tcc_p75)}</TableCell>\r\n                              <TableCell align=\"right\">{formatCurrency(weighted.tcc_p90)}</TableCell>\r\n                              \r\n                              {/* wRVU Values */}\r\n                              <TableCell sx={{ borderLeft: '2px solid #e2e8f0' }} align=\"right\">{formatNumber(weighted.wrvu_p25)}</TableCell>\r\n                              <TableCell align=\"right\">{formatNumber(weighted.wrvu_p50)}</TableCell>\r\n                              <TableCell align=\"right\">{formatNumber(weighted.wrvu_p75)}</TableCell>\r\n                              <TableCell align=\"right\">{formatNumber(weighted.wrvu_p90)}</TableCell>\r\n                              \r\n                              {/* CF Values */}\r\n                              <TableCell sx={{ borderLeft: '2px solid #e2e8f0' }} align=\"right\">{formatCurrency(weighted.cf_p25, 2)}</TableCell>\r\n                              <TableCell align=\"right\">{formatCurrency(weighted.cf_p50, 2)}</TableCell>\r\n                              <TableCell align=\"right\">{formatCurrency(weighted.cf_p75, 2)}</TableCell>\r\n                              <TableCell align=\"right\">{formatCurrency(weighted.cf_p90, 2)}</TableCell>\r\n                            </TableRow>\r\n                          </>\r\n                        );\r\n                      })()}\r\n                    </React.Fragment>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SurveyAnalytics; ","import React from 'react';\r\nimport { cn } from '../../utils/cn';\r\n\r\ninterface LoadingSpinnerProps {\r\n  message?: string;\r\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\r\n  variant?: 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'error';\r\n  fullScreen?: boolean;\r\n  overlay?: boolean;\r\n  className?: string;\r\n}\r\n\r\nconst LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ \r\n  message = 'Loading...', \r\n  size = 'md',\r\n  variant = 'primary',\r\n  fullScreen = false,\r\n  overlay = false,\r\n  className\r\n}) => {\r\n  const sizeClasses = {\r\n    xs: 'w-4 h-4',\r\n    sm: 'w-6 h-6', \r\n    md: 'w-8 h-8',\r\n    lg: 'w-12 h-12',\r\n    xl: 'w-16 h-16'\r\n  };\r\n\r\n  const variantClasses = {\r\n    default: 'text-gray-600',\r\n    primary: 'text-indigo-600',\r\n    secondary: 'text-gray-500',\r\n    success: 'text-emerald-600',\r\n    warning: 'text-amber-600',\r\n    error: 'text-red-600'\r\n  };\r\n\r\n  const spinnerSize = sizeClasses[size];\r\n  const spinnerColor = variantClasses[variant];\r\n\r\n  const SpinnerIcon = () => (\r\n    <svg \r\n      className={cn(\r\n        'animate-spin',\r\n        spinnerSize,\r\n        spinnerColor,\r\n        'inline-block'\r\n      )}\r\n      xmlns=\"http://www.w3.org/2000/svg\" \r\n      fill=\"none\" \r\n      viewBox=\"0 0 24 24\"\r\n    >\r\n      <circle \r\n        className=\"opacity-25\" \r\n        cx=\"12\" \r\n        cy=\"12\" \r\n        r=\"10\" \r\n        stroke=\"currentColor\" \r\n        strokeWidth=\"4\"\r\n      />\r\n      <path \r\n        className=\"opacity-75\" \r\n        fill=\"currentColor\" \r\n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\r\n      />\r\n    </svg>\r\n  );\r\n\r\n  const content = (\r\n    <div className={cn(\r\n      'flex flex-col items-center justify-center gap-3',\r\n      fullScreen ? 'min-h-screen' : 'min-h-[200px]',\r\n      className\r\n    )}>\r\n      <SpinnerIcon />\r\n      {message && (\r\n        <p className={cn(\r\n          'text-sm font-medium text-center',\r\n          variant === 'default' ? 'text-gray-600' : 'text-gray-700'\r\n        )}>\r\n          {message}\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  if (overlay) {\r\n    return (\r\n      <div className=\"fixed inset-0 flex items-center justify-center bg-white/90 backdrop-blur-sm z-50\">\r\n        {content}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return content;\r\n};\r\n\r\n// Button loading spinner for inline use\r\nexport const ButtonSpinner: React.FC<{ size?: 'sm' | 'md' }> = ({ size = 'md' }) => {\r\n  const sizeClasses = {\r\n    sm: 'w-4 h-4',\r\n    md: 'w-5 h-5'\r\n  };\r\n\r\n  return (\r\n    <svg \r\n      className={cn(\r\n        'animate-spin text-current',\r\n        sizeClasses[size]\r\n      )}\r\n      xmlns=\"http://www.w3.org/2000/svg\" \r\n      fill=\"none\" \r\n      viewBox=\"0 0 24 24\"\r\n    >\r\n      <circle \r\n        className=\"opacity-25\" \r\n        cx=\"12\" \r\n        cy=\"12\" \r\n        r=\"10\" \r\n        stroke=\"currentColor\" \r\n        strokeWidth=\"4\"\r\n      />\r\n      <path \r\n        className=\"opacity-75\" \r\n        fill=\"currentColor\" \r\n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\r\n      />\r\n    </svg>\r\n  );\r\n};\r\n\r\n// Page loading spinner for full page loads\r\nexport const PageSpinner: React.FC<{ message?: string }> = ({ message = 'Loading page...' }) => (\r\n  <LoadingSpinner \r\n    message={message}\r\n    size=\"lg\"\r\n    variant=\"primary\"\r\n    fullScreen={true}\r\n  />\r\n);\r\n\r\n// Inline loading spinner for small areas\r\nexport const InlineSpinner: React.FC<{ message?: string; size?: 'sm' | 'md' }> = ({ \r\n  message, \r\n  size = 'md' \r\n}) => (\r\n  <LoadingSpinner \r\n    message={message}\r\n    size={size}\r\n    variant=\"default\"\r\n    className=\"py-8\"\r\n  />\r\n);\r\n\r\n// Overlay loading spinner for modal/overlay contexts\r\nexport const OverlaySpinner: React.FC<{ message?: string }> = ({ message = 'Processing...' }) => (\r\n  <LoadingSpinner \r\n    message={message}\r\n    size=\"md\"\r\n    variant=\"primary\"\r\n    overlay={true}\r\n  />\r\n);\r\n\r\nexport default LoadingSpinner;\r\n"],"names":["ColumnMappingService","constructor","storage","MAPPINGS_KEY","LEARNED_MAPPINGS_KEY","this","createMapping","standardizedName","sourceColumns","payload","res","fetch","concat","process","REACT_APP_API_URL","method","headers","body","JSON","stringify","json","getAllMappings","ok","Error","_unused","deleteMapping","mappingId","clearAllMappings","console","log","response","status","statusText","result","saveMappings","_mappings","autoMapColumns","config","unmappedColumns","getUnmappedColumns","map","c","name","suggestions","processedColumns","Set","column","has","id","matches","filter","similarity","calculateSimilarity","dataType","match","confidenceThreshold","sort","a","b","length","matchedColumns","m","forEach","add","push","generateStandardizedName","columns","confidence","s","name1","name2","type1","type2","normalized1","toLowerCase","replace","normalized2","numbers1","numbers2","some","n1","n2","levenshteinDistance","Math","max","includeDataTypeMatching","str1","str2","n","dp","Array","fill","i","j","min","reduce","trim","mappings","mappedColumns","mapping","key","surveySource","backend","default","getInstance","surveys","getAllSurveys","survey","meta","getSurveyMeta","catch","isArray","header","index","columnName","String","type","uniqueKey","inferDataType","fileContent","columnIndex","values","split","slice","line","_line$split$columnInd","every","v","isNaN","Number","Date","parse","calculatePercentile","numbers","percentile","sortedNumbers","floor","formatCurrency","value","decimals","arguments","undefined","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatNumber","calculateWeightedAverage","weights","sum","acc","weight","weightSum","calculateAverage","val","fuzzyMatchSpecialty","specialty1","specialty2","normalize","str","norm1","norm2","includes","words1","w","words2","common","size","transformSurveyData","rawData","columnMappings","specialtyMappings","rawDataLength","columnMappingsCount","specialtyMappingsCount","row","specialty","allergyRows","columnMappingLookup","Map","set","specialtyMappingLookup","sourceSpecialties","Object","fromEntries","allergyMappings","from","entries","_ref","allSurveySources","transformedRow","normalizedSpecialty","originalSpecialty","providerType","provider_type","geographicRegion","geographic_region","n_orgs","n_incumbents","tcc_p25","tcc_p50","tcc_p75","tcc_p90","wrvu_p25","wrvu_p50","wrvu_p75","wrvu_p90","cf_p25","cf_p50","cf_p75","cf_p90","standardizedSpecialty","get","_ref2","keys","originalColumn","SurveyAnalytics","isLoading","setIsLoading","useState","error","setError","setMappings","setSurveys","filters","setFilters","region","mappingService","useMemo","SpecialtyMappingService","LocalStorageService","columnMappingService","storageService","backendService","BackendService","uniqueValues","bySource","src","list","counts","rows","_rows$","source","specialties","providerTypes","regions","surveySources","selectedMapping","find","sourceNamesBySurvey","_ref3","surveyId","surveyRows","rowSpec","direct","viaSource","useEffect","async","allMappings","uploadedSurveys","totalRows","rowCount","fileName","uploadDate","surveyData","surveyType","data","getSurveyData","limit","transformedRows","allergyTransformedRows","originalSpecialties","transformedSpecialties","sampleSpecialties","processedRow","_objectSpread","indexOf","metrics","tcc","p25","p50","p75","p90","wrvu","cf","allSpecialties","_ref4","_rows$2","surveySpecialties","r","Boolean","hasData","sampleRow","uniqueSpecialties","allergySpecialties","_ref5","fetchData","aggregatedData","allMatchingRows","_ref6","_surveyRows$","expectedSourceSpecialties","filtered","rowSpecialty","selectedSpecialty","specialtyMatch","providerTypeMatch","regionMatch","surveySourceMatch","groupedRows","_groupedRows$get","groupRows","tcc_avg","wrvu_avg","cf_avg","tcc_weighted_avg","wrvu_weighted_avg","cf_weighted_avg","surveySpecialty","filteredData","matchesSpecialty","matchesSurveySource","matchesProviderType","_s$providerType","matchesRegion","_s$geographicRegion","handleFilterChange","filterName","prev","newFilters","_jsx","LoadingSpinner","message","fullScreen","Box","p","children","Typography","color","_jsxs","className","onClick","exportToCSV","exportToExcel","csvData","unshift","csvContent","cell","join","blob","Blob","link","document","createElement","url","URL","createObjectURL","setAttribute","toISOString","visibility","appendChild","click","removeChild","disabled","DocumentTextIcon","FormControl","fullWidth","Select","onChange","e","target","sx","backgroundColor","border","borderRadius","fontSize","borderColor","displayEmpty","MenuItem","title","viewBox","d","fillRule","clipRule","stroke","strokeLinecap","strokeLinejoin","strokeWidth","TableContainer","component","Paper","overflowX","overflowY","minWidth","height","background","Table","width","TableHead","TableRow","TableCell","colSpan","fontWeight","borderBottom","align","borderLeft","textAlign","TableBody","_ref7","React","idx","transition","toLocaleString","simple","weighted","totalIncumbents","calculateSummaryRows","_Fragment","borderTop","variant","overlay","spinnerSize","xs","sm","md","lg","xl","spinnerColor","primary","secondary","success","warning","SpinnerIcon","cn","xmlns","cx","cy","content","ButtonSpinner"],"sourceRoot":""}