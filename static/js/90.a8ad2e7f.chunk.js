"use strict";(self.webpackChunksurvey_data_processing_system=self.webpackChunksurvey_data_processing_system||[]).push([[90,256],{3090:(e,t,a)=>{a.d(t,{w:()=>s});var n=a(2555),i=a(2629),r=a(6256);class s{constructor(e){this.MAPPINGS_KEY="specialty-mappings",this.storageService=void 0,this.GROUPS_KEY="specialty_groups",this.LEARNED_MAPPINGS_KEY="learned-specialty-mappings",this.specialtyCache=new Map,this.cacheExpiry=new Map,this.CACHE_TTL=3e5,this.SYNONYMS={cardiology:["heart","cardiac","cardiovascular"],orthopedics:["ortho","orthopedic","orthopaedic"],pediatrics:["peds","pediatric","children"],"critical care":["intensivist","critical care medicine","critical care/intensivist","intensive care","critical care medicine","cc medicine","cc/intensivist","icu"],"emergency medicine":["emergency","er","ed"],"internal medicine":["internist","internal med"],obstetrics:["ob/gyn","obgyn","obstetrics and gynecology","obstetrics & gynecology"],anesthesiology:["anesthesia","anesthetist"],"family medicine":["family practice","family physician","family med"],neurology:["neurological","neuro"],psychiatry:["psychiatric","mental health"],radiology:["radiologist","imaging","diagnostic radiology"],surgery:["surgeon","surgical"]},this.storageService=e}async saveMapping(e){const t={standardizedName:e.standardizedName,sourceSpecialties:e.sourceSpecialties.map(e=>({specialty:e.specialty,originalName:e.originalName,surveySource:e.surveySource}))};await fetch("http://localhost:3001/api/mappings/specialty",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)})}async getAllMappings(){try{const e=await fetch("http://localhost:3001/api/mappings/specialty");if(!e.ok)throw new Error("Failed to fetch");return await e.json()}catch(e){return console.error("Error fetching specialty mappings:",e),[]}}async getUnmappedSpecialties(){try{console.log("\ud83d\udd04 Fetching unmapped specialties with caching...");const e=r.default.getInstance();console.log("\ud83d\udce1 Calling backendService.getAllSurveys()...");const t=await e.getAllSurveys();console.log("\ud83d\udcca Surveys received:",t.length,t);const a=await this.getAllMappings();console.log("\ud83d\uddfa\ufe0f Existing mappings:",a.length);const n=[],i=new Set;a.forEach(e=>{i.add(e.standardizedName.toLowerCase()),e.sourceSpecialties.forEach(e=>{i.add(e.specialty.toLowerCase())})}),console.log("\u2705 Mapped names collected:",Array.from(i));const s=10;for(let r=0;r<t.length;r+=s){const a=t.slice(r,r+s);console.log("\ud83d\udce6 Processing batch ".concat(Math.floor(r/s)+1,"/").concat(Math.ceil(t.length/s)));const o=a.map(async t=>{try{console.log("\ud83d\udd0d Fetching data for survey ".concat(t.id,"..."));const{rows:a}=await e.getSurveyData(t.id,{},{page:1,limit:1e4});console.log("\ud83d\udccb Survey ".concat(t.id," returned ").concat(a.length," rows"));const n=new Map;a.forEach((e,t)=>{0===t&&console.log("\ud83d\udccb All column names in row:",Object.keys(e));const a=["specialty","Specialty","Provider Type","provider_type","ProviderType","specialty_name","SpecialtyName","specialtyName","PROVIDER_TYPE","SPECIALTY","Specialty Type","specialty_type"];let i="";for(const n of a)if(e[n]&&"string"===typeof e[n]&&e[n].trim()){i=e[n].trim(),console.log('\u2705 Found specialty in column "'.concat(n,'": ').concat(i));break}if(i){const e=i;n.set(e,(n.get(e)||0)+1)}t<5&&console.log("Row ".concat(t,":"),{specialty:i,row:e})}),console.log("\ud83c\udfe5 Found specialties in survey ".concat(t.id,":"),Array.from(n.entries()));return{surveySource:t.type||t.surveyProvider||"Unknown",counts:n}}catch(a){return console.error("\u274c Error processing survey ".concat(t.id,":"),a),{surveySource:"Unknown",counts:new Map}}});(await Promise.all(o)).forEach(e=>{let{surveySource:t,counts:a}=e;a.forEach((e,a)=>{const r=a.toLowerCase();i.has(r)||n.push({id:"".concat(t,"-").concat(a),name:a,surveySource:t,frequency:e})})})}return console.log("\u2705 Found ".concat(n.length," unmapped specialties:"),n),n}catch(e){return console.error("\u274c Error getting unmapped specialties:",e),[]}}async autoMapSpecialties(e){console.log("\ud83d\ude80 Starting auto-mapping with retry logic...");const t=await this.getUnmappedSpecialties(),a=await this.getAllMappings(),n=[],i=[],r=[];for(let s=0;s<t.length;s+=50)r.push(t.slice(s,s+50));for(let s=0;s<r.length;s++){const t=r[s];console.log("\ud83d\udce6 Processing auto-mapping batch ".concat(s+1,"/").concat(r.length));const o=t.map(async t=>this.processSpecialtyWithRetry(t,a,e,3));(await Promise.allSettled(o)).forEach((e,a)=>{const r=t[a];var s;"fulfilled"===e.status&&e.value?n.push(e.value):i.push({specialty:r.name,error:"rejected"===e.status?(null===(s=e.reason)||void 0===s?void 0:s.message)||"Unknown error":"Failed to process"})})}return console.log("\u2705 Auto-mapping completed: ".concat(n.length," successful, ").concat(i.length," failed")),i.length>0&&console.warn("\u26a0\ufe0f Failed mappings:",i),n}async processSpecialtyWithRetry(e,t,a,n){for(let r=1;r<=n;r++)try{const n=this.findBestMatch(e.name,t,a);if(n&&n.confidence>=a.confidenceThreshold){const a=t.find(e=>e.standardizedName===n.standardizedName);if(a)return a.sourceSpecialties.push({id:crypto.randomUUID(),specialty:e.name,originalName:e.name,surveySource:e.surveySource,mappingId:a.id}),await this.saveMapping(a),a}return null}catch(i){if(console.error("Attempt ".concat(r," failed for specialty ").concat(e.name,":"),i),r===n)throw i;await new Promise(e=>setTimeout(e,1e3*Math.pow(2,r)))}return null}findSuggestedMatches(e,t){return t.map(t=>({standardizedName:t.standardizedName,confidence:this.calculateConfidence(e,t)})).filter(e=>e.confidence>.3).sort((e,t)=>t.confidence-e.confidence).slice(0,5)}findBestMatch(e,t,a){return t.map(t=>({standardizedName:t.standardizedName,confidence:this.calculateConfidence(e,t,a.useFuzzyMatching,!0)})).filter(e=>e.confidence>=a.confidenceThreshold).sort((e,t)=>t.confidence-e.confidence)[0]||null}calculateConfidence(e,t){let a=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],n=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],r=0;const s=e.toLowerCase(),o=t.standardizedName.toLowerCase();if(this.getLearnedMapping(e).then(e=>{if(e&&e===t.standardizedName)return 1}),s===o)return 1;if((s.includes("critical care")||s.includes("intensivist")||o.includes("critical care")||o.includes("intensivist"))&&(s.includes("critical care")||s.includes("intensivist"))&&(o.includes("critical care")||o.includes("intensivist")))return.95;if(n)for(const[i,c]of Object.entries(this.SYNONYMS)){const e=s.includes(i)||c.some(e=>s.includes(e)),t=o.includes(i)||c.some(e=>o.includes(e));e&&t&&(r=Math.max(r,.9))}if(a){const e=(0,i.jM)(s,o);r=Math.max(r,e);for(const a of t.sourceSpecialties){const e=a.specialty.toLowerCase();if(s===e)return 1;const t=(0,i.jM)(s,e);r=Math.max(r,t),(s.includes(e)||e.includes(s))&&(r=Math.max(r,.85))}}return r}async saveGroup(e){const t=await this.getAllGroups(),a=t.findIndex(t=>t.id===e.id);if(a>=0)t[a]=(0,n.A)((0,n.A)({},e),{},{updatedAt:new Date});else{const a=new Date;t.push((0,n.A)((0,n.A)({},e),{},{createdAt:a,updatedAt:a}))}await this.storageService.storeSurveyData({id:this.GROUPS_KEY,metadata:{type:"specialty_groups",totalRows:t.length,uniqueSpecialties:[],uniqueProviderTypes:[],uniqueRegions:[],columnMappings:{}},rows:t})}async getAllGroups(){try{return(await this.storageService.getSurveyData(this.GROUPS_KEY)).rows}catch(e){return[]}}async deleteGroup(e){const t=(await this.getAllGroups()).filter(t=>t.id!==e);await this.storageService.storeSurveyData({id:this.GROUPS_KEY,metadata:{type:"specialty_groups",totalRows:t.length,uniqueSpecialties:[],uniqueProviderTypes:[],uniqueRegions:[],columnMappings:{}},rows:t})}async getMappings(){try{return await this.storageService.getItem(this.MAPPINGS_KEY)||[]}catch(e){return console.error("Error fetching specialty mappings:",e),[]}}async createMapping(e,t){const a={id:crypto.randomUUID(),standardizedName:e,sourceSpecialties:t.map(e=>(0,n.A)((0,n.A)({},e),{},{mappingId:crypto.randomUUID()})),createdAt:new Date,updatedAt:new Date};for(const n of t)n.specialty!==e&&await this.saveLearningData(n.specialty,e);return await this.saveMapping(a),a}async updateMapping(e,t){const a=await this.getMappings(),i=a.findIndex(t=>t.id===e);if(-1===i)throw new Error("Mapping with id ".concat(e," not found"));t.standardizedName&&t.standardizedName!==a[i].standardizedName&&await this.saveLearningData(a[i].standardizedName,t.standardizedName);const r=(0,n.A)((0,n.A)((0,n.A)({},a[i]),t),{},{updatedAt:new Date});return await fetch("http://localhost:3001/api/mappings/specialty/".concat(e),{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)}),r}async deleteMapping(e){await fetch("http://localhost:3001/api/mappings/specialty/".concat(e),{method:"DELETE"})}async clearAllMappings(){await fetch("http://localhost:3001/api/mappings/specialty",{method:"DELETE"}),await this.storageService.setItem(this.LEARNED_MAPPINGS_KEY,{})}async suggestMappings(e,t){const a=await this.getMappings(),n=[];for(const i of a){let a=0;const r=this.calculateSimilarity(e.name,i.standardizedName,t);a=Math.max(a,r);for(const n of i.sourceSpecialties){const i=this.calculateSimilarity(e.name,n.specialty,t);a=Math.max(a,i)}a>=t.confidenceThreshold&&n.push({mapping:i,similarity:a})}return n.sort((e,t)=>t.similarity-e.similarity).map(e=>e.mapping)}calculateSimilarity(e,t,a){return(e=e.toLowerCase())===(t=t.toLowerCase())?1:a.useFuzzyMatching?(0,i.jM)(e,t):0}async createGroup(e,t){const a=new Date,n={id:"".concat(e).toLowerCase().replace(/\s+/g,"-"),standardizedName:e,selectedSpecialties:t,createdAt:a,updatedAt:a};return await this.saveGroup(n),n}async generateMappingSuggestions(e){const t=await this.getUnmappedSpecialties(),a=e.useExistingMappings?await this.getAllMappings():[],n=[],r=new Map,s=t=>{let a=t.toLowerCase();return e.useFuzzyMatching?(a=a.replace(/[^a-z0-9\s]/g,"").replace(/\s+/g," ").trim(),a):a.trim()},o=(t,a)=>{const n=s(t),r=s(a);return e.useFuzzyMatching?(0,i.jM)(n,r):n===r?1:0};return t.forEach(t=>{let n=!1;if(e.useExistingMappings)for(const i of a){if(o(t.name,i.standardizedName)>=e.confidenceThreshold){const e=i.standardizedName,a=r.get(e)||[];a.push({name:t.name,surveySource:t.surveySource}),r.set(e,a),n=!0;break}}if(!n){let a=!1;Array.from(r.entries()).forEach(n=>{let[i,r]=n;if(!a){o(t.name,i)>=e.confidenceThreshold&&(r.push({name:t.name,surveySource:t.surveySource}),a=!0)}}),a||r.set(t.name,[{name:t.name,surveySource:t.surveySource}])}}),Array.from(r.entries()).forEach(e=>{let[t,a]=e;if(a.length>0){let e=0,i=0;for(let t=0;t<a.length;t++)for(let n=t+1;n<a.length;n++)e+=o(a[t].name,a[n].name),i++;const r=i>0?e/i:1===a.length?1:0;n.push({standardizedName:t,confidence:r,specialties:a})}}),n.sort((e,t)=>t.confidence-e.confidence)}async saveLearningData(e,t){try{const a=await this.storageService.getItem(this.LEARNED_MAPPINGS_KEY)||{};a[e.toLowerCase()]=t,await this.storageService.setItem(this.LEARNED_MAPPINGS_KEY,a)}catch(a){console.error("Error saving learning data:",a)}}async getLearnedMapping(e){try{return(await this.storageService.getItem(this.LEARNED_MAPPINGS_KEY)||{})[e.toLowerCase()]||null}catch(t){return console.error("Error getting learned mapping:",t),null}}async getLearnedMappings(){try{return await this.storageService.getItem(this.LEARNED_MAPPINGS_KEY)||{}}catch(e){return console.error("Error getting learned mappings:",e),{}}}async removeLearnedMapping(e){try{const t=await this.getLearnedMappings();delete t[e.toLowerCase()],await this.storageService.setItem(this.LEARNED_MAPPINGS_KEY,t)}catch(t){console.error("Error removing learned mapping:",t)}}}},6256:(e,t,a)=>{a.r(t),a.d(t,{default:()=>s});var n=a(2555);const i="http://localhost:3001/api";class r{constructor(){}static getInstance(){return r.instance||(r.instance=new r),r.instance}async getSurveyMeta(e){const t=await fetch("".concat(i,"/survey/").concat(e,"/meta"));if(!t.ok)throw new Error("Failed to fetch survey metadata");return await t.json()}async uploadSurvey(e,t,a,n,r){const s=new FormData;s.append("file",e),s.append("name",t),s.append("year",a.toString()),s.append("type",n);const o=new XMLHttpRequest;return new Promise((e,t)=>{o.open("POST","".concat(i,"/upload")),o.onload=()=>{if(o.status>=200&&o.status<300)try{const t=JSON.parse(o.responseText);e({surveyId:t.surveyId,rowCount:t.rowCount})}catch(a){t(new Error("Invalid server response"))}else t(new Error("Upload failed: ".concat(o.status," ").concat(o.statusText)))},o.onerror=()=>t(new Error("Network error during upload")),o.upload.onprogress=e=>{if(!r||!e.lengthComputable)return;const t=Math.round(e.loaded/e.total*100);r(t)},o.send(s)})}async getAllSurveys(){const e=await fetch("".concat(i,"/surveys"));if(!e.ok)throw new Error("Failed to fetch surveys");return(await e.json()).map(e=>{var t,a,n,i,r,s;return{id:e.id,name:e.name,year:e.year.toString(),type:e.type,uploadDate:e.uploadDate,rowCount:null!==(t=null!==(a=e.rowCount)&&void 0!==a?a:e.row_count)&&void 0!==t?t:0,specialtyCount:null!==(n=null!==(i=e.specialtyCount)&&void 0!==i?i:e.specialty_count)&&void 0!==n?n:0,dataPoints:null!==(r=null!==(s=e.dataPoints)&&void 0!==s?s:e.data_points)&&void 0!==r?r:0,colorAccent:e.colorAccent||"#6366F1",metadata:e.metadata}})}async getSurveyData(e,t,a){const r=new URLSearchParams;null!==t&&void 0!==t&&t.specialty&&r.append("specialty",t.specialty),null!==t&&void 0!==t&&t.providerType&&r.append("providerType",t.providerType),null!==t&&void 0!==t&&t.region&&r.append("region",t.region),null!==a&&void 0!==a&&a.page&&r.append("page",String(a.page)),null!==a&&void 0!==a&&a.limit&&r.append("limit",String(a.limit));const s=await fetch("".concat(i,"/survey/").concat(e,"/data?").concat(r.toString()));if(!s.ok)throw new Error("Failed to fetch survey data");const o=await s.json(),c=(o.data||o).map(e=>(0,n.A)({},e));return{rows:c,pagination:o.pagination?{page:Number(o.pagination.page)||1,limit:Number(o.pagination.limit)||c.length,total:Number(o.pagination.total)||c.length,pages:Number(o.pagination.pages)||1}:void 0}}async getAvailableFiltersForSurvey(e){const t=await fetch("".concat(i,"/survey/").concat(e,"/filters"));if(!t.ok)throw new Error("Failed to fetch filters");return await t.json()}async deleteSurvey(e){if(!(await fetch("".concat(i,"/survey/").concat(e),{method:"DELETE"})).ok)throw new Error("Failed to delete survey")}async deleteAllSurveys(){if(!(await fetch("".concat(i,"/surveys"),{method:"DELETE"})).ok)throw new Error("Failed to delete all surveys")}async exportSurveyData(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"csv";const a=await fetch("".concat(i,"/survey/").concat(e,"/export?format=").concat(t));if(!a.ok)throw new Error("Failed to export survey data");return await a.blob()}async healthCheck(){try{return(await fetch("".concat(i,"/health"))).ok}catch(e){return!1}}}r.instance=void 0;const s=r}}]);
//# sourceMappingURL=90.a8ad2e7f.chunk.js.map