{"version":3,"file":"static/js/762.0350149d.chunk.js","mappings":"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","sources":["components/ui/loading-spinner.tsx","services/BackendService.ts","components/Charts.tsx"],"sourcesContent":["import React from 'react';\nimport { cn } from '../../utils/cn';\n\ninterface LoadingSpinnerProps {\n  message?: string;\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n  variant?: 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'error';\n  fullScreen?: boolean;\n  overlay?: boolean;\n  className?: string;\n}\n\nconst LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ \n  message = 'Loading...', \n  size = 'md',\n  variant = 'primary',\n  fullScreen = false,\n  overlay = false,\n  className\n}) => {\n  const sizeClasses = {\n    xs: 'w-4 h-4',\n    sm: 'w-6 h-6', \n    md: 'w-8 h-8',\n    lg: 'w-12 h-12',\n    xl: 'w-16 h-16'\n  };\n\n  const variantClasses = {\n    default: 'text-gray-600',\n    primary: 'text-indigo-600',\n    secondary: 'text-gray-500',\n    success: 'text-emerald-600',\n    warning: 'text-amber-600',\n    error: 'text-red-600'\n  };\n\n  const spinnerSize = sizeClasses[size];\n  const spinnerColor = variantClasses[variant];\n\n  const SpinnerIcon = () => (\n    <svg \n      className={cn(\n        'animate-spin',\n        spinnerSize,\n        spinnerColor,\n        'inline-block'\n      )}\n      xmlns=\"http://www.w3.org/2000/svg\" \n      fill=\"none\" \n      viewBox=\"0 0 24 24\"\n    >\n      <circle \n        className=\"opacity-25\" \n        cx=\"12\" \n        cy=\"12\" \n        r=\"10\" \n        stroke=\"currentColor\" \n        strokeWidth=\"4\"\n      />\n      <path \n        className=\"opacity-75\" \n        fill=\"currentColor\" \n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n      />\n    </svg>\n  );\n\n  const content = (\n    <div className={cn(\n      'flex flex-col items-center justify-center gap-3',\n      fullScreen ? 'min-h-screen' : 'min-h-[200px]',\n      className\n    )}>\n      <SpinnerIcon />\n      {message && (\n        <p className={cn(\n          'text-sm font-medium text-center',\n          variant === 'default' ? 'text-gray-600' : 'text-gray-700'\n        )}>\n          {message}\n        </p>\n      )}\n    </div>\n  );\n\n  if (overlay) {\n    return (\n      <div className=\"fixed inset-0 flex items-center justify-center bg-white/90 backdrop-blur-sm z-50\">\n        {content}\n      </div>\n    );\n  }\n\n  return content;\n};\n\n// Button loading spinner for inline use\nexport const ButtonSpinner: React.FC<{ size?: 'sm' | 'md' }> = ({ size = 'md' }) => {\n  const sizeClasses = {\n    sm: 'w-4 h-4',\n    md: 'w-5 h-5'\n  };\n\n  return (\n    <svg \n      className={cn(\n        'animate-spin text-current',\n        sizeClasses[size]\n      )}\n      xmlns=\"http://www.w3.org/2000/svg\" \n      fill=\"none\" \n      viewBox=\"0 0 24 24\"\n    >\n      <circle \n        className=\"opacity-25\" \n        cx=\"12\" \n        cy=\"12\" \n        r=\"10\" \n        stroke=\"currentColor\" \n        strokeWidth=\"4\"\n      />\n      <path \n        className=\"opacity-75\" \n        fill=\"currentColor\" \n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n      />\n    </svg>\n  );\n};\n\n// Page loading spinner for full page loads\nexport const PageSpinner: React.FC<{ message?: string }> = ({ message = 'Loading page...' }) => (\n  <LoadingSpinner \n    message={message}\n    size=\"lg\"\n    variant=\"primary\"\n    fullScreen={true}\n  />\n);\n\n// Inline loading spinner for small areas\nexport const InlineSpinner: React.FC<{ message?: string; size?: 'sm' | 'md' }> = ({ \n  message, \n  size = 'md' \n}) => (\n  <LoadingSpinner \n    message={message}\n    size={size}\n    variant=\"default\"\n    className=\"py-8\"\n  />\n);\n\n// Overlay loading spinner for modal/overlay contexts\nexport const OverlaySpinner: React.FC<{ message?: string }> = ({ message = 'Processing...' }) => (\n  <LoadingSpinner \n    message={message}\n    size=\"md\"\n    variant=\"primary\"\n    overlay={true}\n  />\n);\n\nexport default LoadingSpinner;\n","import { \n  ISurveyData, \n  ISurveyRow \n} from '../types/survey';\n\nconst API_BASE_URL = 'https://survey-aggregator-backend.azurewebsites.net/api';\n\nclass BackendService {\n  private static instance: BackendService;\n\n  private constructor() {}\n\n  public static getInstance(): BackendService {\n    if (!BackendService.instance) {\n      BackendService.instance = new BackendService();\n    }\n    return BackendService.instance;\n  }\n\n  // Get survey metadata (includes original columns list)\n  public async getSurveyMeta(surveyId: string): Promise<{ columns?: string[] }> {\n    const response = await fetch(`${API_BASE_URL}/survey/${surveyId}/meta`);\n    if (!response.ok) throw new Error('Failed to fetch survey metadata');\n    return await response.json();\n  }\n\n  // Upload a survey file\n  public async uploadSurvey(\n    file: File,\n    surveyName: string,\n    surveyYear: number,\n    surveyType: string,\n    onProgress?: (percent: number) => void\n  ): Promise<{ surveyId: string; rowCount: number }> {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('name', surveyName);\n    formData.append('year', surveyYear.toString());\n    formData.append('type', surveyType);\n\n    // Use XHR to report real upload progress\n    const xhr = new XMLHttpRequest();\n    const promise = new Promise<{ surveyId: string; rowCount: number }>((resolve, reject) => {\n      xhr.open('POST', `${API_BASE_URL}/upload`);\n      xhr.onload = () => {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          try {\n            const result = JSON.parse(xhr.responseText);\n            resolve({ surveyId: result.surveyId, rowCount: result.rowCount });\n          } catch (err) {\n            reject(new Error('Invalid server response'));\n          }\n        } else {\n          reject(new Error(`Upload failed: ${xhr.status} ${xhr.statusText}`));\n        }\n      };\n      xhr.onerror = () => reject(new Error('Network error during upload'));\n      xhr.upload.onprogress = (event) => {\n        if (!onProgress || !event.lengthComputable) return;\n        const percent = Math.round((event.loaded / event.total) * 100);\n        onProgress(percent);\n      };\n      xhr.send(formData);\n    });\n\n    return promise;\n  }\n\n  // Get all surveys\n  public async getAllSurveys(): Promise<ISurveyData[]> {\n    const response = await fetch(`${API_BASE_URL}/surveys`);\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch surveys');\n    }\n\n    const surveys = await response.json();\n    \n    // Transform backend format to frontend format\n    return surveys.map((survey: any) => ({\n      id: survey.id,\n      name: survey.name,\n      year: survey.year.toString(),\n      type: survey.type,\n      uploadDate: survey.uploadDate,\n      rowCount: survey.rowCount ?? survey.row_count ?? 0,\n      specialtyCount: survey.specialtyCount ?? survey.specialty_count ?? 0,\n      dataPoints: survey.dataPoints ?? survey.data_points ?? 0,\n      colorAccent: survey.colorAccent || '#6366F1',\n      metadata: survey.metadata\n    }));\n  }\n\n  // Get survey data with filters\n  // CRITICAL: Always pass options.limit for large datasets to avoid missing data\n  // See docs/ALLERGY_IMMUNOLOGY_FIX.md for details on the 100-row default limit issue\n  public async getSurveyData(\n    surveyId: string,\n    filters?: {\n      specialty?: string;\n      providerType?: string;\n      region?: string;\n    },\n    options?: { page?: number; limit?: number }\n  ): Promise<{ rows: ISurveyRow[]; pagination?: { page: number; limit: number; total: number; pages: number } }>{\n    const params = new URLSearchParams();\n    if (filters?.specialty) params.append('specialty', filters.specialty);\n    if (filters?.providerType) params.append('providerType', filters.providerType);\n    if (filters?.region) params.append('region', filters.region);\n    if (options?.page) params.append('page', String(options.page));\n    if (options?.limit) params.append('limit', String(options.limit));\n\n    const response = await fetch(`${API_BASE_URL}/survey/${surveyId}/data?${params.toString()}`);\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch survey data');\n    }\n\n    const data = await response.json();\n    \n    // Transform backend format to frontend format\n    // Backend returns { data: [...], pagination: {...} }\n    const surveyData = data.data || data;\n    // Keep all keys so the grid can render every original column.\n    const rows = surveyData.map((row: any) => ({ ...row }));\n    const pagination = data.pagination\n      ? {\n          page: Number(data.pagination.page) || 1,\n          limit: Number(data.pagination.limit) || rows.length,\n          total: Number(data.pagination.total) || rows.length,\n          pages: Number(data.pagination.pages) || 1,\n        }\n      : undefined;\n    return { rows, pagination };\n  }\n\n  // Get available filters\n  public async getAvailableFiltersForSurvey(surveyId: string): Promise<{\n    specialties: string[];\n    providerTypes: string[];\n    regions: string[];\n  }> {\n    const response = await fetch(`${API_BASE_URL}/survey/${surveyId}/filters`);\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch filters');\n    }\n\n    return await response.json();\n  }\n\n  // Delete a survey\n  public async deleteSurvey(surveyId: string): Promise<void> {\n    const response = await fetch(`${API_BASE_URL}/survey/${surveyId}`, {\n      method: 'DELETE',\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to delete survey');\n    }\n  }\n\n  // Delete all surveys\n  public async deleteAllSurveys(): Promise<void> {\n    const response = await fetch(`${API_BASE_URL}/surveys`, { method: 'DELETE' });\n    if (!response.ok) throw new Error('Failed to delete all surveys');\n  }\n\n  // Export survey data\n  public async exportSurveyData(\n    surveyId: string,\n    format: 'csv' | 'json' = 'csv'\n  ): Promise<Blob> {\n    const response = await fetch(`${API_BASE_URL}/survey/${surveyId}/export?format=${format}`);\n    \n    if (!response.ok) {\n      throw new Error('Failed to export survey data');\n    }\n\n    return await response.blob();\n  }\n\n  // Health check\n  public async healthCheck(): Promise<boolean> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/health`);\n      return response.ok;\n    } catch {\n      return false;\n    }\n  }\n}\n\nexport default BackendService;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { \n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, \n  PieChart, Pie, Cell, ScatterChart, Scatter, AreaChart, Area, ComposedChart, Line\n} from 'recharts';\nimport BackendService from '../services/BackendService';\nimport LoadingSpinner from './ui/loading-spinner';\n\ninterface ChartData {\n  specialty: string;\n  tcc_p25: number;\n  tcc_p50: number;\n  tcc_p75: number;\n  tcc_p90: number;\n  cf_p25: number;\n  cf_p50: number;\n  cf_p75: number;\n  cf_p90: number;\n  wrvu_p25: number;\n  wrvu_p50: number;\n  wrvu_p75: number;\n  wrvu_p90: number;\n  region: string;\n  providerType: string;\n}\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D'];\n\nexport const Charts: React.FC = () => {\n  const [loading, setLoading] = useState(true);\n  const [chartData, setChartData] = useState<ChartData[]>([]);\n  const [selectedSpecialties, setSelectedSpecialties] = useState<string[]>([]);\n  const [selectedRegion, setSelectedRegion] = useState<string>('');\n  const [selectedProviderType, setSelectedProviderType] = useState<string>('');\n  const [chartType, setChartType] = useState<'comparison' | 'productivity' | 'percentiles' | 'regional'>('comparison');\n  const [metricType, setMetricType] = useState<'tcc' | 'cf' | 'wrvu'>('tcc');\n  const [percentileType, setPercentileType] = useState<'p25' | 'p50' | 'p75' | 'p90' | 'all'>('p50');\n  const [searchTerm, setSearchTerm] = useState<string>('');\n\n  const backendService = BackendService.getInstance();\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = async () => {\n    try {\n      setLoading(true);\n      console.log('Loading chart data...');\n      \n      const surveys = await backendService.getAllSurveys();\n      console.log('Surveys loaded:', surveys.length);\n      \n      let allData: ChartData[] = [];\n\n      for (const survey of surveys) {\n        try {\n          const data = await backendService.getSurveyData(survey.id, undefined, { limit: 10000 });\n          console.log(`Survey ${survey.id} data:`, data?.rows?.length || 0, 'rows');\n          \n          if (data && data.rows && data.rows.length > 0) {\n            const transformedData = data.rows.map((row: any) => ({\n              specialty: row.specialty || row.normalizedSpecialty || row.survey_specialty || 'Unknown',\n              tcc_p25: Number(row.tcc_p25) || Number(row.tcc_p25th) || 0,\n              tcc_p50: Number(row.tcc_p50) || Number(row.tcc_p50th) || Number(row.tcc_median) || 0,\n              tcc_p75: Number(row.tcc_p75) || Number(row.tcc_p75th) || 0,\n              tcc_p90: Number(row.tcc_p90) || Number(row.tcc_p90th) || 0,\n              cf_p25: Number(row.cf_p25) || Number(row.cf_p25th) || Number(row.conversion_factor_p25) || 0,\n              cf_p50: Number(row.cf_p50) || Number(row.cf_p50th) || Number(row.conversion_factor_p50) || Number(row.conversion_factor) || 0,\n              cf_p75: Number(row.cf_p75) || Number(row.cf_p75th) || Number(row.conversion_factor_p75) || 0,\n              cf_p90: Number(row.cf_p90) || Number(row.cf_p90th) || Number(row.conversion_factor_p90) || 0,\n              wrvu_p25: Number(row.wrvu_p25) || Number(row.wrvu_p25th) || Number(row.work_rvu_p25) || 0,\n              wrvu_p50: Number(row.wrvu_p50) || Number(row.wrvu_p50th) || Number(row.work_rvu_p50) || Number(row.work_rvu) || 0,\n              wrvu_p75: Number(row.wrvu_p75) || Number(row.wrvu_p75th) || Number(row.work_rvu_p75) || 0,\n              wrvu_p90: Number(row.wrvu_p90) || Number(row.wrvu_p90th) || Number(row.work_rvu_p90) || 0,\n              region: row.geographic_region || row.region || row.geographicRegion || 'Unknown',\n              providerType: row.provider_type || row.providerType || 'Unknown',\n            }));\n            allData = allData.concat(transformedData);\n          }\n        } catch (error) {\n          console.error(`Error loading survey ${survey.id}:`, error);\n        }\n      }\n\n      console.log('Total data loaded:', allData.length, 'rows');\n      console.log('Sample data:', allData.slice(0, 3));\n      \n      setChartData(allData);\n    } catch (error) {\n      console.error('Error loading chart data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const specialties = useMemo(() => {\n    const unique = Array.from(new Set(chartData.map(d => d.specialty))).sort();\n    return unique;\n  }, [chartData]);\n\n  const filteredSpecialties = useMemo(() => {\n    if (!searchTerm) return specialties;\n    return specialties.filter(specialty => \n      specialty.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n  }, [specialties, searchTerm]);\n\n  const regions = useMemo(() => {\n    const unique = Array.from(new Set(chartData.map(d => d.region))).sort();\n    return unique;\n  }, [chartData]);\n\n  const providerTypes = useMemo(() => {\n    const unique = Array.from(new Set(chartData.map(d => d.providerType))).sort();\n    return unique;\n  }, [chartData]);\n\n  const filteredData = useMemo(() => {\n    console.log('Filtering data with:', {\n      totalData: chartData.length,\n      selectedSpecialties,\n      selectedRegion,\n      selectedProviderType\n    });\n    \n    const filtered = chartData.filter(d => {\n      // Only filter by specialty if specialties are selected\n      if (selectedSpecialties.length > 0 && !selectedSpecialties.includes(d.specialty)) {\n        return false;\n      }\n      \n      // Only filter by region if region is selected\n      if (selectedRegion && d.region !== selectedRegion) {\n        return false;\n      }\n      \n      // Only filter by provider type if provider type is selected\n      if (selectedProviderType && d.providerType !== selectedProviderType) {\n        return false;\n      }\n      \n      return true;\n    });\n    \n    console.log('Filtered data result:', filtered.length, 'rows');\n    return filtered;\n  }, [chartData, selectedSpecialties, selectedRegion, selectedProviderType]);\n\n  // Multi-specialty comparison data\n  const comparisonData = useMemo(() => {\n    console.log('Generating comparison data:', {\n      selectedSpecialties: selectedSpecialties.length,\n      filteredData: filteredData.length\n    });\n    \n    if (selectedSpecialties.length === 0) {\n      console.log('No specialties selected for comparison');\n      return [];\n    }\n    \n    if (filteredData.length === 0) {\n      console.log('No filtered data available for comparison');\n      return [];\n    }\n    \n    const grouped = filteredData.reduce((acc, d) => {\n      if (!acc[d.specialty]) {\n        acc[d.specialty] = {\n          specialty: d.specialty,\n          tcc_p25: 0, tcc_p50: 0, tcc_p75: 0, tcc_p90: 0,\n          cf_p25: 0, cf_p50: 0, cf_p75: 0, cf_p90: 0,\n          wrvu_p25: 0, wrvu_p50: 0, wrvu_p75: 0, wrvu_p90: 0,\n          count: 0\n        };\n      }\n      acc[d.specialty].tcc_p25 += d.tcc_p25;\n      acc[d.specialty].tcc_p50 += d.tcc_p50;\n      acc[d.specialty].tcc_p75 += d.tcc_p75;\n      acc[d.specialty].tcc_p90 += d.tcc_p90;\n      acc[d.specialty].cf_p25 += d.cf_p25;\n      acc[d.specialty].cf_p50 += d.cf_p50;\n      acc[d.specialty].cf_p75 += d.cf_p75;\n      acc[d.specialty].cf_p90 += d.cf_p90;\n      acc[d.specialty].wrvu_p25 += d.wrvu_p25;\n      acc[d.specialty].wrvu_p50 += d.wrvu_p50;\n      acc[d.specialty].wrvu_p75 += d.wrvu_p75;\n      acc[d.specialty].wrvu_p90 += d.wrvu_p90;\n      acc[d.specialty].count += 1;\n      return acc;\n    }, {} as Record<string, any>);\n\n    const result = Object.values(grouped).map(item => ({\n      ...item,\n      tcc_p25: Math.round(item.tcc_p25 / item.count),\n      tcc_p50: Math.round(item.tcc_p50 / item.count),\n      tcc_p75: Math.round(item.tcc_p75 / item.count),\n      tcc_p90: Math.round(item.tcc_p90 / item.count),\n      cf_p25: Math.round((item.cf_p25 / item.count) * 100) / 100,\n      cf_p50: Math.round((item.cf_p50 / item.count) * 100) / 100,\n      cf_p75: Math.round((item.cf_p75 / item.count) * 100) / 100,\n      cf_p90: Math.round((item.cf_p90 / item.count) * 100) / 100,\n      wrvu_p25: Math.round(item.wrvu_p25 / item.count),\n      wrvu_p50: Math.round(item.wrvu_p50 / item.count),\n      wrvu_p75: Math.round(item.wrvu_p75 / item.count),\n      wrvu_p90: Math.round(item.wrvu_p90 / item.count),\n    }));\n    \n    console.log('Comparison data generated:', result.length, 'specialties');\n    return result;\n  }, [filteredData, selectedSpecialties]);\n\n  // If only one specialty is selected, show percentile breakdown instead of comparison\n  const shouldShowPercentileBreakdown = selectedSpecialties.length === 1;\n  \n  // Percentile breakdown data for single specialty\n  const percentileBreakdownData = useMemo(() => {\n    if (!shouldShowPercentileBreakdown || comparisonData.length === 0) return [];\n    \n    const specialty = comparisonData[0];\n    return [\n      { percentile: '25th', value: specialty[`${metricType}_p25`] || 0 },\n      { percentile: '50th', value: specialty[`${metricType}_p50`] || 0 },\n      { percentile: '75th', value: specialty[`${metricType}_p75`] || 0 },\n      { percentile: '90th', value: specialty[`${metricType}_p90`] || 0 },\n    ];\n  }, [shouldShowPercentileBreakdown, comparisonData, metricType]);\n\n  // All percentiles data for multiple specialties\n  const allPercentilesData = useMemo(() => {\n    if (percentileType !== 'all' || comparisonData.length === 0) return [];\n    \n    const colors = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6', '#06B6D4', '#84CC16', '#F97316'];\n    \n    const result: any[] = [];\n    comparisonData.forEach((specialty, index) => {\n      const color = colors[index % colors.length];\n      result.push(\n        { specialty: specialty.specialty, percentile: '25th', value: specialty[`${metricType}_p25`] || 0, color },\n        { specialty: specialty.specialty, percentile: '50th', value: specialty[`${metricType}_p50`] || 0, color },\n        { specialty: specialty.specialty, percentile: '75th', value: specialty[`${metricType}_p75`] || 0, color },\n        { specialty: specialty.specialty, percentile: '90th', value: specialty[`${metricType}_p90`] || 0, color }\n      );\n    });\n    return result;\n  }, [comparisonData, metricType, percentileType]);\n\n  // Check if we should show all percentiles chart\n  const shouldShowAllPercentiles = percentileType === 'all' && selectedSpecialties.length > 1;\n\n  // Productivity comparison data\n  const productivityData = useMemo(() => {\n    console.log('Generating productivity data:', {\n      comparisonDataLength: comparisonData.length,\n      metricType,\n      percentileType\n    });\n    \n    if (selectedSpecialties.length === 0) {\n      console.log('No specialties selected for productivity chart');\n      return [];\n    }\n    \n    if (comparisonData.length === 0) {\n      console.log('No comparison data available for productivity chart');\n      return [];\n    }\n    \n    // Handle \"All Percentiles\" case for productivity chart\n    if (percentileType === 'all') {\n      console.log('Generating productivity data for all percentiles');\n      const colors = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6', '#06B6D4', '#84CC16', '#F97316'];\n      const result: any[] = [];\n      \n      comparisonData.forEach((specialty, specialtyIndex) => {\n        const specialtyColor = colors[specialtyIndex % colors.length];\n        // Calculate productivity for each percentile\n        const percentiles = ['p25', 'p50', 'p75', 'p90'];\n        percentiles.forEach(percentile => {\n          const tccValue = specialty[`tcc_${percentile}`] || 0;\n          const wrvuValue = specialty[`wrvu_${percentile}`] || 0;\n          \n          if (tccValue > 0 && wrvuValue > 0) {\n            const compensationPerWRVU = tccValue / wrvuValue;\n            result.push({\n              specialty: specialty.specialty,\n              percentile: percentile.replace('p', '') + 'th',\n              tcc: tccValue,\n              wrvu: wrvuValue,\n              compensationPerWRVU: Math.round(compensationPerWRVU),\n              productivityScore: Math.round(compensationPerWRVU * 100),\n              x: wrvuValue,\n              y: tccValue,\n              color: specialtyColor\n            });\n          }\n        });\n      });\n      \n      console.log('Productivity data for all percentiles generated:', result.length, 'items');\n      return result;\n    }\n    \n    const result = comparisonData.map(item => {\n      const tccValue = item[`tcc_${percentileType}`] || 0;\n      const wrvuValue = item[`wrvu_${percentileType}`] || 0;\n      const cfValue = item[`cf_${percentileType}`] || 0;\n      \n      // Calculate productivity metrics\n      const compensationPerWRVU = wrvuValue > 0 ? tccValue / wrvuValue : 0;\n      const productivityScore = wrvuValue > 0 ? (tccValue / wrvuValue) * 100 : 0;\n      \n      console.log(`Productivity data for ${item.specialty}:`, {\n        tcc: tccValue,\n        wrvu: wrvuValue,\n        cf: cfValue,\n        compensationPerWRVU,\n        productivityScore\n      });\n      \n      return {\n        specialty: item.specialty,\n        tcc: tccValue,\n        wrvu: wrvuValue,\n        cf: cfValue,\n        compensationPerWRVU: Math.round(compensationPerWRVU),\n        productivityScore: Math.round(productivityScore),\n        // For scatter plot: x-axis = wRVU, y-axis = TCC\n        x: wrvuValue,\n        y: tccValue\n      };\n    }).filter(item => item.tcc > 0 && item.wrvu > 0); // Only include items with valid data\n    \n    console.log('Productivity data generated:', result.length, 'items');\n    console.log('Sample productivity data:', result.slice(0, 3));\n    return result;\n  }, [comparisonData, metricType, percentileType, selectedSpecialties]);\n\n  // Regional comparison data\n  const regionalData = useMemo(() => {\n    console.log('Generating regional data:', {\n      filteredDataLength: filteredData.length,\n      selectedSpecialtiesLength: selectedSpecialties.length,\n      metricType,\n      percentileType\n    });\n    \n    if (selectedSpecialties.length === 0) {\n      console.log('No specialties selected for regional chart');\n      return [];\n    }\n    \n    if (filteredData.length === 0) {\n      console.log('No filtered data available for regional chart');\n      return [];\n    }\n    \n    // Skip regional chart if \"All Percentiles\" is selected\n    if (percentileType === 'all') {\n      console.log('Skipping regional chart for \"All Percentiles\" selection');\n      return [];\n    }\n    \n    const grouped = filteredData.reduce((acc, d) => {\n      const key = `${d.specialty}-${d.region}`;\n      if (!acc[key]) {\n        acc[key] = {\n          specialty: d.specialty,\n          region: d.region,\n          value: 0,\n          count: 0\n        };\n      }\n      acc[key].value += d[`${metricType}_${percentileType}`] || 0;\n      acc[key].count += 1;\n      return acc;\n    }, {} as Record<string, any>);\n\n    const result = Object.values(grouped).map(item => ({\n      specialty: item.specialty,\n      region: item.region,\n      value: Math.round(item.value / item.count)\n    }));\n    \n    console.log('Regional data generated:', result.length, 'items');\n    return result;\n  }, [filteredData, selectedSpecialties, metricType, percentileType]);\n\n  const handleSpecialtyToggle = (specialty: string) => {\n    setSelectedSpecialties(prev => {\n      if (prev.includes(specialty)) {\n        return prev.filter(s => s !== specialty);\n      } else {\n        return [...prev, specialty];\n      }\n    });\n  };\n\n  const getMetricLabel = () => {\n    const metricLabels = {\n      tcc: 'Total Cash Compensation',\n      cf: 'Conversion Factor',\n      wrvu: 'Work RVUs'\n    };\n    const percentileLabels = {\n      p25: '25th Percentile',\n      p50: '50th Percentile (Median)',\n      p75: '75th Percentile',\n      p90: '90th Percentile',\n      all: 'All Percentiles'\n    };\n    return `${metricLabels[metricType]} - ${percentileLabels[percentileType]}`;\n  };\n\n  const getYAxisFormatter = (value: number) => {\n    if (metricType === 'tcc') {\n      return `$${(value / 1000).toFixed(0)}K`;\n    } else if (metricType === 'cf') {\n      return `$${value.toFixed(2)}`;\n    } else {\n      return value.toLocaleString();\n    }\n  };\n\n  const getTooltipFormatter = (value: any) => {\n    if (metricType === 'tcc') {\n      return [`$${value.toLocaleString()}`, getMetricLabel()];\n    } else if (metricType === 'cf') {\n      return [`$${value.toFixed(2)}`, getMetricLabel()];\n    } else {\n      return [value.toLocaleString(), getMetricLabel()];\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-12\">\n          <LoadingSpinner \n            message=\"Loading chart data...\"\n            size=\"lg\"\n            variant=\"primary\"\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Specialty Selection Card */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-8\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h3 className=\"text-xl font-semibold text-gray-900\">Select Specialties</h3>\n            <p className=\"text-gray-600 text-sm\">Choose specialties to compare in the charts below</p>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded-full\">\n              {selectedSpecialties.length} Selected\n            </span>\n          </div>\n        </div>\n        \n        {/* Search Input */}\n        <div className=\"relative mb-6\">\n          <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n            <svg className=\"h-5 w-5 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n            </svg>\n          </div>\n          <input\n            type=\"text\"\n            placeholder=\"Search specialties...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"w-full pl-10 pr-4 py-3 border border-gray-300 bg-gray-50/50 rounded-xl focus:ring-2 focus:ring-blue-500 focus:bg-white focus:border-blue-500 transition-all duration-200 placeholder-gray-400\"\n          />\n        </div>\n        \n        {/* Specialty Grid */}\n        <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-3 max-h-64 overflow-y-auto p-4 bg-gray-50/30 rounded-xl border border-gray-200\">\n          {filteredSpecialties.map(specialty => (\n            <button\n              key={specialty}\n              onClick={() => handleSpecialtyToggle(specialty)}\n              className={`group relative p-3 text-sm font-medium rounded-xl border-2 transition-all duration-200 min-h-[48px] flex items-center justify-center ${\n                selectedSpecialties.includes(specialty)\n                  ? 'bg-gradient-to-r from-blue-500 to-indigo-600 text-white border-blue-500 shadow-lg shadow-blue-500/25 transform scale-105'\n                  : 'bg-white/50 border-gray-200 text-gray-700 hover:border-gray-300 hover:bg-white/70 hover:shadow-md'\n              }`}\n            >\n              {specialty}\n              {selectedSpecialties.includes(specialty) && (\n                <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-green-500 rounded-full flex items-center justify-center\">\n                  <svg className=\"w-3 h-3 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                  </svg>\n                </div>\n              )}\n            </button>\n          ))}\n        </div>\n\n        {/* Status Messages */}\n        {filteredSpecialties.length === 0 && searchTerm && (\n          <div className=\"mt-4 p-4 bg-amber-50 border border-amber-200 rounded-xl\">\n            <div className=\"flex items-center\">\n              <svg className=\"w-5 h-5 text-amber-500 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n              </svg>\n              <span className=\"text-sm font-medium text-amber-800\">No specialties found matching \"{searchTerm}\"</span>\n            </div>\n          </div>\n        )}\n\n        {selectedSpecialties.length > 0 && (\n          <div className=\"mt-4 p-4 bg-gray-50 border border-gray-200 rounded-xl\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <svg className=\"w-5 h-5 text-gray-500 mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                </svg>\n                <span className=\"text-sm font-medium text-gray-800\">\n                  {selectedSpecialties.length} {selectedSpecialties.length === 1 ? 'specialty' : 'specialties'} selected\n                </span>\n              </div>\n              <button\n                onClick={() => setSelectedSpecialties([])}\n                className=\"text-sm text-gray-600 hover:text-gray-800 font-medium\"\n              >\n                Clear all\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Filters Card */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-8\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-6\">Chart Filters</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {/* Region Filter */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Region</label>\n            <select\n              value={selectedRegion}\n              onChange={(e) => setSelectedRegion(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 bg-gray-50/50 rounded-xl focus:ring-2 focus:ring-blue-500 focus:bg-white focus:border-blue-500 transition-all duration-200\"\n            >\n              <option value=\"\">All Regions</option>\n              {regions.map(region => (\n                <option key={region} value={region}>{region}</option>\n              ))}\n            </select>\n          </div>\n\n          {/* Provider Type Filter */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Provider Type</label>\n            <select\n              value={selectedProviderType}\n              onChange={(e) => setSelectedProviderType(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 bg-gray-50/50 rounded-xl focus:ring-2 focus:ring-blue-500 focus:bg-white focus:border-blue-500 transition-all duration-200\"\n            >\n              <option value=\"\">All Types</option>\n              {providerTypes.map(type => (\n                <option key={type} value={type}>{type}</option>\n              ))}\n            </select>\n          </div>\n\n          {/* Chart Type Filter */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Chart Type</label>\n            <select\n              value={chartType}\n              onChange={(e) => setChartType(e.target.value as any)}\n              className=\"w-full px-3 py-2 border border-gray-300 bg-gray-50/50 rounded-xl focus:ring-2 focus:ring-blue-500 focus:bg-white focus:border-blue-500 transition-all duration-200\"\n            >\n              <option value=\"comparison\">Comparison Chart</option>\n              <option value=\"productivity\">Productivity Chart</option>\n              <option value=\"percentiles\">Percentiles Chart</option>\n              <option value=\"regional\">Regional Chart</option>\n            </select>\n          </div>\n\n          {/* Metric Type Filter */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Metric</label>\n            <select\n              value={metricType}\n              onChange={(e) => setMetricType(e.target.value as any)}\n              className=\"w-full px-3 py-2 border border-gray-300 bg-gray-50/50 rounded-xl focus:ring-2 focus:ring-blue-500 focus:bg-white focus:border-blue-500 transition-all duration-200\"\n            >\n              <option value=\"tcc\">Total Cash Compensation</option>\n              <option value=\"cf\">Conversion Factor</option>\n              <option value=\"wrvu\">Work RVU</option>\n            </select>\n          </div>\n        </div>\n\n        {/* Percentile Filter (only show for relevant chart types) */}\n        {(chartType === 'comparison' || chartType === 'productivity' || chartType === 'regional') && (\n          <div className=\"mt-4\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Percentile</label>\n            <select\n              value={percentileType}\n              onChange={(e) => setPercentileType(e.target.value as any)}\n              className=\"w-full px-3 py-2 border border-gray-300 bg-gray-50/50 rounded-xl focus:ring-2 focus:ring-blue-500 focus:bg-white focus:border-blue-500 transition-all duration-200\"\n            >\n              <option value=\"p25\">25th Percentile</option>\n              <option value=\"p50\">50th Percentile (Median)</option>\n              <option value=\"p75\">75th Percentile</option>\n              <option value=\"p90\">90th Percentile</option>\n              <option value=\"all\">All Percentiles</option>\n            </select>\n          </div>\n        )}\n      </div>\n\n      {/* Charts */}\n      <div className=\"space-y-8\">\n        {selectedSpecialties.length === 0 ? (\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-12 text-center\">\n            <div className=\"w-16 h-16 bg-gradient-to-r from-blue-100 to-indigo-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <svg className=\"w-8 h-8 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n              </svg>\n            </div>\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No Specialties Selected</h3>\n            <p className=\"text-gray-600\">Please select specialties above to start comparing them.</p>\n          </div>\n        ) : chartData.length === 0 ? (\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-12 text-center\">\n            <div className=\"w-16 h-16 bg-gradient-to-r from-red-100 to-pink-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <svg className=\"w-8 h-8 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n              </svg>\n            </div>\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No Data Available</h3>\n            <p className=\"text-gray-600\">No survey data is available. Please upload surveys first.</p>\n          </div>\n        ) : filteredData.length === 0 ? (\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-12 text-center\">\n            <div className=\"w-16 h-16 bg-gradient-to-r from-yellow-100 to-orange-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <svg className=\"w-8 h-8 text-yellow-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n              </svg>\n            </div>\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No Data Matches Filters</h3>\n            <p className=\"text-gray-600\">The selected filters don't match any available data. Try adjusting your filters.</p>\n          </div>\n        ) : (\n          <>\n            {chartType === 'comparison' && (\n              <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-xl font-semibold text-gray-900\">\n                    {shouldShowPercentileBreakdown ? 'Percentile Breakdown' : \n                     shouldShowAllPercentiles ? 'All Percentiles Comparison' : 'Side-by-Side Comparison'}\n                  </h3>\n                  <span className=\"text-sm text-gray-500 bg-gray-100 px-3 py-1 rounded-full\">\n                    {getMetricLabel()}\n                  </span>\n                </div>\n                \n                <ResponsiveContainer width=\"100%\" height={400}>\n                  <BarChart data={shouldShowPercentileBreakdown ? percentileBreakdownData : \n                                   shouldShowAllPercentiles ? allPercentilesData : comparisonData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n                    <XAxis \n                      dataKey={shouldShowPercentileBreakdown ? \"percentile\" : \n                               shouldShowAllPercentiles ? \"specialty\" : \"specialty\"} \n                      height={120} \n                      tick={{ fontSize: 11, fill: '#6b7280' }} \n                      angle={shouldShowPercentileBreakdown ? 0 : -30} \n                      textAnchor={shouldShowPercentileBreakdown ? \"middle\" : \"end\"} \n                      interval={0} \n                    />\n                    <YAxis tickFormatter={getYAxisFormatter} tick={{ fontSize: 12, fill: '#6b7280' }} />\n                    <Tooltip \n                      formatter={getTooltipFormatter}\n                      contentStyle={{\n                        backgroundColor: 'rgba(255, 255, 255, 0.95)',\n                        border: '1px solid #e5e7eb',\n                        borderRadius: '12px',\n                        boxShadow: '0 10px 25px rgba(0, 0, 0, 0.1)'\n                      }}\n                      content={({ active, payload, label }) => {\n                        if (active && payload && payload.length) {\n                          const value = payload[0].value;\n                          \n                          if (shouldShowPercentileBreakdown) {\n                            return (\n                              <div className=\"bg-white/95 backdrop-blur-sm p-4 border border-gray-200 rounded-xl shadow-xl\">\n                                <p className=\"font-semibold text-gray-900 mb-2\">{selectedSpecialties[0]} - {label} Percentile</p>\n                                <p className=\"text-blue-600 font-bold text-lg\">\n                                  {metricType === 'tcc' ? `$${value.toLocaleString()}` : \n                                   metricType === 'cf' ? `$${value.toFixed(2)}` : \n                                   value.toLocaleString()}\n                                </p>\n                              </div>\n                            );\n                          } else if (shouldShowAllPercentiles) {\n                            const data = payload[0].payload;\n                            return (\n                              <div className=\"bg-white/95 backdrop-blur-sm p-4 border border-gray-200 rounded-xl shadow-xl\">\n                                <p className=\"font-semibold text-gray-900 mb-2\">{data.specialty} - {data.percentile} Percentile</p>\n                                <p className=\"text-blue-600 font-bold text-lg\">\n                                  {metricType === 'tcc' ? `$${value.toLocaleString()}` : \n                                   metricType === 'cf' ? `$${value.toFixed(2)}` : \n                                   value.toLocaleString()}\n                                </p>\n                              </div>\n                            );\n                          } else {\n                            const sorted = [...comparisonData].sort((a, b) => \n                              b[`${metricType}_${percentileType}`] - a[`${metricType}_${percentileType}`]\n                            );\n                            const highest = sorted[0];\n                            const lowest = sorted[sorted.length - 1];\n                            const currentItem = comparisonData.find(item => item.specialty === label);\n                            \n                            if (currentItem) {\n                              const vsHighest = value - highest[`${metricType}_${percentileType}`];\n                              const vsLowest = value - lowest[`${metricType}_${percentileType}`];\n                              const percentVsHighest = (vsHighest / highest[`${metricType}_${percentileType}`]) * 100;\n                              const percentVsLowest = (vsLowest / lowest[`${metricType}_${percentileType}`]) * 100;\n                              \n                              return (\n                                <div className=\"bg-white/95 backdrop-blur-sm p-4 border border-gray-200 rounded-xl shadow-xl\">\n                                  <p className=\"font-semibold text-gray-900 mb-2\">{label}</p>\n                                  <p className=\"text-blue-600 font-bold text-lg mb-2\">\n                                    {metricType === 'tcc' ? `$${value.toLocaleString()}` : \n                                     metricType === 'cf' ? `$${value.toFixed(2)}` : \n                                     value.toLocaleString()}\n                                  </p>\n                                  {vsHighest !== 0 && (\n                                    <p className=\"text-xs text-gray-600 mb-1\">\n                                      {vsHighest > 0 ? '+' : ''}{metricType === 'tcc' ? `$${vsHighest.toLocaleString()}` : vsHighest.toLocaleString()} vs highest\n                                      ({percentVsHighest > 0 ? '+' : ''}{percentVsHighest.toFixed(1)}%)\n                                    </p>\n                                  )}\n                                  {vsLowest !== 0 && (\n                                    <p className=\"text-xs text-gray-600\">\n                                      {vsLowest > 0 ? '+' : ''}{metricType === 'tcc' ? `$${vsLowest.toLocaleString()}` : vsLowest.toLocaleString()} vs lowest\n                                      ({percentVsLowest > 0 ? '+' : ''}{percentVsLowest.toFixed(1)}%)\n                                    </p>\n                                  )}\n                                </div>\n                              );\n                            }\n                          }\n                        }\n                        return null;\n                      }}\n                    />\n                    <Bar \n                      dataKey={shouldShowPercentileBreakdown ? \"value\" : \n                               shouldShowAllPercentiles ? \"value\" : `${metricType}_${percentileType}`} \n                      fill=\"url(#blueGradient)\"\n                      name={getMetricLabel()}\n                      barSize={shouldShowPercentileBreakdown ? 60 : 40}\n                      radius={[3, 3, 0, 0]}\n                      label={({ value, x, y, width }) => {\n                        if (metricType === 'tcc') {\n                          return (\n                            <text \n                              x={x + width / 2} \n                              y={y - 6} \n                              textAnchor=\"middle\" \n                              fontSize=\"11\" \n                              fontWeight=\"500\" \n                              fill=\"#374151\"\n                            >\n                              ${(value / 1000).toFixed(0)}K\n                            </text>\n                          );\n                        } else if (metricType === 'cf') {\n                          return (\n                            <text \n                              x={x + width / 2} \n                              y={y - 6} \n                              textAnchor=\"middle\" \n                              fontSize=\"11\" \n                              fontWeight=\"500\" \n                              fill=\"#374151\"\n                            >\n                              ${value.toFixed(2)}\n                            </text>\n                          );\n                        } else {\n                          return (\n                            <text \n                              x={x + width / 2} \n                              y={y - 6} \n                              textAnchor=\"middle\" \n                              fontSize=\"11\" \n                              fontWeight=\"500\" \n                              fill=\"#374151\"\n                            >\n                              {(value / 1000).toFixed(0)}K\n                            </text>\n                          );\n                        }\n                      }}\n                    >\n                      {shouldShowAllPercentiles && allPercentilesData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Bar>\n                    <defs>\n                      <linearGradient id=\"blueGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"0%\" stopColor=\"#3b82f6\" />\n                        <stop offset=\"100%\" stopColor=\"#1d4ed8\" />\n                      </linearGradient>\n                    </defs>\n                  </BarChart>\n                </ResponsiveContainer>\n                \n                {shouldShowPercentileBreakdown && (\n                  <div className=\"mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                    <p className=\"text-sm text-blue-800\">\n                      <strong>Tip:</strong> Select multiple specialties to compare them side-by-side, or choose different percentiles to see the full range of compensation data.\n                    </p>\n                  </div>\n                )}\n                \n                {shouldShowAllPercentiles && (\n                  <div className=\"mt-4 p-4 bg-green-50 border border-green-200 rounded-lg\">\n                    <p className=\"text-sm text-green-800\">\n                      <strong>All Percentiles View:</strong> Each specialty shows 4 bars representing the 25th, 50th, 75th, and 90th percentiles for comprehensive comparison.\n                    </p>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {chartType === 'productivity' && (\n              <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-xl font-semibold text-gray-900\">Productivity Analysis</h3>\n                  <span className=\"text-sm text-gray-500 bg-gray-100 px-3 py-1 rounded-full\">\n                    Compensation per Work RVU\n                  </span>\n                </div>\n                \n                {selectedSpecialties.length === 0 ? (\n                  <div className=\"h-96 flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                        <svg className=\"w-8 h-8 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n                        </svg>\n                      </div>\n                      <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Select Specialties First</h3>\n                      <p className=\"text-gray-600\">Please select specialties above to view productivity analysis.</p>\n                    </div>\n                  </div>\n                ) : productivityData.length === 0 ? (\n                  <div className=\"h-96 flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                        <svg className=\"w-8 h-8 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n                        </svg>\n                      </div>\n                      <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Productivity Data</h3>\n                      <p className=\"text-gray-600\">No data available for the selected filters and specialties.</p>\n                      <div className=\"mt-4 text-sm text-gray-500\">\n                        <p>Selected specialties: {selectedSpecialties.join(', ')}</p>\n                        <p>Selected region: {selectedRegion || 'All'}</p>\n                        <p>Selected provider type: {selectedProviderType || 'All'}</p>\n                        <p>Selected percentile: {percentileType}</p>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div>\n                    <div className=\"mb-6\">\n                      <p className=\"text-sm text-gray-600 mb-2\">\n                        This chart shows compensation per Work RVU for each specialty. Higher values indicate specialties that receive more compensation per unit of work productivity.\n                      </p>\n                      <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                        <span>Selected Percentile: {percentileType === 'all' ? 'All Percentiles' : \n                          percentileType === 'p25' ? '25th' : \n                          percentileType === 'p50' ? '50th (Median)' : \n                          percentileType === 'p75' ? '75th' : '90th'}</span>\n                        <span>•</span>\n                        <span>Data Points: {productivityData.length}</span>\n                      </div>\n                    </div>\n                    \n                    <ResponsiveContainer width=\"100%\" height={400}>\n                      <BarChart data={productivityData}>\n                        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n                        <XAxis \n                          dataKey={percentileType === 'all' ? \"specialty\" : \"specialty\"} \n                          height={120} \n                          tick={{ fontSize: 11, fill: '#6b7280' }}\n                          angle={-30}\n                          textAnchor=\"end\"\n                          interval={0}\n                        />\n                        <YAxis \n                          tickFormatter={(value) => `$${value.toLocaleString()}`}\n                          tick={{ fontSize: 12, fill: '#6b7280' }}\n                        />\n                        <Tooltip \n                          formatter={(value: any) => [`$${value.toLocaleString()}`, 'Compensation per wRVU']}\n                          labelFormatter={(label) => percentileType === 'all' ? \n                            `Specialty: ${label}` : `Specialty: ${label}`}\n                          content={({ active, payload, label }) => {\n                            if (active && payload && payload.length) {\n                              const data = productivityData.find(item => \n                                percentileType === 'all' ? \n                                item.specialty === label && item.percentile : \n                                item.specialty === label\n                              );\n                              if (data) {\n                                return (\n                                  <div className=\"bg-white/95 backdrop-blur-sm p-4 border border-gray-200 rounded-xl shadow-xl\">\n                                    <p className=\"font-semibold text-gray-900 mb-2\">\n                                      {percentileType === 'all' ? `${data.specialty} - ${data.percentile} Percentile` : label}\n                                    </p>\n                                    <div className=\"space-y-1 text-sm\">\n                                      <p><span className=\"font-medium\">Compensation per wRVU:</span> ${data.compensationPerWRVU.toLocaleString()}</p>\n                                      <p><span className=\"font-medium\">Total Cash Compensation:</span> ${data.tcc.toLocaleString()}</p>\n                                      <p><span className=\"font-medium\">Work RVU:</span> {data.wrvu.toLocaleString()}</p>\n                                      {data.cf && <p><span className=\"font-medium\">Conversion Factor:</span> ${data.cf.toFixed(2)}</p>}\n                                    </div>\n                                  </div>\n                                );\n                              }\n                            }\n                            return null;\n                          }}\n                        />\n                        <Bar \n                          dataKey=\"compensationPerWRVU\" \n                          fill={percentileType === 'all' ? undefined : \"url(#productivityGradient)\"}\n                          name=\"Compensation per wRVU\"\n                          radius={[3, 3, 0, 0]}\n                          barSize={percentileType === 'all' ? 30 : 36}\n                          label={({ value, x, y, width }) => (\n                            <text \n                              x={x + width / 2} \n                              y={y - 6} \n                              textAnchor=\"middle\" \n                              fontSize=\"11\" \n                              fontWeight=\"500\" \n                              fill=\"#374151\"\n                            >\n                              ${value.toLocaleString()}\n                            </text>\n                          )}\n                        >\n                          {percentileType === 'all' && productivityData.map((entry, index) => (\n                            <Cell key={`cell-${index}`} fill={entry.color || '#3B82F6'} />\n                          ))}\n                        </Bar>\n                        <defs>\n                          <linearGradient id=\"productivityGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"0%\" stopColor=\"#3b82f6\" />\n                            <stop offset=\"100%\" stopColor=\"#1d4ed8\" />\n                          </linearGradient>\n                        </defs>\n                      </BarChart>\n                    </ResponsiveContainer>\n                  </div>\n                )}\n              </div>\n            )}\n\n            {chartType === 'percentiles' && (\n              <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-xl font-semibold text-gray-900\">Percentile Breakdown</h3>\n                  <span className=\"text-sm text-gray-500 bg-gray-100 px-3 py-1 rounded-full\">\n                    {metricType.toUpperCase()}\n                  </span>\n                </div>\n                <ResponsiveContainer width=\"100%\" height={400}>\n                  <ComposedChart data={allPercentilesData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n                    <XAxis dataKey=\"specialty\" height={120} tick={{ fontSize: 11, fill: '#6b7280' }} angle={-30} textAnchor=\"end\" interval={0} />\n                    <YAxis tickFormatter={getYAxisFormatter} tick={{ fontSize: 12, fill: '#6b7280' }} />\n                    <Tooltip formatter={getTooltipFormatter} \n                      contentStyle={{\n                        backgroundColor: 'rgba(255, 255, 255, 0.95)',\n                        border: '1px solid #e5e7eb',\n                        borderRadius: '12px',\n                        boxShadow: '0 10px 25px rgba(0, 0, 0, 0.1)'\n                      }}\n                    />\n                    <Legend \n                      verticalAlign=\"bottom\" \n                      align=\"center\"\n                      wrapperStyle={{\n                        paddingTop: '20px',\n                        display: 'flex',\n                        justifyContent: 'space-evenly',\n                        width: '100%'\n                      }}\n                      content={({ payload }) => (\n                        <div className=\"flex justify-center space-x-16 mt-4\">\n                          {payload?.map((entry, index) => (\n                            <div key={index} className=\"flex items-center space-x-2\">\n                              <div \n                                className=\"w-4 h-4 rounded\"\n                                style={{ \n                                  backgroundColor: entry.color,\n                                  border: entry.type === 'line' ? '2px solid' : 'none'\n                                }}\n                              />\n                              <span className=\"text-sm text-gray-700 font-medium\">\n                                {entry.value}\n                              </span>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    />\n                    <Bar \n                      dataKey=\"value\" \n                      fill=\"url(#blueGradient)\" \n                      name={getMetricLabel()}\n                      barSize={40}\n                      radius={[3, 3, 0, 0]}\n                      label={({ value, x, y, width }) => {\n                        if (metricType === 'tcc') {\n                          return (\n                            <text \n                              x={x + width / 2} \n                              y={y - 6} \n                              textAnchor=\"middle\" \n                              fontSize=\"11\" \n                              fontWeight=\"500\" \n                              fill=\"#374151\"\n                            >\n                              ${value.toLocaleString()}\n                            </text>\n                          );\n                        } else if (metricType === 'cf') {\n                          return (\n                            <text \n                              x={x + width / 2} \n                              y={y - 6} \n                              textAnchor=\"middle\" \n                              fontSize=\"11\" \n                              fontWeight=\"500\" \n                              fill=\"#374151\"\n                            >\n                              ${value.toFixed(2)}\n                            </text>\n                          );\n                        } else {\n                          return (\n                            <text \n                              x={x + width / 2} \n                              y={y - 6} \n                              textAnchor=\"middle\" \n                              fontSize=\"11\" \n                              fontWeight=\"500\" \n                              fill=\"#374151\"\n                            >\n                              {value.toLocaleString()}\n                            </text>\n                          );\n                        }\n                      }}\n                    />\n                    <Line type=\"monotone\" dataKey=\"value\" stroke=\"#f59e0b\" strokeWidth={3} name=\"Median\" />\n                    <defs>\n                      <linearGradient id=\"blueGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"0%\" stopColor=\"#3b82f6\" />\n                        <stop offset=\"100%\" stopColor=\"#1d4ed8\" />\n                      </linearGradient>\n                    </defs>\n                  </ComposedChart>\n                </ResponsiveContainer>\n              </div>\n            )}\n\n            {chartType === 'regional' && (\n              <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-xl font-semibold text-gray-900\">Regional Comparison</h3>\n                  <span className=\"text-sm text-gray-500 bg-gray-100 px-3 py-1 rounded-full\">\n                    {getMetricLabel()}\n                  </span>\n                </div>\n                <ResponsiveContainer width=\"100%\" height={400}>\n                  <BarChart data={regionalData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n                    <XAxis dataKey=\"region\" height={120} tick={{ fontSize: 11, fill: '#6b7280' }} angle={-30} textAnchor=\"end\" interval={0} />\n                    <YAxis tickFormatter={getYAxisFormatter} tick={{ fontSize: 12, fill: '#6b7280' }} />\n                    <Tooltip formatter={getTooltipFormatter} \n                      contentStyle={{\n                        backgroundColor: 'rgba(255, 255, 255, 0.95)',\n                        border: '1px solid #e5e7eb',\n                        borderRadius: '12px',\n                        boxShadow: '0 10px 25px rgba(0, 0, 0, 0.1)'\n                      }}\n                    />\n                    <Legend \n                      verticalAlign=\"bottom\" \n                      align=\"center\"\n                      wrapperStyle={{\n                        paddingTop: '20px',\n                        display: 'flex',\n                        justifyContent: 'space-evenly',\n                        width: '100%'\n                      }}\n                      content={({ payload }) => (\n                        <div className=\"flex justify-center space-x-16 mt-4\">\n                          {payload?.map((entry, index) => (\n                            <div key={index} className=\"flex items-center space-x-2\">\n                              <div \n                                className=\"w-4 h-4 rounded\"\n                                style={{ \n                                  backgroundColor: entry.color,\n                                  border: entry.type === 'line' ? '2px solid' : 'none'\n                                }}\n                              />\n                              <span className=\"text-sm text-gray-700 font-medium\">\n                                {entry.value}\n                              </span>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    />\n                    <Bar \n                      dataKey=\"value\" \n                      fill=\"url(#greenGradient)\" \n                      name={getMetricLabel()}\n                      barSize={40}\n                      radius={[3, 3, 0, 0]}\n                      label={({ value, x, y, width }) => {\n                        if (metricType === 'tcc') {\n                          return (\n                            <text \n                              x={x + width / 2} \n                              y={y - 6} \n                              textAnchor=\"middle\" \n                              fontSize=\"11\" \n                              fontWeight=\"500\" \n                              fill=\"#374151\"\n                            >\n                              ${value.toLocaleString()}\n                            </text>\n                          );\n                        } else if (metricType === 'cf') {\n                          return (\n                            <text \n                              x={x + width / 2} \n                              y={y - 6} \n                              textAnchor=\"middle\" \n                              fontSize=\"11\" \n                              fontWeight=\"500\" \n                              fill=\"#374151\"\n                            >\n                              ${value.toFixed(2)}\n                            </text>\n                          );\n                        } else {\n                          return (\n                            <text \n                              x={x + width / 2} \n                              y={y - 6} \n                              textAnchor=\"middle\" \n                              fontSize=\"11\" \n                              fontWeight=\"500\" \n                              fill=\"#374151\"\n                            >\n                              {value.toLocaleString()}\n                            </text>\n                          );\n                        }\n                      }}\n                    />\n                    <defs>\n                      <linearGradient id=\"greenGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"0%\" stopColor=\"#10b981\" />\n                        <stop offset=\"100%\" stopColor=\"#059669\" />\n                      </linearGradient>\n                    </defs>\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Charts;\n"],"names":["LoadingSpinner","_ref","message","size","variant","fullScreen","overlay","className","spinnerSize","xs","sm","md","lg","xl","spinnerColor","default","primary","secondary","success","warning","error","SpinnerIcon","_jsxs","cn","xmlns","fill","viewBox","children","_jsx","cx","cy","r","stroke","strokeWidth","d","content","ButtonSpinner","_ref2","API_BASE_URL","BackendService","constructor","getInstance","instance","getSurveyMeta","surveyId","response","fetch","concat","ok","Error","json","uploadSurvey","file","surveyName","surveyYear","surveyType","onProgress","formData","FormData","append","toString","xhr","XMLHttpRequest","Promise","resolve","reject","open","onload","status","result","JSON","parse","responseText","rowCount","err","statusText","onerror","upload","onprogress","event","lengthComputable","percent","Math","round","loaded","total","send","getAllSurveys","map","survey","_survey$rowCount","_survey$specialtyCoun","_ref3","_survey$dataPoints","id","name","year","type","uploadDate","row_count","specialtyCount","specialty_count","dataPoints","data_points","colorAccent","metadata","getSurveyData","filters","options","params","URLSearchParams","specialty","providerType","region","page","String","limit","data","rows","row","_objectSpread","pagination","Number","length","pages","undefined","getAvailableFiltersForSurvey","deleteSurvey","method","deleteAllSurveys","exportSurveyData","format","arguments","blob","healthCheck","_unused","Charts","loading","setLoading","useState","chartData","setChartData","selectedSpecialties","setSelectedSpecialties","selectedRegion","setSelectedRegion","selectedProviderType","setSelectedProviderType","chartType","setChartType","metricType","setMetricType","percentileType","setPercentileType","searchTerm","setSearchTerm","backendService","useEffect","loadData","async","console","log","surveys","allData","_data$rows","transformedData","normalizedSpecialty","survey_specialty","tcc_p25","tcc_p25th","tcc_p50","tcc_p50th","tcc_median","tcc_p75","tcc_p75th","tcc_p90","tcc_p90th","cf_p25","cf_p25th","conversion_factor_p25","cf_p50","cf_p50th","conversion_factor_p50","conversion_factor","cf_p75","cf_p75th","conversion_factor_p75","cf_p90","cf_p90th","conversion_factor_p90","wrvu_p25","wrvu_p25th","work_rvu_p25","wrvu_p50","wrvu_p50th","work_rvu_p50","work_rvu","wrvu_p75","wrvu_p75th","work_rvu_p75","wrvu_p90","wrvu_p90th","work_rvu_p90","geographic_region","geographicRegion","provider_type","slice","specialties","useMemo","Array","from","Set","sort","filteredSpecialties","filter","toLowerCase","includes","regions","providerTypes","filteredData","totalData","filtered","comparisonData","grouped","reduce","acc","count","Object","values","item","shouldShowPercentileBreakdown","percentileBreakdownData","percentile","value","allPercentilesData","colors","forEach","index","color","push","shouldShowAllPercentiles","productivityData","comparisonDataLength","specialtyIndex","specialtyColor","tccValue","wrvuValue","compensationPerWRVU","replace","tcc","wrvu","productivityScore","x","y","cfValue","cf","regionalData","filteredDataLength","selectedSpecialtiesLength","key","getMetricLabel","p25","p50","p75","p90","all","getYAxisFormatter","toFixed","toLocaleString","getTooltipFormatter","strokeLinecap","strokeLinejoin","placeholder","onChange","e","target","onClick","prev","s","handleSpecialtyToggle","fillRule","clipRule","_Fragment","ResponsiveContainer","width","height","BarChart","CartesianGrid","strokeDasharray","XAxis","dataKey","tick","fontSize","angle","textAnchor","interval","YAxis","tickFormatter","Tooltip","formatter","contentStyle","backgroundColor","border","borderRadius","boxShadow","active","payload","label","sorted","a","b","highest","lowest","find","vsHighest","vsLowest","percentVsHighest","percentVsLowest","Bar","barSize","radius","fontWeight","entry","Cell","x1","y1","x2","y2","offset","stopColor","join","labelFormatter","_ref4","toUpperCase","ComposedChart","Legend","verticalAlign","align","wrapperStyle","paddingTop","display","justifyContent","_ref5","style","_ref6","Line","_ref7","_ref8"],"sourceRoot":""}