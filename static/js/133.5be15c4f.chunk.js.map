{"version":3,"file":"static/js/133.5be15c4f.chunk.js","mappings":"+wBAgBO,MAAMA,EAAsBC,GAC1BA,EAAUC,cAAcC,QAAQ,cAAe,KAAKC,OA6FhDC,EAAsBA,CAACC,EAAoBC,KACtD,MAAMC,EAAQR,EAAmBM,GAC3BG,EAAQT,EAAmBO,GAEjC,GAAIC,IAAUC,EAAO,OAAO,EAE5B,MAAMC,EAASF,EAAMG,MAAM,OAAOC,OAAOC,GAAKA,EAAEC,OAAS,GACnDC,EAASN,EAAME,MAAM,OAAOC,OAAOC,GAAKA,EAAEC,OAAS,GAEzD,GAAsB,IAAlBJ,EAAOI,QAAkC,IAAlBC,EAAOD,OAAc,OAAO,EAEvD,MAAME,EAASN,EAAOE,OAAOC,GAAKE,EAAOE,SAASJ,IAC5CK,EAAQ,IAAIC,IAAI,IAAIT,KAAWK,IAErC,OAAOC,EAAOF,OAASI,EAAME,MC/GlBC,EAA+C,CAC1D,eAAkB,UAClB,KAAQ,UACR,UAAa,UACb,IAAO,UACP,KAAQ,UACR,QAAW,WAMAC,EAA4BA,CACvCC,EACAC,IAEOD,EAAYX,OAAOX,IAExB,GAAIuB,EAAQC,WAAY,CACtB,MAAMC,EAAcF,EAAQC,WAAWvB,cAIvC,KAFED,EAAU0B,KAAKzB,cAAce,SAASS,IACtCzB,EAAU2B,aAAa1B,cAAce,SAASS,IAC5B,OAAO,CAC7B,CAGA,QAAIF,EAAQI,cAAgB3B,EAAU2B,eAAiBJ,EAAQI,iBAK3DJ,EAAQK,WAAa5B,EAAU4B,UAAYL,EAAQK,aAW9CC,EACXP,IAEA,MAAMQ,EAAU,IAAIC,IAOpB,OALAT,EAAYU,QAAQhC,IAClB,MAAMiC,EAAUH,EAAQI,IAAIlC,EAAU2B,eAAiB,GACvDG,EAAQK,IAAInC,EAAU2B,aAAc,IAAIM,EAASjC,MAG5C8B,GAMIM,EAA0BA,CACrCC,EACAb,KAEA,IAAKA,EAAY,OAAOa,EAExB,MAAMZ,EAAcD,EAAWvB,cAC/B,OAAOoC,EAAS1B,OAAO2B,GACrBA,EAAQC,iBAAiBtC,cAAce,SAASS,IAChDa,EAAQE,kBAAkBC,KAAKzC,GAC7BA,EAAUA,UAAUC,cAAce,SAASS,MAQpCiB,EAAwBA,CACnCC,EACAnB,KAEA,IAAKA,EAAY,OAAOmB,EAExB,MAAMlB,EAAcD,EAAWvB,cACzB2C,EAAmC,CAAC,EAW1C,OATAC,OAAOC,QAAQH,GAAiBX,QAAQe,IAA4B,IAA1BC,EAAUC,GAAUF,GAE1DC,EAAS/C,cAAce,SAASS,IAChCwB,EAAUhD,cAAce,SAASS,MAEjCmB,EAASI,GAAYC,KAIlBL,GAMIM,EAA6BA,CACxCC,EACAC,EACAT,EACAU,KAEA,MAAMC,EAAoC,GACpCC,EAAuB,IAAIrC,IAG3BsC,EAAkB,IAAIzB,IAgF5B,OA9EAoB,EAAoBnB,QAAQhC,IAC1B,MAAMyD,EAAiB1D,EAAmBC,EAAU0B,MAC9CO,EAAUuB,EAAgBtB,IAAIuB,IAAmB,GACvDD,EAAgBrB,IAAIsB,EAAgB,IAAIxB,EAASjC,MAInDwD,EAAgBxB,QAAQ,CAACV,EAAamC,KACpC,GAA2B,IAAvBnC,EAAYT,OAAc,OAG9B,IAAI0B,EAAmBkB,EACnBC,EAAa,GAEjB,GAAIL,EAAOM,oBAAqB,CAE9B,MAAMC,EAAgBR,EAAiBS,KAAKvB,IAC1C,MAAMwB,EAAoB/D,EAAmBuC,EAAQC,kBACrD,OAAOnC,EAAoB0D,EAAmBL,GAAkB,KAG9DG,IACFrB,EAAmBqB,EAAcrB,iBACjCmB,EAAa,GAEjB,CASA,GANIf,EAAgBc,KAClBlB,EAAmBI,EAAgBc,GACnCC,EAAaK,KAAKC,IAAIN,EAAY,MAIhCL,EAAOY,iBAAkB,CAE3B,MAAMC,EAAkBd,EAAiBzC,OAAO2B,GAC3BlC,EACjBL,EAAmBuC,EAAQC,kBAC3BkB,GAEkB,IAGtB,GAAIS,EAAgBrD,OAAS,EAAG,CAa9B0B,EAZkB2B,EAAgBC,OAAO,CAACC,EAAMnC,KAC9C,MAAMoC,EAAiBjE,EACrBL,EAAmBqE,EAAK7B,kBACxBkB,GAMF,OAJ0BrD,EACxBL,EAAmBkC,EAAQM,kBAC3BkB,GAEyBY,EAAiBpC,EAAUmC,IAG3B7B,iBAC7BmB,EAAaK,KAAKC,IAAIN,EAAY,IACpC,CACF,CAGIA,GAAcL,EAAOiB,sBACvBhB,EAAYiB,KAAK,CACfhC,mBACAmB,aACApC,YAAaA,EAAYkD,IAAIC,IAAC,CAC5B/C,KAAM+C,EAAE/C,KACRC,aAAc8C,EAAE9C,kBAKpBL,EAAYU,QAAQyC,GAAKlB,EAAqBmB,IAAID,EAAEE,QAIjDrB,GAMIsB,EAA8BA,CACzCtB,EACAD,KAEA,MAAMwB,EAAQvB,EAAYzC,OACpBiE,EAASxB,EAAY3C,OAAO8D,GAAKA,EAAEf,YAAcL,EAAOiB,qBAAqBzD,OAGnF,MAAO,CACLgE,QACAC,SACAC,QALcF,EAAQC,EAMtBxB,gBAOS0B,EACX3B,IAEA,MAAM4B,EAAmB,GAczB,OAZI5B,EAAOiB,oBAAsB,GAAKjB,EAAOiB,oBAAsB,IACjEW,EAAOV,KAAK,gDAG4B,mBAA/BlB,EAAOM,qBAChBsB,EAAOV,KAAK,iDAGyB,mBAA5BlB,EAAOY,kBAChBgB,EAAOV,KAAK,8CAGP,CACLW,QAA2B,IAAlBD,EAAOpE,OAChBoE,WAOSE,EAAqBC,GACzB,IAAIC,KAAKD,GAAME,mBAAmB,QAAS,CAChDC,MAAO,QACPC,IAAK,UACLC,KAAM,YAOGC,EAAwBC,GAC5BvE,EAAqBuE,IAAW,UAM5BC,EAAwBA,CACnCvD,EACAc,KAQA,MAAM0C,EAAgBxD,EAASxB,OACzBiF,EAAgB3C,EAAoBtC,OACpCkF,EAAyB1D,EAAS8B,OACtC,CAAC6B,EAAK1D,IAAY0D,EAAM1D,EAAQE,kBAAkB3B,OAClD,GAEIoF,EAA+BJ,EAAgB,EACjDE,EAAyBF,EACzB,EAGEK,EAAe,IAAInE,IACzBoB,EAAoBnB,QAAQhC,IAC1B,MAAMmG,EAAQD,EAAahE,IAAIlC,EAAU2B,eAAiB,EAC1DuE,EAAa/D,IAAInC,EAAU2B,aAAcwE,EAAQ,KAGnD,IAAIC,EAAyB,GACzBC,EAAW,EAQf,OAPAH,EAAalE,QAAQ,CAACmE,EAAOR,KACvBQ,EAAQE,IACVA,EAAWF,EACXC,EAAyBT,KAItB,CACLE,gBACAC,gBACAC,yBACAE,+BACAG,2BC7OSE,EAAiBA,KAE5B,MAAOjE,EAAUkE,IAAeC,EAAAA,EAAAA,UAA8B,KACvDrD,EAAqBsD,IAA0BD,EAAAA,EAAAA,UAA+B,KAC9EE,EAAqBC,IAA0BH,EAAAA,EAAAA,UAA+B,KAC9E7D,EAAiBiE,IAAsBJ,EAAAA,EAAAA,UAAiC,CAAC,IACzEK,EAASC,IAAcN,EAAAA,EAAAA,WAAS,IAChCO,EAAOC,IAAYR,EAAAA,EAAAA,UAAwB,OAC3CS,EAAWC,IAAgBV,EAAAA,EAAAA,UAA4C,aAGvEhF,EAAY2F,IAAiBX,EAAAA,EAAAA,UAAS,KACtCY,EAAkBC,IAAuBb,EAAAA,EAAAA,UAAS,IAGnDc,GAAiBC,EAAAA,EAAAA,SAAQ,IAC7B,IAAIC,EAAAA,EAAwB,IAAIC,EAAAA,GAChC,KAIFC,EAAAA,EAAAA,WAAU,KACRC,KACC,KAGHD,EAAAA,EAAAA,WAAU,KACHb,IAECxE,EAASxB,OAAS,EACpBqG,EAAa,UAGN/D,EAAoBtC,OAAS,EACpCqG,EAAa,YAGNrE,OAAO+E,KAAKjF,GAAiB9B,OAAS,GAC7CqG,EAAa,aAIhB,CAACL,EAASxE,EAASxB,OAAQsC,EAAoBtC,OAAQ8B,IAG1D,MAAMkF,EAAkBvF,IAA0BwF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC7CxF,GAAO,IACVE,kBAAmBF,EAAQE,kBAAkBgC,IAAIC,IAACqD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC7CrD,GAAC,IACJE,GAAIF,EAAEE,IAAMoD,OAAOC,aACnBrG,aAAc8C,EAAE9C,kBAIdsG,EAA4BjI,IAA6B8H,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC1D9H,GAAS,IACZ2B,aAAc3B,EAAU2B,eAIpBuG,GAAmBX,EAAAA,EAAAA,SAAQ,KAC/B,MAAMhG,EAA0B,CAAEC,cAC5B2G,EAAoBhF,EAAoBqB,IAAIyD,GAClD,OAAO5G,EAA0B8G,EAAmB5G,IACnD,CAAC4B,EAAqB3B,IAEnB4G,GAAsBb,EAAAA,EAAAA,SAAQ,IAC3B1F,EAAyBqG,GAC/B,CAACA,IAEEG,GAAmBd,EAAAA,EAAAA,SAAQ,KAC/B,MAAMe,EAAoBjG,EAASmC,IAAIqD,GACvC,OAAOzF,EAAwBkG,EAAmBlB,IACjD,CAAC/E,EAAU+E,IAERmB,GAAkBhB,EAAAA,EAAAA,SAAQ,IACvB7E,EAAsBC,EAAiByE,GAC7C,CAACzE,EAAiByE,IAGfO,GAAWa,EAAAA,EAAAA,aAAYC,UAC3B,IACE3B,GAAW,GACXE,EAAS,MAET0B,QAAQC,IAAI,qCACZ,MAAOC,EAAcC,EAAcC,SAAqBC,QAAQC,IAAI,CAClE1B,EAAe2B,iBACf3B,EAAe4B,yBACf5B,EAAe6B,uBAGjBT,QAAQC,IAAI,eAAgB,CAC1BtG,SAAUuG,EAAa/H,OACvBuI,SAAUP,EAAahI,OACvBwI,QAASxG,OAAO+E,KAAKkB,GAAe,CAAC,GAAGjI,SAG1C0F,EAAYqC,GACZnC,EAAuBoC,GACvBjC,EAAmBkC,GAAe,CAAC,EACrC,CAAE,MAAOQ,GACPZ,QAAQ3B,MAAM,sBAAuBuC,GACrCtC,EAAS,gCACX,CAAC,QACCF,GAAW,EACb,GACC,CAACQ,IAGEiC,GAAkBf,EAAAA,EAAAA,aAAaxI,IACnC2G,EAAuB6C,GACjBA,EAAK/G,KAAKgC,GAAKA,EAAEE,KAAO3E,EAAU2E,IAC7B6E,EAAK7I,OAAO8D,GAAKA,EAAEE,KAAO3E,EAAU2E,IAEpC,IAAI6E,EAAMxJ,KAGpB,IAEGyJ,GAAoBjB,EAAAA,EAAAA,aAAaxI,IACrC2G,EAAuB6C,GAAQA,EAAK7I,OAAO8D,GAAKA,EAAEE,KAAO3E,EAAU2E,MAClE,IAEG+E,GAA2BlB,EAAAA,EAAAA,aAAY,KAC3C7B,EAAuB,KACtB,IAGGgD,GAAgBnB,EAAAA,EAAAA,aAAYC,UAChC,GAAmC,IAA/B/B,EAAoB7F,OAExB,IACEmG,EAAS,MAGT,MAAMzE,EAAmBmE,EAAoB,GAAGhF,KAE1Cc,EAAoBkE,EAAoBlC,IAAIxE,IAAS,CACzD2E,GAAIoD,OAAOC,aACXhI,UAAWA,EAAU0B,KACrBkI,aAAc5J,EAAU0B,KACxBC,aAAc3B,EAAU2B,aACxBkI,UAAW,MAGPvH,QAAgBgF,EAAeqC,cAAcpH,EAAkBC,GAGrE+D,EAAYiD,GAAQ,IAAIA,EAAMlH,IAC9BmE,EAAuB+C,GACrBA,EAAK7I,OAAO8D,IAAMiC,EAAoBjE,KAAKqH,GAAYA,EAASnF,KAAOF,EAAEE,MAE3EgC,EAAuB,IACvBO,EAAa,SACf,CAAE,MAAOoC,GACPtC,EAAS,4BACT0B,QAAQ3B,MAAM,0BAA2BuC,EAC3C,GACC,CAAC5C,EAAqBY,IAEnByC,GAAgBvB,EAAAA,EAAAA,aAAYC,UAChC,IACEzB,EAAS,YACHM,EAAeyC,cAAcF,GAGnCtD,EAAYiD,GAAQA,EAAK7I,OAAOqJ,GAAKA,EAAErF,KAAOkF,IAG9C,MAAMhB,QAAqBvB,EAAe4B,yBAC1CzC,EAAuBoC,GAGvB3B,EAAa,WACf,CAAE,MAAOoC,GACPtC,EAAS,4BACT0B,QAAQ3B,MAAM,0BAA2BuC,EAC3C,GACC,CAAChC,IAEE2C,GAAmBzB,EAAAA,EAAAA,aAAYC,UACnC,IACEzB,EAAS,YACHM,EAAe2C,mBAGrB1D,EAAY,IACZK,EAAmB,CAAC,GACpBM,EAAa,kBAGPS,GACR,CAAE,MAAO2B,GACPtC,EAAS,gCACT0B,QAAQ3B,MAAM,2BAA4BuC,EAC5C,GACC,CAAChC,EAAgBK,IAEduC,GAAuB1B,EAAAA,EAAAA,aAAYC,UACvC,IACEzB,EAAS,YACHM,EAAe4C,qBAAqBlH,GAG1C4D,EAAmB4C,IACjB,MAAMW,GAAkBrC,EAAAA,EAAAA,GAAA,GAAQ0B,GAEhC,cADOW,EAAmBnH,GACnBmH,GAEX,CAAE,MAAOb,GACPtC,EAAS,oCACT0B,QAAQ3B,MAAM,kCAAmCuC,EACnD,GACC,CAAChC,IAGE8C,GAAU5B,EAAAA,EAAAA,aAAYC,UAC1B,IACEzB,EAAS,MAGT,MAAMqD,EAAaC,EAAejH,GAClC,IAAKgH,EAAWnF,QACd,MAAM,IAAIqF,MAAMF,EAAWpF,OAAOuF,KAAK,OAIzC,MAAMrC,EAAoBhF,EAAoBqB,IAAIyD,GAC5CK,EAAoBjG,EAASmC,IAAIqD,GAGjCvE,EAAcJ,EAClBiF,EACAG,EACA3F,EACAU,GAIF,IAAK,MAAMoH,KAAcnH,EACnBmH,EAAW/G,YAAcL,EAAOiB,2BAC5BgD,EAAeqC,cACnBc,EAAWlI,iBACXkI,EAAWnJ,YAAYkD,IAAIC,IAAC,CAC1BE,GAAIoD,OAAOC,aACXhI,UAAWyE,EAAE/C,KACbkI,aAAcnF,EAAE/C,KAChBC,aAAc8C,EAAE9C,aAChBkI,UAAW,OAOnB,MAAMa,EAAU9F,EAA4BtB,EAAaD,GAKzD,aAFMsE,IAEC,CAAErE,cAAaoH,UACxB,CAAE,MAAOpB,GAGP,MAFAtC,EAAS,kCACT0B,QAAQ3B,MAAM,sBAAuBuC,GAC/BA,CACR,GACC,CAACnG,EAAqBd,EAAUM,EAAiB2E,EAAgBK,IAG9DgD,GAAanC,EAAAA,EAAAA,aAAY,KAC7BxB,EAAS,OACR,IAEGsD,GAAiB9B,EAAAA,EAAAA,aAAanF,GAC3B2B,EAAsB3B,GAC5B,IAEH,MAAO,CAELhB,SAAUA,EAASmC,IAAIqD,GACvB1E,oBAAqBA,EAAoBqB,IAAIyD,GAC7CvB,oBAAqBA,EAAoBlC,IAAIyD,GAC7CtF,kBACAkE,UACAE,QACAE,YAGAiB,mBACAE,sBACAC,mBACAE,kBAGArB,eACAP,yBACA4C,kBACAE,oBACAC,2BAGA/B,WACAgC,gBACAI,gBACAE,mBACAC,uBAGAE,UAGAjD,gBACAE,sBACAsD,aAGAL,mB,6FChYG,MAAMM,EAA8C7H,IAIpD,IAJqD,UAC1D/C,EAAS,WACT6K,EAAU,SACVC,GACD/H,EAKC,OACEgI,EAAAA,EAAAA,MAAA,UACEC,QANgBC,KAClBH,EAAS9K,IAMPkL,UAAS,iEAAAC,OACPN,EACI,2CACA,oDACHO,SAAA,EAEHC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,sBAAqBE,SAAEpL,EAAU0B,QAChDqJ,EAAAA,EAAAA,MAAA,OAAKG,UAAU,wBAAuBE,SAAA,CAAC,cAAYpL,EAAU4B,iBCAtD0J,EAA0DvI,IAOhE,IAPiE,oBACtEI,EAAmB,oBACnBuD,EAAmB,WACnBlF,EAAU,eACV+J,EAAc,kBACdC,EAAiB,UACjBC,GACD1I,EAEC,MAAMqF,EAAsB,IAAIrG,IAMhC,OALAoB,EAAoBnB,QAAQhC,IAC1B,MAAMiC,EAAUmG,EAAoBlG,IAAIlC,EAAU2B,eAAiB,GACnEyG,EAAoBjG,IAAInC,EAAU2B,aAAc,IAAIM,EAASjC,OAI7D+K,EAAAA,EAAAA,MAAAW,EAAAA,SAAA,CAAAN,SAAA,EAEEC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,OAAME,UACnBC,EAAAA,EAAAA,KAACM,EAAAA,EAAS,CACRC,WAAS,EACTC,YAAY,+BACZC,MAAOtK,EACPuK,SAAWC,GAA2CT,EAAeS,EAAEC,OAAOH,OAC9E3K,KAAK,QACL+K,GAAI,CACF,2BAA4B,CAC1BC,SAAU,WACVC,OAAQ,SAGZC,WAAY,CACVC,gBACEjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAc,CAACC,SAAS,QAAOpB,UAC9BC,EAAAA,EAAAA,KAACoB,EAAAA,EAAU,CAACvB,UAAU,iCAQ/BxE,EAAoB7F,OAAS,IAC5BkK,EAAAA,EAAAA,MAAA,OAAKG,UAAU,OAAME,SAAA,EACnBC,EAAAA,EAAAA,KAACqB,EAAAA,EAAU,CAACC,QAAQ,YAAYzB,UAAU,eAAcE,SAAC,2BAGzDC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,uBAAsBE,SAClC1E,EAAoBlC,IAAKxE,IACxBqL,EAAAA,EAAAA,KAACuB,EAAAA,EAAI,CAEHC,MAAK,GAAA1B,OAAKnL,EAAU0B,KAAI,MAAAyJ,OAAKnL,EAAU2B,aAAY,KACnDmL,SAAUA,IAAMtB,EAAkBxL,GAClC+M,MAAM,UACN5L,KAAK,QACL+K,GAAI,CAAEC,SAAU,YALXnM,EAAU2E,WAazB0G,EAAAA,EAAAA,KAAA,OAAKH,UAAU,uDAAsDE,SAClE4B,MAAMC,KAAK7E,EAAoBtF,WAAW0B,IAAI0I,IAA4B,IAA1BvH,EAAQrE,GAAY4L,EACnE,MAAMH,EAAQrH,EAAqBC,GAEnC,OACEoF,EAAAA,EAAAA,MAACoC,EAAAA,EAAK,CAAcjC,UAAU,+BAA8BE,SAAA,EAC1DL,EAAAA,EAAAA,MAAC2B,EAAAA,EAAU,CAACC,QAAQ,KAAKzB,UAAU,6DAA4DE,SAAA,EAC7FC,EAAAA,EAAAA,KAAA,QAAM+B,MAAO,CAAEL,SAAQ3B,SAAEzF,KACzBoF,EAAAA,EAAAA,MAAC2B,EAAAA,EAAU,CAACC,QAAQ,UAAUI,MAAM,gBAAgB7B,UAAU,UAASE,SAAA,CACpE9J,EAAYT,OAAO,sBAGxBwK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,cAAaE,SACzB9J,EAAYkD,IAAKxE,IAChBqL,EAAAA,EAAAA,KAACT,EAAa,CAEZ5K,UAAWA,EACX6K,WAAYnE,EAAoBjE,KAAKgC,GAAKA,EAAEE,KAAO3E,EAAU2E,IAC7DmG,SAAUU,GAHLxL,EAAU2E,QAOrB0G,EAAAA,EAAAA,KAAA,OAAKH,UAAU,kCAAkCkC,MAAO,CAAEC,gBAAiBN,OAjBjEpH,OAwBoC,IAArDqH,MAAMC,KAAK7E,EAAoBtF,WAAWjC,SACzCkK,EAAAA,EAAAA,MAAA,OAAKG,UAAU,yCAAwCE,SAAA,EACrDC,EAAAA,EAAAA,KAACiC,EAAAA,EAAW,CAACpC,UAAU,wCACvBG,EAAAA,EAAAA,KAACqB,EAAAA,EAAU,CAACC,QAAQ,KAAKI,MAAM,gBAAgB7B,UAAU,eAAcE,SAAC,mCAGxEC,EAAAA,EAAAA,KAACqB,EAAAA,EAAU,CAACC,QAAQ,QAAQI,MAAM,gBAAgB7B,UAAU,eAAcE,SACvE5J,EACG,4CACA,qEAGJA,IACA6J,EAAAA,EAAAA,KAACkC,EAAAA,EAAM,CACLZ,QAAQ,WACR3B,QAASS,EACT+B,WAAWnC,EAAAA,EAAAA,KAACoC,EAAAA,EAAQ,CAACvC,UAAU,YAC/B/J,KAAK,QACL+K,GAAI,CAAEC,SAAU,WAAYuB,cAAe,QAAStC,SACrD,wB,kCCtHN,MAAMuC,EAA0D5K,IAIhE,IAJiE,QACtET,EAAO,OACPsL,EAAM,SACNd,GACD/J,EACC,OACEgI,EAAAA,EAAAA,MAACoC,EAAAA,EAAK,CAACjC,UAAU,wIAAuIE,SAAA,EAEtJL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,yCAAwCE,SAAA,EACrDL,EAAAA,EAAAA,MAAA,OAAAK,SAAA,EACEC,EAAAA,EAAAA,KAACqB,EAAAA,EAAU,CAACC,QAAQ,YAAYzB,UAAU,oCAAmCE,SAC1E9I,EAAQC,oBAEXwI,EAAAA,EAAAA,MAAC2B,EAAAA,EAAU,CAACC,QAAQ,UAAUzB,UAAU,wBAAuBE,SAAA,CAAC,iBAC/CjG,EAAkB7C,EAAQuL,kBAG7C9C,EAAAA,EAAAA,MAAA,OAAKG,UAAU,iBAAgBE,SAAA,CAC5BwC,IACCvC,EAAAA,EAAAA,KAACyC,EAAAA,EAAO,CAACC,MAAM,eAAc3C,UAC3BC,EAAAA,EAAAA,KAAC2C,EAAAA,EAAU,CAAChD,QAAS4C,EAAQzM,KAAK,QAAOiK,UACvCC,EAAAA,EAAAA,KAAC4C,EAAAA,EAAQ,CAAC/C,UAAU,8BAIzB4B,IACCzB,EAAAA,EAAAA,KAACyC,EAAAA,EAAO,CAACC,MAAM,iBAAgB3C,UAC7BC,EAAAA,EAAAA,KAAC2C,EAAAA,EAAU,CAAChD,QAAS8B,EAAU3L,KAAK,QAAOiK,UACzCC,EAAAA,EAAAA,KAAC6C,EAAAA,EAAU,CAAChD,UAAU,qCAQhCG,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAeE,UAE5BC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,4BAA2BE,SACvC9I,EAAQE,kBAAkBgC,IAAI,CAACxE,EAAWmO,KACzCpD,EAAAA,EAAAA,MAAA,OAAwBG,UAAU,WAAUE,SAAA,CAEzC+C,EAAQ,IACP9C,EAAAA,EAAAA,KAAA,OAAKH,UAAU,oDAIjBG,EAAAA,EAAAA,KAAA,OACEH,UAAU,gIACVkC,MAAO,CACLgB,gBAAiB1I,EAAqB1F,EAAU2B,cAChD0M,gBAAiB,OACjBjD,UAEFL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,0CAAyCE,SAAA,EACtDC,EAAAA,EAAAA,KAACqB,EAAAA,EAAU,CAACxB,UAAU,+BAA8BE,SACjDpL,EAAUA,aAEbqL,EAAAA,EAAAA,KAACqB,EAAAA,EAAU,CACTC,QAAQ,UACRS,MAAO,CAAEL,MAAOrH,EAAqB1F,EAAU2B,eAC/CuJ,UAAU,wCAAuCE,SAEhDpL,EAAU2B,sBAvBT3B,EAAU2E,aCzCnB2J,EAAsDvL,IAM5D,IAN6D,SAClEV,EAAQ,WACRb,EAAU,eACV+J,EAAc,gBACdgD,EAAe,cACfC,GACDzL,EACC,OACEgI,EAAAA,EAAAA,MAAA,OAAKG,UAAU,YAAWE,SAAA,EAExBC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,OAAME,UACnBC,EAAAA,EAAAA,KAACM,EAAAA,EAAS,CACRC,WAAS,EACTC,YAAY,+BACZC,MAAOtK,EACPuK,SAAWC,GAA2CT,EAAeS,EAAEC,OAAOH,OAC9E3K,KAAK,QACL+K,GAAI,CACF,2BAA4B,CAC1BC,SAAU,WACVC,OAAQ,SAGZC,WAAY,CACVC,gBACEjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAc,CAACC,SAAS,QAAOpB,UAC9BC,EAAAA,EAAAA,KAACoB,EAAAA,EAAU,CAACvB,UAAU,kCAQhCG,EAAAA,EAAAA,KAAA,OAAKH,UAAU,YAAWE,SACvB/I,EAASmC,IAAKlC,IACb+I,EAAAA,EAAAA,KAACsC,EAAmB,CAElBrL,QAASA,EACTwK,SAAUA,IAAMyB,EAAgBjM,EAAQqC,IACxCiJ,OAAQY,EAAgB,IAAMA,EAAclM,QAAWmM,GAHlDnM,EAAQqC,OASE,IAApBtC,EAASxB,SACRwK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,yCAAwCE,UACrDC,EAAAA,EAAAA,KAACqB,EAAAA,EAAU,CAACC,QAAQ,QAAQI,MAAM,gBAAgB7B,UAAU,UAASE,SAClE5J,EACG,0CACA,oCCpDHkN,EAAkD3L,IAKxD,IALyD,gBAC9DJ,EAAe,WACfnB,EAAU,eACV+J,EAAc,gBACdoD,GACD5L,EAEC,MAAM6L,EAAsB/L,OAAOC,QAAQH,GACxChC,OAAOuM,IAAA,IAAElK,EAAUC,GAAUiK,EAAA,OAC3B1L,GACDwB,EAAS/C,cAAce,SAASQ,EAAWvB,gBAC3CgD,EAAUhD,cAAce,SAASQ,EAAWvB,iBAE7CuE,IAAIqK,IAAA,IAAE7L,EAAUC,GAAU4L,EAAA,MAAM,CAC/BlK,GAAI3B,EACJT,iBAAkBU,EAClBT,kBAAmB,CAAC,CAClBmC,GAAIoD,OAAOC,aACXhI,UAAWgD,EACX4G,aAAc5G,EACdrB,aAAc,SACdkI,UAAW7G,IAEb8L,UAAW,IAAIzJ,KACfwI,UAAW,IAAIxI,QAGnB,OACE0F,EAAAA,EAAAA,MAAA,OAAKG,UAAU,YAAWE,SAAA,EAExBC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,OAAME,UACnBC,EAAAA,EAAAA,KAACM,EAAAA,EAAS,CACRC,WAAS,EACTC,YAAY,6BACZC,MAAOtK,EACPuK,SAAWC,GAA2CT,EAAeS,EAAEC,OAAOH,OAC9E3K,KAAK,QACL+K,GAAI,CACF,2BAA4B,CAC1BC,SAAU,WACVC,OAAQ,SAGZC,WAAY,CACVC,gBACEjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAc,CAACC,SAAS,QAAOpB,UAC9BC,EAAAA,EAAAA,KAACoB,EAAAA,EAAU,CAACvB,UAAU,kCAQhCH,EAAAA,EAAAA,MAAA,OAAKG,UAAU,YAAWE,SAAA,CACvBwD,EAAoBpK,IAAKlC,IACxB+I,EAAAA,EAAAA,KAACsC,EAAmB,CAElBrL,QAASA,EACTwK,SAAUA,IAAM6B,EAAgBrM,EAAQqC,KAFnCrC,EAAQqC,KAOwB,IAAxC9B,OAAO+E,KAAKjF,GAAiB9B,SAC5BwK,EAAAA,EAAAA,KAAA,OAAKH,UAAU,0CAAyCE,UACtDC,EAAAA,EAAAA,KAACqB,EAAAA,EAAU,CAACC,QAAQ,QAAQzB,UAAU,gBAAeE,SAAC,qC,gHCtD3D,MAAM2D,GAA0ChM,IAKhD,IALiD,OACtDiM,EAAM,QACNC,EAAO,UACPC,EAAS,QACTrI,GAAU,GACX9D,EAEC,MAAOuB,EAAqB6K,IAA0B3I,EAAAA,EAAAA,UAAiB,KAChE7C,EAAqByL,IAA0B5I,EAAAA,EAAAA,WAAkB,IACjEvC,EAAkBoL,IAAuB7I,EAAAA,EAAAA,WAAkB,IAC3DO,EAAOC,IAAYR,EAAAA,EAAAA,UAAwB,MAoB5C8I,EAAcA,KAClBtI,EAAS,MACTiI,KAGF,OACElE,EAAAA,EAAAA,MAACwE,EAAAA,EAAM,CACLC,KAAMR,EACNC,QAASK,EACTG,SAAS,KACT7D,WAAS,EAAAR,SAAA,EAETC,EAAAA,EAAAA,KAACqE,EAAAA,EAAW,CAAAtE,UACVL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,0BAAyBE,SAAA,EACtCC,EAAAA,EAAAA,KAACoC,EAAAA,EAAQ,CAACvC,UAAU,6BACpBG,EAAAA,EAAAA,KAAA,QAAAD,SAAM,+BAIVL,EAAAA,EAAAA,MAAC4E,EAAAA,EAAa,CAAAvE,SAAA,EACZC,EAAAA,EAAAA,KAACqB,EAAAA,EAAU,CAACK,MAAM,gBAAgB7B,UAAU,OAAME,SAAC,8EAInDC,EAAAA,EAAAA,KAACuE,EAAAA,EAAO,CAAC1E,UAAU,UAGnBH,EAAAA,EAAAA,MAAA,OAAKG,UAAU,iBAAgBE,SAAA,EAE7BL,EAAAA,EAAAA,MAAA,OAAAK,SAAA,EACEC,EAAAA,EAAAA,KAACqB,EAAAA,EAAU,CAACC,QAAQ,YAAYzB,UAAU,mBAAkBE,SAAC,0BAG7DC,EAAAA,EAAAA,KAACqB,EAAAA,EAAU,CAACC,QAAQ,QAAQI,MAAM,gBAAgB7B,UAAU,OAAME,SAAC,+DAGnEC,EAAAA,EAAAA,KAACwE,EAAAA,EAAG,CAAC3E,UAAU,OAAME,UACnBC,EAAAA,EAAAA,KAACyE,EAAAA,GAAM,CACLhE,MAAOxH,EACPyH,SAAUA,CAACgE,EAAejE,IAA6BqD,EAAuBrD,GAC9EkE,IAAK,GACLhM,IAAK,EACLiM,KAAM,GACNC,MAAO,CACL,CAAEpE,MAAO,GAAKe,MAAO,OACrB,CAAEf,MAAO,GAAKe,MAAO,OACrB,CAAEf,MAAO,EAAGe,MAAO,QAErBsD,kBAAkB,OAClBC,iBAAmBtE,GAAa,GAAAX,QAAiB,IAARW,GAAauE,QAAQ,GAAE,UAGpEtF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,kDAAiDE,SAAA,EAC9DC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,wCACNC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,gDAKVL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,YAAWE,SAAA,EACxBC,EAAAA,EAAAA,KAACqB,EAAAA,EAAU,CAACC,QAAQ,YAAYzB,UAAU,cAAaE,SAAC,qBAIxDC,EAAAA,EAAAA,KAACiF,EAAAA,EAAgB,CACfC,SACElF,EAAAA,EAAAA,KAACmF,EAAAA,EAAM,CACLC,QAAS9M,EACToI,SAAWC,GAA2CoD,EAAuBpD,EAAEC,OAAOwE,WAG1F5D,MAAM,wCAGRxB,EAAAA,EAAAA,KAACiF,EAAAA,EAAgB,CACfC,SACElF,EAAAA,EAAAA,KAACmF,EAAAA,EAAM,CACLC,QAASxM,EACT8H,SAAWC,GAA2CqD,EAAoBrD,EAAEC,OAAOwE,WAGvF5D,MAAM,gDAKV9B,EAAAA,EAAAA,MAACoC,EAAAA,EAAK,CAACjC,UAAU,iBAAgBE,SAAA,EAC/BC,EAAAA,EAAAA,KAACqB,EAAAA,EAAU,CAACC,QAAQ,YAAYzB,UAAU,mBAAkBE,SAAC,sBAG7DL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,uBAAsBE,SAAA,EACnCC,EAAAA,EAAAA,KAACuB,EAAAA,EAAI,CACHC,MAAK,eAAA1B,QAAwC,IAAtB7G,GAA2B+L,QAAQ,GAAE,KAC5DlP,KAAK,QACL4L,MAAM,aAER1B,EAAAA,EAAAA,KAACuB,EAAAA,EAAI,CACHC,MAAOlJ,EAAsB,wBAA0B,2BACvDxC,KAAK,QACLwL,QAAQ,cAEVtB,EAAAA,EAAAA,KAACuB,EAAAA,EAAI,CACHC,MAAO5I,EAAmB,yBAA2B,0BACrD9C,KAAK,QACLwL,QAAQ,sBAOf5F,IACCsE,EAAAA,EAAAA,KAACqF,EAAAA,EAAK,CAACC,SAAS,QAAQzF,UAAU,OAAME,SACrCrE,QAKPgE,EAAAA,EAAAA,MAAC6F,EAAAA,EAAa,CAAC1F,UAAU,MAAKE,SAAA,EAC5BC,EAAAA,EAAAA,KAACkC,EAAAA,EAAM,CAACvC,QAASsE,EAAauB,SAAUhK,EAAQuE,SAAC,YAGjDC,EAAAA,EAAAA,KAACkC,EAAAA,EAAM,CACLvC,QA7IcvC,UACpB,IACEzB,EAAS,MAET,MAAM3D,EAA6B,CACjCiB,sBACAX,sBACAM,0BAGIiL,EAAU7L,GAChB4L,GACF,CAAE,MAAO3F,GACPtC,EAAS,kCACT0B,QAAQ3B,MAAM,sBAAuBuC,EACvC,GA+HMqD,QAAQ,YACRa,UAAW3G,GAAUwE,EAAAA,EAAAA,KAACyF,GAAAA,EAAgB,CAAC3P,KAAM,MAASkK,EAAAA,EAAAA,KAACoC,EAAAA,EAAQ,CAACvC,UAAU,YAC1E2F,SAAUhK,EAAQuE,SAEjBvE,EAAU,gBAAkB,gC,eCvKhC,MAAMkK,GAAoDhO,IAG1D,IAH2D,gBAChEiO,EAAe,iBACfC,GACDlO,EAEC,MAAOmO,EAAeC,IAAoB3K,EAAAA,EAAAA,WAAS,IAC5C4K,EAAeC,IAAoB7K,EAAAA,EAAAA,WAAS,IAC5C8K,EAAUC,IAAe/K,EAAAA,EAAAA,WAAS,IAGnC,SAEJnE,EAAQ,oBACRc,EAAmB,oBACnBuD,EAAmB,gBACnB/D,EAAe,QACfkE,EAAO,MACPE,EAAK,UACLE,EAAS,iBAGTiB,EAAgB,iBAChBG,EAAgB,gBAChBE,EAAe,aAGfrB,EAAY,gBACZqC,EAAe,yBACfG,EAAwB,SAGxB/B,EAAQ,cACRgC,EAAa,cACbI,EAAa,iBACbE,EAAgB,qBAChBC,EAAoB,QAGpBE,EAAO,cAGPjD,EAAa,oBACbE,EAAmB,WACnBsD,GACErE,IAoCJ,OARAoB,EAAAA,EAAAA,WAAU,KACO,OAAfsJ,QAAe,IAAfA,GAAAA,EAAkB3O,IACjB,CAACA,EAAU2O,KAEdtJ,EAAAA,EAAAA,WAAU,KACQ,OAAhBuJ,QAAgB,IAAhBA,GAAAA,EAAmB9N,IAClB,CAACA,EAAqB8N,IAErBpK,GAEAwE,EAAAA,EAAAA,KAACmG,GAAAA,GAAc,CACbC,QAAQ,gCACRC,YAAY,EACZvQ,KAAK,QAMTkK,EAAAA,EAAAA,KAAAK,EAAAA,SAAA,CAAAN,UACEC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,sBAAqBE,UAClCL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,6BAA4BE,SAAA,EAGzCL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,kEAAiEE,SAAA,EAC9EL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,yCAAwCE,SAAA,EACrDL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,0BAAyBE,SAAA,EACtCC,EAAAA,EAAAA,KAAA,UACEL,QAASA,IAAMuG,GAAaD,GAC5BpG,UAAU,kEACV,aAAYoG,EAAW,wBAA0B,sBAAsBlG,SAEtEkG,GACCjG,EAAAA,EAAAA,KAACsG,EAAAA,EAAe,CAACzG,UAAU,2BAE3BG,EAAAA,EAAAA,KAACuG,EAAAA,EAAgB,CAAC1G,UAAU,6BAGhCG,EAAAA,EAAAA,KAAA,MAAIH,UAAU,sCAAqCE,SAAC,+BAEtDC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,0BAAyBE,UACtCC,EAAAA,EAAAA,KAACwG,EAAAA,EAAa,CAAC3G,UAAU,iCAI5BoG,IACCjG,EAAAA,EAAAA,KAAA,OAAKH,UAAU,YAAWE,UACxBL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,uDAAsDE,SAAA,EACnEC,EAAAA,EAAAA,KAAA,MAAIH,UAAU,qCAAoCE,SAAC,iCACnDL,EAAAA,EAAAA,MAAA,MAAIG,UAAU,oCAAmCE,SAAA,EAC/CC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,6EACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qFACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qEACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,yFAQdL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,kEAAiEE,SAAA,EAC9EL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,yCAAwCE,SAAA,EACrDC,EAAAA,EAAAA,KAAA,MAAIH,UAAU,sCAAqCE,SAAC,uBACpDL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,iBAAgBE,SAAA,CACd,YAAdnE,IACC8D,EAAAA,EAAAA,MAAAW,EAAAA,SAAA,CAAAN,SAAA,EACEL,EAAAA,EAAAA,MAAA,UACEC,QAASA,IAAMmG,GAAiB,GAChCjG,UAAU,4NAA2NE,SAAA,EAErOC,EAAAA,EAAAA,KAACoC,EAAAA,EAAQ,CAACvC,UAAU,iBAAiB,2BAGvCH,EAAAA,EAAAA,MAAA,UACEC,QAASrB,EACTkH,SAAyC,IAA/BnK,EAAoB7F,OAC9BqK,UAAU,+QAA8QE,SAAA,EAExRC,EAAAA,EAAAA,KAACyG,EAAAA,EAAO,CAAC5G,UAAU,iBAAiB,uBAK3B,WAAdjE,IACC8D,EAAAA,EAAAA,MAAA,UACEC,QApGa+G,KACzBC,OAAOC,QAAQ,wEACjBhI,KAmGciB,UAAU,4NAA2NE,SAAA,EAErOC,EAAAA,EAAAA,KAAC6G,EAAAA,EAAe,CAAChH,UAAU,iBAAiB,qBAQnDnE,IACCsE,EAAAA,EAAAA,KAAA,OAAKH,UAAU,sDAAqDE,UAClEL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,OAAME,SAAA,EACnBC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gBAAeE,UAC5BC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,uBAAuBiH,QAAQ,YAAYC,KAAK,eAAchH,UAC3EC,EAAAA,EAAAA,KAAA,QAAMgH,SAAS,UAAUC,EAAE,0NAA0NC,SAAS,iBAGlQlH,EAAAA,EAAAA,KAAA,OAAKH,UAAU,OAAME,UACnBC,EAAAA,EAAAA,KAAA,KAAGH,UAAU,uBAAsBE,SAAErE,YAO7CsE,EAAAA,EAAAA,KAAA,OAAKH,UAAU,gCAA+BE,UAC5CC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,wBAAuBE,SACnC,CACC,CAAEoH,IAAK,WAAY3F,MAAO,wBAC1B,CAAE2F,IAAK,SAAU3F,MAAO,sBACxB,CAAE2F,IAAK,UAAW3F,MAAO,qBACzBrI,IAAKiO,IACLpH,EAAAA,EAAAA,KAAA,UAEEL,QAASA,IAAM9D,EAAauL,EAAID,KAChCtH,UAAS,2EAAAC,OACPlE,IAAcwL,EAAID,IACd,oCACA,8EACHpH,SAEFqH,EAAI5F,OARA4F,EAAID,WAejBzH,EAAAA,EAAAA,MAAA,OAAKG,UAAU,gBAAeE,SAAA,CACb,aAAdnE,IACCoE,EAAAA,EAAAA,KAACC,EAAmB,CAClBnI,oBAAqB+E,EACrBxB,oBAAqBA,EACrBlF,WAAW,GACX+J,eAAgBpE,EAChBqE,kBAAmBjC,EACnBkC,UAAW9D,IAGA,WAAdV,IACCoE,EAAAA,EAAAA,KAACiD,EAAiB,CAChBjM,SAAUgG,EACV7G,WAAW,GACX+J,eAAgBlE,EAChBkH,gBAAiBxE,IAGN,YAAd9C,IACCoE,EAAAA,EAAAA,KAACqD,EAAe,CACd/L,gBAAiB4F,EACjB/G,WAAW,GACX+J,eAAgBlE,EAChBsH,gBAvKoB3L,IAC9BgP,OAAOC,QAAQ,iCACjB/H,EAAqBlH,aA4KjBqI,EAAAA,EAAAA,KAAC0D,GAAW,CACVC,OAAQkC,EACRjC,QAASA,IAAMkC,GAAiB,GAChCjC,UAnMYzG,UACpB4I,GAAiB,GACjB,UACQjH,EAAQ/G,GACd6D,EAAa,SACf,CAAC,QACCmK,GAAiB,EACnB,GA6LQxK,QAASuK,YC7PRsB,GAA0C3P,IAGhD,IAHiD,OACtDiM,EAAM,SACN2D,GACD5P,EACC,OACEgI,EAAAA,EAAAA,MAAA,OAAKG,UAAU,OAAME,SAAA,EACnBL,EAAAA,EAAAA,MAAA,UACEC,QAAS2H,EACTzH,UAAU,wIAAuIE,SAAA,EAEjJL,EAAAA,EAAAA,MAAA,QAAMG,UAAU,0BAAyBE,SAAA,EACvCC,EAAAA,EAAAA,KAACwG,EAAAA,EAAa,CAAC3G,UAAU,6BACzBG,EAAAA,EAAAA,KAAA,QAAAD,SAAM,+BAERC,EAAAA,EAAAA,KAACsG,EAAAA,EAAe,CACdzG,UAAS,6DAAAC,OAA+D6D,EAAS,aAAe,SAInGA,IACCjE,EAAAA,EAAAA,MAAA,OAAKG,UAAU,yEAAwEE,SAAA,EACrFC,EAAAA,EAAAA,KAAA,MAAIH,UAAU,iCAAgCE,SAAC,4BAC/CL,EAAAA,EAAAA,MAAA,MAAIG,UAAU,sBAAqBE,SAAA,EACjCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qJACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wGACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,0GAGNC,EAAAA,EAAAA,KAAA,MAAIH,UAAU,iCAAgCE,SAAC,oCAC/CL,EAAAA,EAAAA,MAAA,MAAIG,UAAU,sBAAqBE,SAAA,EACjCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,4EACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gKACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,yEACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kFAGNC,EAAAA,EAAAA,KAAA,MAAIH,UAAU,iCAAgCE,SAAC,oBAC/CL,EAAAA,EAAAA,MAAA,MAAIG,UAAU,iBAAgBE,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,2GACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,6EACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,yE,2ECzChB,MAAMoG,EAAgDzO,IAO/C,IAPgD,QACrD0O,EAAU,aAAY,KACtBtQ,EAAO,KAAI,QACXwL,EAAU,UAAS,WACnB+E,GAAa,EAAK,QAClBkB,GAAU,EAAK,UACf1H,GACDnI,EACC,MAiBM8P,EAjBc,CAClBC,GAAI,UACJC,GAAI,UACJC,GAAI,UACJC,GAAI,YACJC,GAAI,aAY0B/R,GAC1BgS,EAViB,CACrBC,QAAS,gBACTC,QAAS,kBACTC,UAAW,gBACXC,QAAS,mBACTC,QAAS,iBACTzM,MAAO,gBAI2B4F,GAE9B8G,EAAcA,KAClB1I,EAAAA,EAAAA,MAAA,OACEG,WAAWwI,EAAAA,EAAAA,IACT,eACAb,EACAM,EACA,gBAEFQ,MAAM,6BACNvB,KAAK,OACLD,QAAQ,YAAW/G,SAAA,EAEnBC,EAAAA,EAAAA,KAAA,UACEH,UAAU,aACV0I,GAAG,KACHC,GAAG,KACHC,EAAE,KACFC,OAAO,eACPC,YAAY,OAEd3I,EAAAA,EAAAA,KAAA,QACEH,UAAU,aACVkH,KAAK,eACLE,EAAE,uHAKF2B,GACJlJ,EAAAA,EAAAA,MAAA,OAAKG,WAAWwI,EAAAA,EAAAA,IACd,kDACAhC,EAAa,eAAiB,gBAC9BxG,GACAE,SAAA,EACAC,EAAAA,EAAAA,KAACoI,EAAW,IACXhC,IACCpG,EAAAA,EAAAA,KAAA,KAAGH,WAAWwI,EAAAA,EAAAA,IACZ,kCACY,YAAZ/G,EAAwB,gBAAkB,iBAC1CvB,SACCqG,OAMT,OAAImB,GAEAvH,EAAAA,EAAAA,KAAA,OAAKH,UAAU,mFAAkFE,SAC9F6I,IAKAA,GAIIC,EAAkDhH,IAAsB,IAArB,KAAE/L,EAAO,MAAM+L,EAM7E,OACEnC,EAAAA,EAAAA,MAAA,OACEG,WAAWwI,EAAAA,EAAAA,IACT,4BARc,CAClBX,GAAI,UACJC,GAAI,WAOY7R,IAEdwS,MAAM,6BACNvB,KAAK,OACLD,QAAQ,YAAW/G,SAAA,EAEnBC,EAAAA,EAAAA,KAAA,UACEH,UAAU,aACV0I,GAAG,KACHC,GAAG,KACHC,EAAE,KACFC,OAAO,eACPC,YAAY,OAEd3I,EAAAA,EAAAA,KAAA,QACEH,UAAU,aACVkH,KAAK,eACLE,EAAE,wHAuCV,G","sources":["shared/utils/specialtyMatching.ts","features/mapping/utils/mappingCalculations.ts","features/mapping/hooks/useMappingData.ts","features/mapping/components/SpecialtyCard.tsx","features/mapping/components/UnmappedSpecialties.tsx","features/mapping/components/MappedSpecialtyItem.tsx","features/mapping/components/MappedSpecialties.tsx","features/mapping/components/LearnedMappings.tsx","features/mapping/components/AutoMapping.tsx","features/mapping/components/SpecialtyMapping.tsx","features/mapping/components/MappingHelp.tsx","components/ui/loading-spinner.tsx"],"sourcesContent":["/**\r\n * Shared specialty matching utilities for the Survey Aggregator application\r\n * These functions handle specialty name normalization and fuzzy matching\r\n */\r\n\r\n/**\r\n * Normalizes a specialty name for comparison\r\n * \r\n * @param specialty - Raw specialty name to normalize\r\n * @returns Normalized specialty name\r\n * \r\n * @example\r\n * ```typescript\r\n * normalizeSpecialty('Cardiology & Heart Surgery'); // Returns \"cardiology heart surgery\"\r\n * ```\r\n */\r\nexport const normalizeSpecialty = (specialty: string): string => {\r\n  return specialty.toLowerCase().replace(/[^a-z0-9]+/g, ' ').trim();\r\n};\r\n\r\n/**\r\n * Fuzzy matching function for specialty names (word-based, not letter-based)\r\n * \r\n * @param specialty1 - First specialty name to compare\r\n * @param specialty2 - Second specialty name to compare\r\n * @returns True if specialties match, false otherwise\r\n * \r\n * @example\r\n * ```typescript\r\n * fuzzyMatchSpecialty('Cardiology', 'Cardiovascular'); // Returns true\r\n * ```\r\n */\r\nexport const fuzzyMatchSpecialty = (specialty1: string, specialty2: string): boolean => {\r\n  const norm1 = normalizeSpecialty(specialty1);\r\n  const norm2 = normalizeSpecialty(specialty2);\r\n\r\n  if (!norm1 || !norm2) return false;\r\n\r\n  // Exact or simple contains\r\n  if (norm1 === norm2) return true;\r\n  if (norm1.includes(norm2) || norm2.includes(norm1)) return true;\r\n\r\n  const words1 = norm1.split(/\\s+/).filter(w => w.length > 2);\r\n  const words2 = norm2.split(/\\s+/).filter(w => w.length > 2);\r\n  if (words1.length === 0 || words2.length === 0) return false;\r\n\r\n  const common = words1.filter(w => words2.includes(w));\r\n  const jaccard = common.length / new Set([...words1, ...words2]).size;\r\n\r\n  return jaccard >= 0.6 || common.length >= Math.min(words1.length, words2.length) * 0.8;\r\n};\r\n\r\n/**\r\n * Finds the best matching specialty from a list of candidates\r\n * \r\n * @param targetSpecialty - The specialty to find a match for\r\n * @param candidateSpecialties - Array of candidate specialties\r\n * @returns The best matching specialty or null if no good match found\r\n * \r\n * @example\r\n * ```typescript\r\n * findBestSpecialtyMatch('Cardiology', ['Cardiovascular', 'Neurology', 'Orthopedics']); \r\n * // Returns 'Cardiovascular'\r\n * ```\r\n */\r\nexport const findBestSpecialtyMatch = (\r\n  targetSpecialty: string,\r\n  candidateSpecialties: string[]\r\n): string | null => {\r\n  if (!targetSpecialty || candidateSpecialties.length === 0) return null;\r\n\r\n  // First try exact match\r\n  const exactMatch = candidateSpecialties.find(\r\n    candidate => normalizeSpecialty(candidate) === normalizeSpecialty(targetSpecialty)\r\n  );\r\n  if (exactMatch) return exactMatch;\r\n\r\n  // Then try fuzzy matching\r\n  const fuzzyMatches = candidateSpecialties.filter(candidate =>\r\n    fuzzyMatchSpecialty(targetSpecialty, candidate)\r\n  );\r\n\r\n  if (fuzzyMatches.length === 1) {\r\n    return fuzzyMatches[0];\r\n  }\r\n\r\n  // If multiple fuzzy matches, return the one with highest similarity\r\n  if (fuzzyMatches.length > 1) {\r\n    return fuzzyMatches.reduce((best, current) => {\r\n      const bestSimilarity = calculateSimilarity(targetSpecialty, best);\r\n      const currentSimilarity = calculateSimilarity(targetSpecialty, current);\r\n      return currentSimilarity > bestSimilarity ? current : best;\r\n    });\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\n/**\r\n * Calculates similarity between two specialty names\r\n * \r\n * @param specialty1 - First specialty name\r\n * @param specialty2 - Second specialty name\r\n * @returns Similarity score between 0 and 1\r\n * \r\n * @example\r\n * ```typescript\r\n * calculateSimilarity('Cardiology', 'Cardiovascular'); // Returns similarity score\r\n * ```\r\n */\r\nexport const calculateSimilarity = (specialty1: string, specialty2: string): number => {\r\n  const norm1 = normalizeSpecialty(specialty1);\r\n  const norm2 = normalizeSpecialty(specialty2);\r\n\r\n  if (norm1 === norm2) return 1;\r\n\r\n  const words1 = norm1.split(/\\s+/).filter(w => w.length > 2);\r\n  const words2 = norm2.split(/\\s+/).filter(w => w.length > 2);\r\n\r\n  if (words1.length === 0 || words2.length === 0) return 0;\r\n\r\n  const common = words1.filter(w => words2.includes(w));\r\n  const union = new Set([...words1, ...words2]);\r\n\r\n  return common.length / union.size;\r\n};\r\n\r\n/**\r\n * Groups specialties by similarity\r\n * \r\n * @param specialties - Array of specialties to group\r\n * @param similarityThreshold - Minimum similarity to group (default: 0.6)\r\n * @returns Array of specialty groups\r\n * \r\n * @example\r\n * ```typescript\r\n * groupSimilarSpecialties(['Cardiology', 'Cardiovascular', 'Neurology']); \r\n * // Returns [['Cardiology', 'Cardiovascular'], ['Neurology']]\r\n * ```\r\n */\r\nexport const groupSimilarSpecialties = (\r\n  specialties: string[],\r\n  similarityThreshold: number = 0.6\r\n): string[][] => {\r\n  const groups: string[][] = [];\r\n  const used = new Set<number>();\r\n\r\n  for (let i = 0; i < specialties.length; i++) {\r\n    if (used.has(i)) continue;\r\n\r\n    const group = [specialties[i]];\r\n    used.add(i);\r\n\r\n    for (let j = i + 1; j < specialties.length; j++) {\r\n      if (used.has(j)) continue;\r\n\r\n      if (calculateSimilarity(specialties[i], specialties[j]) >= similarityThreshold) {\r\n        group.push(specialties[j]);\r\n        used.add(j);\r\n      }\r\n    }\r\n\r\n    groups.push(group);\r\n  }\r\n\r\n  return groups;\r\n};\r\n\r\n/**\r\n * Standardizes specialty names based on common variations\r\n * \r\n * @param specialty - Raw specialty name\r\n * @returns Standardized specialty name\r\n * \r\n * @example\r\n * ```typescript\r\n * standardizeSpecialty('Cardiology & Heart Surgery'); // Returns 'Cardiology'\r\n * ```\r\n */\r\nexport const standardizeSpecialty = (specialty: string): string => {\r\n  const normalized = normalizeSpecialty(specialty);\r\n  \r\n  // Common specialty mappings\r\n  const specialtyMappings: Record<string, string> = {\r\n    'cardiology': 'Cardiology',\r\n    'cardiovascular': 'Cardiology',\r\n    'heart': 'Cardiology',\r\n    'cardiac': 'Cardiology',\r\n    'neurology': 'Neurology',\r\n    'neurological': 'Neurology',\r\n    'orthopedics': 'Orthopedics',\r\n    'orthopedic': 'Orthopedics',\r\n    'ortho': 'Orthopedics',\r\n    'dermatology': 'Dermatology',\r\n    'dermatological': 'Dermatology',\r\n    'derm': 'Dermatology',\r\n    'oncology': 'Oncology',\r\n    'cancer': 'Oncology',\r\n    'hematology': 'Hematology',\r\n    'hematological': 'Hematology',\r\n    'hematology oncology': 'Hematology/Oncology',\r\n    'heme onc': 'Hematology/Oncology',\r\n    'pediatrics': 'Pediatrics',\r\n    'pediatric': 'Pediatrics',\r\n    'peds': 'Pediatrics',\r\n    'internal medicine': 'Internal Medicine',\r\n    'family medicine': 'Family Medicine',\r\n    'family practice': 'Family Medicine',\r\n    'emergency medicine': 'Emergency Medicine',\r\n    'emergency': 'Emergency Medicine',\r\n    'em': 'Emergency Medicine',\r\n    'anesthesiology': 'Anesthesiology',\r\n    'anesthesia': 'Anesthesiology',\r\n    'radiology': 'Radiology',\r\n    'diagnostic radiology': 'Radiology',\r\n    'interventional radiology': 'Interventional Radiology',\r\n    'ir': 'Interventional Radiology',\r\n    'psychiatry': 'Psychiatry',\r\n    'psychiatric': 'Psychiatry',\r\n    'psych': 'Psychiatry',\r\n    'surgery': 'General Surgery',\r\n    'general surgery': 'General Surgery',\r\n    'obstetrics gynecology': 'Obstetrics & Gynecology',\r\n    'ob gyn': 'Obstetrics & Gynecology',\r\n    'obstetrics': 'Obstetrics & Gynecology',\r\n    'gynecology': 'Obstetrics & Gynecology',\r\n    'pathology': 'Pathology',\r\n    'pathological': 'Pathology',\r\n    'ophthalmology': 'Ophthalmology',\r\n    'eye': 'Ophthalmology',\r\n    'otolaryngology': 'Otolaryngology',\r\n    'ent': 'Otolaryngology',\r\n    'ear nose throat': 'Otolaryngology',\r\n    'urology': 'Urology',\r\n    'urological': 'Urology',\r\n    'allergy immunology': 'Allergy & Immunology',\r\n    'allergy': 'Allergy & Immunology',\r\n    'immunology': 'Allergy & Immunology',\r\n    'rheumatology': 'Rheumatology',\r\n    'rheumatological': 'Rheumatology',\r\n    'endocrinology': 'Endocrinology',\r\n    'endocrine': 'Endocrinology',\r\n    'gastroenterology': 'Gastroenterology',\r\n    'gi': 'Gastroenterology',\r\n    'pulmonology': 'Pulmonology',\r\n    'pulmonary': 'Pulmonology',\r\n    'respiratory': 'Pulmonology',\r\n    'nephrology': 'Nephrology',\r\n    'renal': 'Nephrology',\r\n    'kidney': 'Nephrology',\r\n    'infectious disease': 'Infectious Disease',\r\n    'infectious': 'Infectious Disease',\r\n    'id': 'Infectious Disease',\r\n    'physical medicine rehabilitation': 'Physical Medicine & Rehabilitation',\r\n    'pmr': 'Physical Medicine & Rehabilitation',\r\n    'rehabilitation': 'Physical Medicine & Rehabilitation',\r\n    'pm r': 'Physical Medicine & Rehabilitation'\r\n  };\r\n\r\n  // Try exact match first\r\n  if (specialtyMappings[normalized]) {\r\n    return specialtyMappings[normalized];\r\n  }\r\n\r\n  // Try partial matches\r\n  for (const [key, value] of Object.entries(specialtyMappings)) {\r\n    if (normalized.includes(key) || key.includes(normalized)) {\r\n      return value;\r\n    }\r\n  }\r\n\r\n  // If no match found, return capitalized original\r\n  return capitalizeWords(specialty);\r\n};\r\n\r\n/**\r\n * Capitalizes the first letter of each word in a string\r\n * \r\n * @param text - Text to capitalize\r\n * @returns Capitalized text\r\n */\r\nconst capitalizeWords = (text: string): string => {\r\n  return text.replace(/\\w\\S*/g, (txt) => \r\n    txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\r\n  );\r\n};\r\n","import { \r\n  ISpecialtyMapping, \r\n  IUnmappedSpecialty, \r\n  IAutoMappingConfig, \r\n  IMappingSuggestion,\r\n  MappingFilters,\r\n  AutoMappingResults \r\n} from '../types/mapping';\r\nimport { calculateSimilarity, normalizeSpecialty } from '../../../shared/utils/specialtyMatching';\r\n\r\n/**\r\n * Survey source color mapping\r\n */\r\nexport const SURVEY_SOURCE_COLORS: Record<string, string> = {\r\n  'SullivanCotter': '#818CF8',\r\n  'MGMA': '#34D399',\r\n  'Gallagher': '#F472B6',\r\n  'ECG': '#FBBF24',\r\n  'AMGA': '#60A5FA',\r\n  'Learned': '#9CA3AF'\r\n};\r\n\r\n/**\r\n * Filter unmapped specialties based on search criteria\r\n */\r\nexport const filterUnmappedSpecialties = (\r\n  specialties: IUnmappedSpecialty[],\r\n  filters: MappingFilters\r\n): IUnmappedSpecialty[] => {\r\n  return specialties.filter(specialty => {\r\n    // Search term filter\r\n    if (filters.searchTerm) {\r\n      const searchLower = filters.searchTerm.toLowerCase();\r\n      const matchesSearch = \r\n        specialty.name.toLowerCase().includes(searchLower) ||\r\n        specialty.surveySource.toLowerCase().includes(searchLower);\r\n      if (!matchesSearch) return false;\r\n    }\r\n\r\n    // Survey source filter\r\n    if (filters.surveySource && specialty.surveySource !== filters.surveySource) {\r\n      return false;\r\n    }\r\n\r\n    // Frequency filter\r\n    if (filters.frequency && specialty.frequency < filters.frequency) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  });\r\n};\r\n\r\n/**\r\n * Group specialties by survey source\r\n */\r\nexport const groupSpecialtiesBySurvey = (\r\n  specialties: IUnmappedSpecialty[]\r\n): Map<string, IUnmappedSpecialty[]> => {\r\n  const grouped = new Map<string, IUnmappedSpecialty[]>();\r\n  \r\n  specialties.forEach(specialty => {\r\n    const current = grouped.get(specialty.surveySource) || [];\r\n    grouped.set(specialty.surveySource, [...current, specialty]);\r\n  });\r\n  \r\n  return grouped;\r\n};\r\n\r\n/**\r\n * Filter mapped specialties based on search criteria\r\n */\r\nexport const filterMappedSpecialties = (\r\n  mappings: ISpecialtyMapping[],\r\n  searchTerm: string\r\n): ISpecialtyMapping[] => {\r\n  if (!searchTerm) return mappings;\r\n  \r\n  const searchLower = searchTerm.toLowerCase();\r\n  return mappings.filter(mapping => \r\n    mapping.standardizedName.toLowerCase().includes(searchLower) ||\r\n    mapping.sourceSpecialties.some(specialty => \r\n      specialty.specialty.toLowerCase().includes(searchLower)\r\n    )\r\n  );\r\n};\r\n\r\n/**\r\n * Filter learned mappings based on search criteria\r\n */\r\nexport const filterLearnedMappings = (\r\n  learnedMappings: Record<string, string>,\r\n  searchTerm: string\r\n): Record<string, string> => {\r\n  if (!searchTerm) return learnedMappings;\r\n  \r\n  const searchLower = searchTerm.toLowerCase();\r\n  const filtered: Record<string, string> = {};\r\n  \r\n  Object.entries(learnedMappings).forEach(([original, corrected]) => {\r\n    if (\r\n      original.toLowerCase().includes(searchLower) ||\r\n      corrected.toLowerCase().includes(searchLower)\r\n    ) {\r\n      filtered[original] = corrected;\r\n    }\r\n  });\r\n  \r\n  return filtered;\r\n};\r\n\r\n/**\r\n * Generate mapping suggestions based on configuration\r\n */\r\nexport const generateMappingSuggestions = (\r\n  unmappedSpecialties: IUnmappedSpecialty[],\r\n  existingMappings: ISpecialtyMapping[],\r\n  learnedMappings: Record<string, string>,\r\n  config: IAutoMappingConfig\r\n): IMappingSuggestion[] => {\r\n  const suggestions: IMappingSuggestion[] = [];\r\n  const processedSpecialties = new Set<string>();\r\n\r\n  // Group specialties by normalized name\r\n  const specialtyGroups = new Map<string, IUnmappedSpecialty[]>();\r\n  \r\n  unmappedSpecialties.forEach(specialty => {\r\n    const normalizedName = normalizeSpecialty(specialty.name);\r\n    const current = specialtyGroups.get(normalizedName) || [];\r\n    specialtyGroups.set(normalizedName, [...current, specialty]);\r\n  });\r\n\r\n  // Generate suggestions for each group\r\n  specialtyGroups.forEach((specialties, normalizedName) => {\r\n    if (specialties.length === 0) return;\r\n\r\n    // Check if we should use existing mappings\r\n    let standardizedName = normalizedName;\r\n    let confidence = 0.8;\r\n\r\n    if (config.useExistingMappings) {\r\n      // Look for existing mappings with similar names\r\n      const existingMatch = existingMappings.find(mapping => {\r\n        const mappingNormalized = normalizeSpecialty(mapping.standardizedName);\r\n        return calculateSimilarity(mappingNormalized, normalizedName) > 0.8;\r\n      });\r\n\r\n      if (existingMatch) {\r\n        standardizedName = existingMatch.standardizedName;\r\n        confidence = 0.9;\r\n      }\r\n    }\r\n\r\n    // Check learned mappings\r\n    if (learnedMappings[normalizedName]) {\r\n      standardizedName = learnedMappings[normalizedName];\r\n      confidence = Math.max(confidence, 0.85);\r\n    }\r\n\r\n    // Apply fuzzy matching if enabled\r\n    if (config.useFuzzyMatching) {\r\n      // Find similar existing mappings\r\n      const similarMappings = existingMappings.filter(mapping => {\r\n        const similarity = calculateSimilarity(\r\n          normalizeSpecialty(mapping.standardizedName),\r\n          normalizedName\r\n        );\r\n        return similarity > 0.7;\r\n      });\r\n\r\n      if (similarMappings.length > 0) {\r\n        const bestMatch = similarMappings.reduce((best, current) => {\r\n          const bestSimilarity = calculateSimilarity(\r\n            normalizeSpecialty(best.standardizedName),\r\n            normalizedName\r\n          );\r\n          const currentSimilarity = calculateSimilarity(\r\n            normalizeSpecialty(current.standardizedName),\r\n            normalizedName\r\n          );\r\n          return currentSimilarity > bestSimilarity ? current : best;\r\n        });\r\n\r\n        standardizedName = bestMatch.standardizedName;\r\n        confidence = Math.max(confidence, 0.75);\r\n      }\r\n    }\r\n\r\n    // Only add suggestion if confidence meets threshold\r\n    if (confidence >= config.confidenceThreshold) {\r\n      suggestions.push({\r\n        standardizedName,\r\n        confidence,\r\n        specialties: specialties.map(s => ({\r\n          name: s.name,\r\n          surveySource: s.surveySource\r\n        }))\r\n      });\r\n\r\n      // Mark specialties as processed\r\n      specialties.forEach(s => processedSpecialties.add(s.id));\r\n    }\r\n  });\r\n\r\n  return suggestions;\r\n};\r\n\r\n/**\r\n * Calculate auto-mapping results\r\n */\r\nexport const calculateAutoMappingResults = (\r\n  suggestions: IMappingSuggestion[],\r\n  config: IAutoMappingConfig\r\n): AutoMappingResults => {\r\n  const total = suggestions.length;\r\n  const mapped = suggestions.filter(s => s.confidence >= config.confidenceThreshold).length;\r\n  const skipped = total - mapped;\r\n\r\n  return {\r\n    total,\r\n    mapped,\r\n    skipped,\r\n    suggestions\r\n  };\r\n};\r\n\r\n/**\r\n * Validate mapping configuration\r\n */\r\nexport const validateMappingConfig = (\r\n  config: IAutoMappingConfig\r\n): { isValid: boolean; errors: string[] } => {\r\n  const errors: string[] = [];\r\n\r\n  if (config.confidenceThreshold < 0 || config.confidenceThreshold > 1) {\r\n    errors.push('Confidence threshold must be between 0 and 1');\r\n  }\r\n\r\n  if (typeof config.useExistingMappings !== 'boolean') {\r\n    errors.push('Use existing mappings must be a boolean value');\r\n  }\r\n\r\n  if (typeof config.useFuzzyMatching !== 'boolean') {\r\n    errors.push('Use fuzzy matching must be a boolean value');\r\n  }\r\n\r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\n/**\r\n * Format date for display\r\n */\r\nexport const formatMappingDate = (date: Date): string => {\r\n  return new Date(date).toLocaleDateString('en-US', {\r\n    month: 'short',\r\n    day: 'numeric',\r\n    year: 'numeric'\r\n  });\r\n};\r\n\r\n/**\r\n * Get survey source color\r\n */\r\nexport const getSurveySourceColor = (source: string): string => {\r\n  return SURVEY_SOURCE_COLORS[source] || '#9CA3AF';\r\n};\r\n\r\n/**\r\n * Calculate mapping statistics\r\n */\r\nexport const calculateMappingStats = (\r\n  mappings: ISpecialtyMapping[],\r\n  unmappedSpecialties: IUnmappedSpecialty[]\r\n): {\r\n  totalMappings: number;\r\n  totalUnmapped: number;\r\n  totalSourceSpecialties: number;\r\n  averageSpecialtiesPerMapping: number;\r\n  mostCommonSurveySource: string;\r\n} => {\r\n  const totalMappings = mappings.length;\r\n  const totalUnmapped = unmappedSpecialties.length;\r\n  const totalSourceSpecialties = mappings.reduce(\r\n    (sum, mapping) => sum + mapping.sourceSpecialties.length,\r\n    0\r\n  );\r\n  const averageSpecialtiesPerMapping = totalMappings > 0 \r\n    ? totalSourceSpecialties / totalMappings \r\n    : 0;\r\n\r\n  // Find most common survey source\r\n  const sourceCounts = new Map<string, number>();\r\n  unmappedSpecialties.forEach(specialty => {\r\n    const count = sourceCounts.get(specialty.surveySource) || 0;\r\n    sourceCounts.set(specialty.surveySource, count + 1);\r\n  });\r\n\r\n  let mostCommonSurveySource = '';\r\n  let maxCount = 0;\r\n  sourceCounts.forEach((count, source) => {\r\n    if (count > maxCount) {\r\n      maxCount = count;\r\n      mostCommonSurveySource = source;\r\n    }\r\n  });\r\n\r\n  return {\r\n    totalMappings,\r\n    totalUnmapped,\r\n    totalSourceSpecialties,\r\n    averageSpecialtiesPerMapping,\r\n    mostCommonSurveySource\r\n  };\r\n};\r\n","import { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { \r\n  ISpecialtyMapping as NewISpecialtyMapping, \r\n  IUnmappedSpecialty as NewIUnmappedSpecialty, \r\n  IAutoMappingConfig, \r\n  IMappingSuggestion,\r\n  MappingState,\r\n  MappingFilters\r\n} from '../types/mapping';\r\nimport { \r\n  ISpecialtyMapping, \r\n  IUnmappedSpecialty \r\n} from '../../../types/specialty';\r\nimport { SpecialtyMappingService } from '../../../services/SpecialtyMappingService';\r\nimport { LocalStorageService } from '../../../services/StorageService';\r\nimport { \r\n  filterUnmappedSpecialties,\r\n  groupSpecialtiesBySurvey,\r\n  filterMappedSpecialties,\r\n  filterLearnedMappings,\r\n  generateMappingSuggestions,\r\n  calculateAutoMappingResults,\r\n  validateMappingConfig\r\n} from '../utils/mappingCalculations';\r\n\r\ninterface UseMappingDataReturn {\r\n  // State\r\n  mappings: NewISpecialtyMapping[];\r\n  unmappedSpecialties: NewIUnmappedSpecialty[];\r\n  selectedSpecialties: NewIUnmappedSpecialty[];\r\n  learnedMappings: Record<string, string>;\r\n  loading: boolean;\r\n  error: string | null;\r\n  activeTab: 'unmapped' | 'mapped' | 'learned';\r\n  \r\n  // Computed values\r\n  filteredUnmapped: NewIUnmappedSpecialty[];\r\n  specialtiesBySurvey: Map<string, NewIUnmappedSpecialty[]>;\r\n  filteredMappings: NewISpecialtyMapping[];\r\n  filteredLearned: Record<string, string>;\r\n  \r\n  // Actions\r\n  setActiveTab: (tab: 'unmapped' | 'mapped' | 'learned') => void;\r\n  setSelectedSpecialties: (specialties: IUnmappedSpecialty[]) => void;\r\n  selectSpecialty: (specialty: IUnmappedSpecialty) => void;\r\n  deselectSpecialty: (specialty: IUnmappedSpecialty) => void;\r\n  clearSelectedSpecialties: () => void;\r\n  \r\n  // Data operations\r\n  loadData: () => Promise<void>;\r\n  createMapping: () => Promise<void>;\r\n  deleteMapping: (mappingId: string) => Promise<void>;\r\n  clearAllMappings: () => Promise<void>;\r\n  removeLearnedMapping: (original: string) => Promise<void>;\r\n  \r\n  // Auto-mapping\r\n  autoMap: (config: IAutoMappingConfig) => Promise<{\r\n    suggestions: IMappingSuggestion[];\r\n    results: {\r\n      total: number;\r\n      mapped: number;\r\n      skipped: number;\r\n    };\r\n  }>;\r\n  \r\n  // Search and filters\r\n  setSearchTerm: (term: string) => void;\r\n  setMappedSearchTerm: (term: string) => void;\r\n  clearError: () => void;\r\n  \r\n  // Validation\r\n  validateConfig: (config: IAutoMappingConfig) => { isValid: boolean; errors: string[] };\r\n}\r\n\r\n/**\r\n * Custom hook for managing specialty mapping data\r\n */\r\nexport const useMappingData = (): UseMappingDataReturn => {\r\n  // Core state (using old types internally)\r\n  const [mappings, setMappings] = useState<ISpecialtyMapping[]>([]);\r\n  const [unmappedSpecialties, setUnmappedSpecialties] = useState<IUnmappedSpecialty[]>([]);\r\n  const [selectedSpecialties, setSelectedSpecialties] = useState<IUnmappedSpecialty[]>([]);\r\n  const [learnedMappings, setLearnedMappings] = useState<Record<string, string>>({});\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [activeTab, setActiveTab] = useState<'unmapped' | 'mapped' | 'learned'>('unmapped');\r\n  \r\n  // Search state\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [mappedSearchTerm, setMappedSearchTerm] = useState('');\r\n  \r\n  // Service instance\r\n  const mappingService = useMemo(() => \r\n    new SpecialtyMappingService(new LocalStorageService()), \r\n    []\r\n  );\r\n\r\n  // Load data on mount\r\n  useEffect(() => {\r\n    loadData();\r\n  }, []);\r\n\r\n  // Smart tab selection based on data availability\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      // If there are mappings, default to mapped tab\r\n      if (mappings.length > 0) {\r\n        setActiveTab('mapped');\r\n      }\r\n      // If there are unmapped specialties and no mappings, default to unmapped tab\r\n      else if (unmappedSpecialties.length > 0) {\r\n        setActiveTab('unmapped');\r\n      }\r\n      // If there are learned mappings and no other data, default to learned tab\r\n      else if (Object.keys(learnedMappings).length > 0) {\r\n        setActiveTab('learned');\r\n      }\r\n      // Otherwise, keep current tab or default to unmapped\r\n    }\r\n  }, [loading, mappings.length, unmappedSpecialties.length, learnedMappings]);\r\n\r\n  // Type conversion functions\r\n  const convertMapping = (mapping: ISpecialtyMapping): NewISpecialtyMapping => ({\r\n    ...mapping,\r\n    sourceSpecialties: mapping.sourceSpecialties.map(s => ({\r\n      ...s,\r\n      id: s.id || crypto.randomUUID(),\r\n      surveySource: s.surveySource as any\r\n    }))\r\n  });\r\n\r\n  const convertUnmappedSpecialty = (specialty: IUnmappedSpecialty): NewIUnmappedSpecialty => ({\r\n    ...specialty,\r\n    surveySource: specialty.surveySource as any\r\n  });\r\n\r\n  // Computed values\r\n  const filteredUnmapped = useMemo(() => {\r\n    const filters: MappingFilters = { searchTerm };\r\n    const convertedUnmapped = unmappedSpecialties.map(convertUnmappedSpecialty);\r\n    return filterUnmappedSpecialties(convertedUnmapped, filters);\r\n  }, [unmappedSpecialties, searchTerm]);\r\n\r\n  const specialtiesBySurvey = useMemo(() => {\r\n    return groupSpecialtiesBySurvey(filteredUnmapped);\r\n  }, [filteredUnmapped]);\r\n\r\n  const filteredMappings = useMemo(() => {\r\n    const convertedMappings = mappings.map(convertMapping);\r\n    return filterMappedSpecialties(convertedMappings, mappedSearchTerm);\r\n  }, [mappings, mappedSearchTerm]);\r\n\r\n  const filteredLearned = useMemo(() => {\r\n    return filterLearnedMappings(learnedMappings, mappedSearchTerm);\r\n  }, [learnedMappings, mappedSearchTerm]);\r\n\r\n  // Data loading\r\n  const loadData = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      console.log('Loading specialty mapping data...');\r\n      const [mappingsData, unmappedData, learnedData] = await Promise.all([\r\n        mappingService.getAllMappings(),\r\n        mappingService.getUnmappedSpecialties(),\r\n        mappingService.getLearnedMappings()\r\n      ]);\r\n      \r\n      console.log('Loaded data:', { \r\n        mappings: mappingsData.length, \r\n        unmapped: unmappedData.length, \r\n        learned: Object.keys(learnedData || {}).length \r\n      });\r\n      \r\n      setMappings(mappingsData);\r\n      setUnmappedSpecialties(unmappedData);\r\n      setLearnedMappings(learnedData || {});\r\n    } catch (err) {\r\n      console.error('Error loading data:', err);\r\n      setError('Failed to load specialty data');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [mappingService]);\r\n\r\n  // Specialty selection\r\n  const selectSpecialty = useCallback((specialty: IUnmappedSpecialty) => {\r\n    setSelectedSpecialties(prev => {\r\n      if (prev.some(s => s.id === specialty.id)) {\r\n        return prev.filter(s => s.id !== specialty.id);\r\n      } else {\r\n        return [...prev, specialty];\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const deselectSpecialty = useCallback((specialty: IUnmappedSpecialty) => {\r\n    setSelectedSpecialties(prev => prev.filter(s => s.id !== specialty.id));\r\n  }, []);\r\n\r\n  const clearSelectedSpecialties = useCallback(() => {\r\n    setSelectedSpecialties([]);\r\n  }, []);\r\n\r\n  // Mapping operations\r\n  const createMapping = useCallback(async () => {\r\n    if (selectedSpecialties.length === 0) return;\r\n\r\n    try {\r\n      setError(null);\r\n      \r\n      // Use the first specialty name as the standardized name\r\n      const standardizedName = selectedSpecialties[0].name;\r\n      \r\n      const sourceSpecialties = selectedSpecialties.map(specialty => ({\r\n        id: crypto.randomUUID(),\r\n        specialty: specialty.name,\r\n        originalName: specialty.name,\r\n        surveySource: specialty.surveySource,\r\n        mappingId: ''\r\n      }));\r\n\r\n      const mapping = await mappingService.createMapping(standardizedName, sourceSpecialties);\r\n      \r\n      // Update state\r\n      setMappings(prev => [...prev, mapping]);\r\n      setUnmappedSpecialties(prev => \r\n        prev.filter(s => !selectedSpecialties.some(selected => selected.id === s.id))\r\n      );\r\n      setSelectedSpecialties([]);\r\n      setActiveTab('mapped'); // Switch to mapped view after creating\r\n    } catch (err) {\r\n      setError('Failed to create mapping');\r\n      console.error('Error creating mapping:', err);\r\n    }\r\n  }, [selectedSpecialties, mappingService]);\r\n\r\n  const deleteMapping = useCallback(async (mappingId: string) => {\r\n    try {\r\n      setError(null);\r\n      await mappingService.deleteMapping(mappingId);\r\n      \r\n      // Update state\r\n      setMappings(prev => prev.filter(m => m.id !== mappingId));\r\n      \r\n      // Refresh unmapped specialties to show the deleted ones\r\n      const unmappedData = await mappingService.getUnmappedSpecialties();\r\n      setUnmappedSpecialties(unmappedData);\r\n      \r\n      // Switch to unmapped tab\r\n      setActiveTab('unmapped');\r\n    } catch (err) {\r\n      setError('Failed to delete mapping');\r\n      console.error('Error deleting mapping:', err);\r\n    }\r\n  }, [mappingService]);\r\n\r\n  const clearAllMappings = useCallback(async () => {\r\n    try {\r\n      setError(null);\r\n      await mappingService.clearAllMappings();\r\n      \r\n      // Reset state\r\n      setMappings([]);\r\n      setLearnedMappings({});\r\n      setActiveTab('unmapped');\r\n      \r\n      // Reload data\r\n      await loadData();\r\n    } catch (err) {\r\n      setError('Failed to clear all mappings');\r\n      console.error('Error clearing mappings:', err);\r\n    }\r\n  }, [mappingService, loadData]);\r\n\r\n  const removeLearnedMapping = useCallback(async (original: string) => {\r\n    try {\r\n      setError(null);\r\n      await mappingService.removeLearnedMapping(original);\r\n      \r\n      // Update state\r\n      setLearnedMappings(prev => {\r\n        const newLearnedMappings = { ...prev };\r\n        delete newLearnedMappings[original];\r\n        return newLearnedMappings;\r\n      });\r\n    } catch (err) {\r\n      setError('Failed to remove learned mapping');\r\n      console.error('Error removing learned mapping:', err);\r\n    }\r\n  }, [mappingService]);\r\n\r\n  // Auto-mapping\r\n  const autoMap = useCallback(async (config: IAutoMappingConfig) => {\r\n    try {\r\n      setError(null);\r\n      \r\n      // Validate config\r\n      const validation = validateConfig(config);\r\n      if (!validation.isValid) {\r\n        throw new Error(validation.errors.join(', '));\r\n      }\r\n\r\n      // Convert data to new types before calling utility functions\r\n      const convertedUnmapped = unmappedSpecialties.map(convertUnmappedSpecialty);\r\n      const convertedMappings = mappings.map(convertMapping);\r\n\r\n      // Generate suggestions\r\n      const suggestions = generateMappingSuggestions(\r\n        convertedUnmapped,\r\n        convertedMappings,\r\n        learnedMappings,\r\n        config\r\n      );\r\n\r\n      // Create mappings from suggestions\r\n      for (const suggestion of suggestions) {\r\n        if (suggestion.confidence >= config.confidenceThreshold) {\r\n          await mappingService.createMapping(\r\n            suggestion.standardizedName,\r\n            suggestion.specialties.map(s => ({\r\n              id: crypto.randomUUID(),\r\n              specialty: s.name,\r\n              originalName: s.name,\r\n              surveySource: s.surveySource,\r\n              mappingId: ''\r\n            }))\r\n          );\r\n        }\r\n      }\r\n\r\n      // Calculate results\r\n      const results = calculateAutoMappingResults(suggestions, config);\r\n\r\n      // Refresh data\r\n      await loadData();\r\n      \r\n      return { suggestions, results };\r\n    } catch (err) {\r\n      setError('Failed to process auto-mapping');\r\n      console.error('Auto-mapping error:', err);\r\n      throw err;\r\n    }\r\n  }, [unmappedSpecialties, mappings, learnedMappings, mappingService, loadData]);\r\n\r\n  // Utility functions\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n  }, []);\r\n\r\n  const validateConfig = useCallback((config: IAutoMappingConfig) => {\r\n    return validateMappingConfig(config);\r\n  }, []);\r\n\r\n  return {\r\n    // State\r\n    mappings: mappings.map(convertMapping),\r\n    unmappedSpecialties: unmappedSpecialties.map(convertUnmappedSpecialty),\r\n    selectedSpecialties: selectedSpecialties.map(convertUnmappedSpecialty),\r\n    learnedMappings,\r\n    loading,\r\n    error,\r\n    activeTab,\r\n    \r\n    // Computed values\r\n    filteredUnmapped,\r\n    specialtiesBySurvey,\r\n    filteredMappings,\r\n    filteredLearned,\r\n    \r\n    // Actions\r\n    setActiveTab,\r\n    setSelectedSpecialties,\r\n    selectSpecialty,\r\n    deselectSpecialty,\r\n    clearSelectedSpecialties,\r\n    \r\n    // Data operations\r\n    loadData,\r\n    createMapping,\r\n    deleteMapping,\r\n    clearAllMappings,\r\n    removeLearnedMapping,\r\n    \r\n    // Auto-mapping\r\n    autoMap,\r\n    \r\n    // Search and filters\r\n    setSearchTerm,\r\n    setMappedSearchTerm,\r\n    clearError,\r\n    \r\n    // Validation\r\n    validateConfig\r\n  };\r\n};\r\n","import React from 'react';\r\nimport { SpecialtyCardProps } from '../types/mapping';\r\n\r\n/**\r\n * SpecialtyCard component for displaying individual unmapped specialties\r\n * \r\n * @param specialty - The unmapped specialty to display\r\n * @param isSelected - Whether the specialty is currently selected\r\n * @param onSelect - Callback when the specialty is clicked\r\n */\r\nexport const SpecialtyCard: React.FC<SpecialtyCardProps> = ({ \r\n  specialty, \r\n  isSelected, \r\n  onSelect \r\n}) => {\r\n  const handleClick = () => {\r\n    onSelect(specialty);\r\n  };\r\n\r\n  return (\r\n    <button\r\n      onClick={handleClick}\r\n      className={`w-full p-2 mb-1.5 text-left rounded-lg transition-all text-sm ${\r\n        isSelected \r\n          ? 'bg-indigo-100 border-2 border-indigo-500' \r\n          : 'bg-white hover:bg-gray-50 border border-gray-200'\r\n      }`}\r\n    >\r\n      <div className=\"font-medium text-sm\">{specialty.name}</div>\r\n      <div className=\"text-xs text-gray-500\">Frequency: {specialty.frequency}</div>\r\n    </button>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {\r\n  TextField,\r\n  Typography,\r\n  Chip,\r\n  Paper,\r\n  Button,\r\n  InputAdornment,\r\n  Alert\r\n} from '@mui/material';\r\nimport { \r\n  MagnifyingGlassIcon as SearchIcon,\r\n  ExclamationTriangleIcon as WarningIcon,\r\n  BoltIcon\r\n} from '@heroicons/react/24/outline';\r\nimport { UnmappedSpecialtiesProps } from '../types/mapping';\r\nimport { SpecialtyCard } from './SpecialtyCard';\r\nimport { getSurveySourceColor } from '../utils/mappingCalculations';\r\n\r\n/**\r\n * UnmappedSpecialties component for displaying and managing unmapped specialties\r\n * \r\n * @param unmappedSpecialties - List of unmapped specialties\r\n * @param selectedSpecialties - Currently selected specialties\r\n * @param searchTerm - Current search term\r\n * @param onSearchChange - Callback when search term changes\r\n * @param onSpecialtySelect - Callback when a specialty is selected/deselected\r\n * @param onRefresh - Callback to refresh data\r\n */\r\nexport const UnmappedSpecialties: React.FC<UnmappedSpecialtiesProps> = ({\r\n  unmappedSpecialties,\r\n  selectedSpecialties,\r\n  searchTerm,\r\n  onSearchChange,\r\n  onSpecialtySelect,\r\n  onRefresh\r\n}) => {\r\n  // Group specialties by survey source\r\n  const specialtiesBySurvey = new Map<string, typeof unmappedSpecialties>();\r\n  unmappedSpecialties.forEach(specialty => {\r\n    const current = specialtiesBySurvey.get(specialty.surveySource) || [];\r\n    specialtiesBySurvey.set(specialty.surveySource, [...current, specialty]);\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {/* Search Bar */}\r\n      <div className=\"mb-4\">\r\n        <TextField\r\n          fullWidth\r\n          placeholder=\"Search across all surveys...\"\r\n          value={searchTerm}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => onSearchChange(e.target.value)}\r\n          size=\"small\"\r\n          sx={{ \r\n            '& .MuiOutlinedInput-root': {\r\n              fontSize: '0.875rem',\r\n              height: '40px'\r\n            }\r\n          }}\r\n          InputProps={{\r\n            startAdornment: (\r\n              <InputAdornment position=\"start\">\r\n                <SearchIcon className=\"h-4 w-4 text-gray-400\" />\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      {/* Selected Specialties Display */}\r\n      {selectedSpecialties.length > 0 && (\r\n        <div className=\"mb-4\">\r\n          <Typography variant=\"subtitle2\" className=\"mb-2 text-sm\">\r\n            Selected Specialties:\r\n          </Typography>\r\n          <div className=\"flex flex-wrap gap-2\">\r\n            {selectedSpecialties.map((specialty) => (\r\n              <Chip\r\n                key={specialty.id}\r\n                label={`${specialty.name} (${specialty.surveySource})`}\r\n                onDelete={() => onSpecialtySelect(specialty)}\r\n                color=\"primary\"\r\n                size=\"small\"\r\n                sx={{ fontSize: '0.75rem' }}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Specialties Grid */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n        {Array.from(specialtiesBySurvey.entries()).map(([source, specialties]) => {\r\n          const color = getSurveySourceColor(source);\r\n          \r\n          return (\r\n            <Paper key={source} className=\"p-3 relative overflow-hidden\">\r\n              <Typography variant=\"h6\" className=\"mb-3 flex items-center justify-between text-sm font-medium\">\r\n                <span style={{ color }}>{source}</span>\r\n                <Typography variant=\"caption\" color=\"textSecondary\" className=\"text-xs\">\r\n                  {specialties.length} specialties\r\n                </Typography>\r\n              </Typography>\r\n              <div className=\"space-y-1.5\">\r\n                {specialties.map((specialty) => (\r\n                  <SpecialtyCard\r\n                    key={specialty.id}\r\n                    specialty={specialty}\r\n                    isSelected={selectedSpecialties.some(s => s.id === specialty.id)}\r\n                    onSelect={onSpecialtySelect}\r\n                  />\r\n                ))}\r\n              </div>\r\n              <div className=\"absolute bottom-0 inset-x-0 h-1\" style={{ backgroundColor: color }} />\r\n            </Paper>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {/* Empty State */}\r\n      {Array.from(specialtiesBySurvey.entries()).length === 0 && (\r\n        <div className=\"text-center py-8 bg-gray-50 rounded-lg\">\r\n          <WarningIcon className=\"h-8 w-8 text-gray-400 mx-auto mb-3\" />\r\n          <Typography variant=\"h6\" color=\"textSecondary\" className=\"mb-2 text-sm\">\r\n            No Unmapped Specialties Found\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"textSecondary\" className=\"mb-3 text-sm\">\r\n            {searchTerm \r\n              ? \"No specialties match your search criteria\"\r\n              : \"All specialties have been mapped or no survey data is available\"\r\n            }\r\n          </Typography>\r\n          {!searchTerm && (\r\n            <Button\r\n              variant=\"outlined\"\r\n              onClick={onRefresh}\r\n              startIcon={<BoltIcon className=\"h-4 w-4\" />}\r\n              size=\"small\"\r\n              sx={{ fontSize: '0.875rem', textTransform: 'none' }}\r\n            >\r\n              Refresh Data\r\n            </Button>\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Paper, Typography, IconButton, Tooltip } from '@mui/material';\r\nimport { \r\n  PencilIcon as EditIcon, \r\n  TrashIcon as DeleteIcon \r\n} from '@heroicons/react/24/outline';\r\nimport { ISpecialtyMapping } from '../types/mapping';\r\nimport { getSurveySourceColor, formatMappingDate } from '../utils/mappingCalculations';\r\n\r\ninterface MappedSpecialtyItemProps {\r\n  mapping: ISpecialtyMapping;\r\n  onEdit?: () => void;\r\n  onDelete?: () => void;\r\n}\r\n\r\n/**\r\n * MappedSpecialtyItem component for displaying individual mapped specialty items\r\n * \r\n * @param mapping - The specialty mapping to display\r\n * @param onEdit - Optional callback when the mapping is edited\r\n * @param onDelete - Optional callback when the mapping is deleted\r\n */\r\nexport const MappedSpecialtyItem: React.FC<MappedSpecialtyItemProps> = ({ \r\n  mapping, \r\n  onEdit, \r\n  onDelete \r\n}) => {\r\n  return (\r\n    <Paper className=\"p-3 relative bg-gray-50 hover:bg-gray-100 transition-colors duration-200 border border-gray-200 hover:border-gray-300 hover:shadow-md\">\r\n      {/* Header with standardized name and actions */}\r\n      <div className=\"flex justify-between items-center mb-2\">\r\n        <div>\r\n          <Typography variant=\"subtitle1\" className=\"font-medium text-gray-900 text-sm\">\r\n            {mapping.standardizedName}\r\n          </Typography>\r\n          <Typography variant=\"caption\" className=\"text-gray-500 text-xs\">\r\n            Last updated: {formatMappingDate(mapping.updatedAt)}\r\n          </Typography>\r\n        </div>\r\n        <div className=\"flex space-x-1\">\r\n          {onEdit && (\r\n            <Tooltip title=\"Edit mapping\">\r\n              <IconButton onClick={onEdit} size=\"small\">\r\n                <EditIcon className=\"h-4 w-4 text-gray-500\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          )}\r\n          {onDelete && (\r\n            <Tooltip title=\"Delete mapping\">\r\n              <IconButton onClick={onDelete} size=\"small\">\r\n                <DeleteIcon className=\"h-4 w-4 text-gray-500\" />\r\n              </IconButton>\r\n            </Tooltip>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Connected specialties display */}\r\n      <div className=\"relative mt-2\">\r\n        {/* Source specialties in horizontal layout */}\r\n        <div className=\"flex flex-wrap gap-2 ml-6\">\r\n          {mapping.sourceSpecialties.map((specialty, index) => (\r\n            <div key={specialty.id} className=\"relative\">\r\n              {/* Connector line to main specialty */}\r\n              {index > 0 && (\r\n                <div className=\"absolute -left-1 top-1/2 h-0.5 w-2 bg-gray-200\" />\r\n              )}\r\n              \r\n              {/* Specialty card */}\r\n              <div \r\n                className=\"p-2 rounded border border-gray-200 min-w-0 bg-white hover:bg-gray-50 transition-colors duration-150 shadow-sm hover:shadow-md\"\r\n                style={{ \r\n                  borderLeftColor: getSurveySourceColor(specialty.surveySource), \r\n                  borderLeftWidth: '3px' \r\n                }}\r\n              >\r\n                <div className=\"flex justify-between items-center gap-2\">\r\n                  <Typography className=\"font-medium text-sm truncate\">\r\n                    {specialty.specialty}\r\n                  </Typography>\r\n                  <Typography \r\n                    variant=\"caption\" \r\n                    style={{ color: getSurveySourceColor(specialty.surveySource) }} \r\n                    className=\"text-xs font-medium whitespace-nowrap\"\r\n                  >\r\n                    {specialty.surveySource}\r\n                  </Typography>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </Paper>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {\r\n  TextField,\r\n  Typography,\r\n  InputAdornment\r\n} from '@mui/material';\r\nimport { \r\n  MagnifyingGlassIcon as SearchIcon\r\n} from '@heroicons/react/24/outline';\r\nimport { MappedSpecialtiesProps } from '../types/mapping';\r\nimport { MappedSpecialtyItem } from './MappedSpecialtyItem';\r\n\r\n/**\r\n * MappedSpecialties component for displaying mapped specialties with search\r\n * \r\n * @param mappings - List of mapped specialties\r\n * @param searchTerm - Current search term\r\n * @param onSearchChange - Callback when search term changes\r\n * @param onDeleteMapping - Callback when a mapping is deleted\r\n * @param onEditMapping - Optional callback when a mapping is edited\r\n */\r\nexport const MappedSpecialties: React.FC<MappedSpecialtiesProps> = ({\r\n  mappings,\r\n  searchTerm,\r\n  onSearchChange,\r\n  onDeleteMapping,\r\n  onEditMapping\r\n}) => {\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      {/* Search Bar */}\r\n      <div className=\"mb-4\">\r\n        <TextField\r\n          fullWidth\r\n          placeholder=\"Search mapped specialties...\"\r\n          value={searchTerm}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => onSearchChange(e.target.value)}\r\n          size=\"small\"\r\n          sx={{ \r\n            '& .MuiOutlinedInput-root': {\r\n              fontSize: '0.875rem',\r\n              height: '40px'\r\n            }\r\n          }}\r\n          InputProps={{\r\n            startAdornment: (\r\n              <InputAdornment position=\"start\">\r\n                <SearchIcon className=\"h-4 w-4 text-gray-400\" />\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      {/* Mappings List */}\r\n      <div className=\"space-y-3\">\r\n        {mappings.map((mapping) => (\r\n          <MappedSpecialtyItem\r\n            key={mapping.id}\r\n            mapping={mapping}\r\n            onDelete={() => onDeleteMapping(mapping.id)}\r\n            onEdit={onEditMapping ? () => onEditMapping(mapping) : undefined}\r\n          />\r\n        ))}\r\n      </div>\r\n      \r\n      {/* Empty State */}\r\n      {mappings.length === 0 && (\r\n        <div className=\"text-center py-8 bg-gray-50 rounded-lg\">\r\n          <Typography variant=\"body2\" color=\"textSecondary\" className=\"text-sm\">\r\n            {searchTerm \r\n              ? \"No mapped specialties match your search\"\r\n              : \"No mapped specialties yet\"\r\n            }\r\n          </Typography>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {\r\n  TextField,\r\n  Typography,\r\n  InputAdornment\r\n} from '@mui/material';\r\nimport { \r\n  MagnifyingGlassIcon as SearchIcon\r\n} from '@heroicons/react/24/outline';\r\nimport { LearnedMappingsProps } from '../types/mapping';\r\nimport { MappedSpecialtyItem } from './MappedSpecialtyItem';\r\n\r\n/**\r\n * LearnedMappings component for displaying learned mappings\r\n * \r\n * @param learnedMappings - Record of learned mappings (original -> corrected)\r\n * @param searchTerm - Current search term\r\n * @param onSearchChange - Callback when search term changes\r\n * @param onRemoveMapping - Callback when a learned mapping is removed\r\n */\r\nexport const LearnedMappings: React.FC<LearnedMappingsProps> = ({\r\n  learnedMappings,\r\n  searchTerm,\r\n  onSearchChange,\r\n  onRemoveMapping\r\n}) => {\r\n  // Convert learned mappings to the format expected by MappedSpecialtyItem\r\n  const learnedMappingsList = Object.entries(learnedMappings)\r\n    .filter(([original, corrected]) => \r\n      !searchTerm || \r\n      original.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      corrected.toLowerCase().includes(searchTerm.toLowerCase())\r\n    )\r\n    .map(([original, corrected]) => ({\r\n      id: original,\r\n      standardizedName: corrected,\r\n      sourceSpecialties: [{\r\n        id: crypto.randomUUID(),\r\n        specialty: original,\r\n        originalName: original,\r\n        surveySource: 'Custom' as const,\r\n        mappingId: original\r\n      }],\r\n      createdAt: new Date(),\r\n      updatedAt: new Date()\r\n    }));\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      {/* Search Bar */}\r\n      <div className=\"mb-4\">\r\n        <TextField\r\n          fullWidth\r\n          placeholder=\"Search learned mappings...\"\r\n          value={searchTerm}\r\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => onSearchChange(e.target.value)}\r\n          size=\"small\"\r\n          sx={{ \r\n            '& .MuiOutlinedInput-root': {\r\n              fontSize: '0.875rem',\r\n              height: '40px'\r\n            }\r\n          }}\r\n          InputProps={{\r\n            startAdornment: (\r\n              <InputAdornment position=\"start\">\r\n                <SearchIcon className=\"h-4 w-4 text-gray-400\" />\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      {/* Learned Mappings List */}\r\n      <div className=\"space-y-4\">\r\n        {learnedMappingsList.map((mapping) => (\r\n          <MappedSpecialtyItem\r\n            key={mapping.id}\r\n            mapping={mapping}\r\n            onDelete={() => onRemoveMapping(mapping.id)}\r\n          />\r\n        ))}\r\n\r\n        {/* Empty State */}\r\n        {Object.keys(learnedMappings).length === 0 && (\r\n          <div className=\"text-center py-12 bg-gray-50 rounded-lg\">\r\n            <Typography variant=\"body1\" className=\"text-gray-500\">\r\n              No learned mappings yet\r\n            </Typography>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  Paper,\r\n  Typography,\r\n  Slider,\r\n  FormControlLabel,\r\n  Switch,\r\n  Box,\r\n  Alert,\r\n  Chip,\r\n  Divider,\r\n  CircularProgress\r\n} from '@mui/material';\r\nimport { \r\n  BoltIcon, \r\n  AdjustmentsHorizontalIcon \r\n} from '@heroicons/react/24/outline';\r\nimport { AutoMappingProps, IAutoMappingConfig } from '../types/mapping';\r\n\r\n/**\r\n * AutoMapping component for the auto-mapping dialog\r\n * \r\n * @param isOpen - Whether the dialog is open\r\n * @param onClose - Callback to close the dialog\r\n * @param onAutoMap - Callback to execute auto-mapping\r\n * @param loading - Whether auto-mapping is in progress\r\n */\r\nexport const AutoMapping: React.FC<AutoMappingProps> = ({ \r\n  isOpen, \r\n  onClose, \r\n  onAutoMap, \r\n  loading = false \r\n}) => {\r\n  // Configuration state\r\n  const [confidenceThreshold, setConfidenceThreshold] = useState<number>(0.8);\r\n  const [useExistingMappings, setUseExistingMappings] = useState<boolean>(true);\r\n  const [useFuzzyMatching, setUseFuzzyMatching] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const handleAutoMap = async () => {\r\n    try {\r\n      setError(null);\r\n      \r\n      const config: IAutoMappingConfig = {\r\n        confidenceThreshold,\r\n        useExistingMappings,\r\n        useFuzzyMatching\r\n      };\r\n\r\n      await onAutoMap(config);\r\n      onClose();\r\n    } catch (err) {\r\n      setError('Failed to process auto-mapping');\r\n      console.error('Auto-mapping error:', err);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setError(null);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={isOpen}\r\n      onClose={handleClose}\r\n      maxWidth=\"md\"\r\n      fullWidth\r\n    >\r\n      <DialogTitle>\r\n        <div className=\"flex items-center gap-2\">\r\n          <BoltIcon className=\"h-6 w-6 text-yellow-500\" />\r\n          <span>Auto-Map Specialties</span>\r\n        </div>\r\n      </DialogTitle>\r\n      \r\n      <DialogContent>\r\n        <Typography color=\"textSecondary\" className=\"mb-4\">\r\n          Automatically map specialties based on similarity and existing mappings.\r\n        </Typography>\r\n\r\n        <Divider className=\"mb-6\" />\r\n\r\n        {/* Configuration Section */}\r\n        <div className=\"space-y-6 mb-8\">\r\n          {/* Confidence Threshold */}\r\n          <div>\r\n            <Typography variant=\"subtitle1\" className=\"mb-2 font-medium\">\r\n              Confidence Threshold\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"textSecondary\" className=\"mb-3\">\r\n              Only create mappings with confidence above this threshold\r\n            </Typography>\r\n            <Box className=\"px-2\">\r\n              <Slider\r\n                value={confidenceThreshold}\r\n                onChange={(_event: Event, value: number | number[]) => setConfidenceThreshold(value as number)}\r\n                min={0.1}\r\n                max={1}\r\n                step={0.1}\r\n                marks={[\r\n                  { value: 0.1, label: '0.1' },\r\n                  { value: 0.5, label: '0.5' },\r\n                  { value: 1, label: '1.0' }\r\n                ]}\r\n                valueLabelDisplay=\"auto\"\r\n                valueLabelFormat={(value: number) => `${(value * 100).toFixed(0)}%`}\r\n              />\r\n            </Box>\r\n            <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\r\n              <span>Low (More mappings, less accurate)</span>\r\n              <span>High (Fewer mappings, more accurate)</span>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Options */}\r\n          <div className=\"space-y-4\">\r\n            <Typography variant=\"subtitle1\" className=\"font-medium\">\r\n              Mapping Options\r\n            </Typography>\r\n            \r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={useExistingMappings}\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setUseExistingMappings(e.target.checked)}\r\n                />\r\n              }\r\n              label=\"Use existing mappings as reference\"\r\n            />\r\n            \r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={useFuzzyMatching}\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => setUseFuzzyMatching(e.target.checked)}\r\n                />\r\n              }\r\n              label=\"Enable fuzzy matching for similar names\"\r\n            />\r\n          </div>\r\n\r\n          {/* Current Settings Summary */}\r\n          <Paper className=\"p-4 bg-gray-50\">\r\n            <Typography variant=\"subtitle2\" className=\"mb-2 font-medium\">\r\n              Current Settings\r\n            </Typography>\r\n            <div className=\"flex flex-wrap gap-2\">\r\n              <Chip \r\n                label={`Confidence: ${(confidenceThreshold * 100).toFixed(0)}%`} \r\n                size=\"small\" \r\n                color=\"primary\" \r\n              />\r\n              <Chip \r\n                label={useExistingMappings ? \"Use existing mappings\" : \"Ignore existing mappings\"} \r\n                size=\"small\" \r\n                variant=\"outlined\" \r\n              />\r\n              <Chip \r\n                label={useFuzzyMatching ? \"Fuzzy matching enabled\" : \"Fuzzy matching disabled\"} \r\n                size=\"small\" \r\n                variant=\"outlined\" \r\n              />\r\n            </div>\r\n          </Paper>\r\n        </div>\r\n\r\n        {/* Error Display */}\r\n        {error && (\r\n          <Alert severity=\"error\" className=\"mb-4\">\r\n            {error}\r\n          </Alert>\r\n        )}\r\n      </DialogContent>\r\n\r\n      <DialogActions className=\"p-4\">\r\n        <Button onClick={handleClose} disabled={loading}>\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          onClick={handleAutoMap}\r\n          variant=\"contained\"\r\n          startIcon={loading ? <CircularProgress size={16} /> : <BoltIcon className=\"h-4 w-4\" />}\r\n          disabled={loading}\r\n        >\r\n          {loading ? 'Processing...' : 'Auto-Map Specialties'}\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { \r\n  PlusIcon as AddIcon,\r\n  BoltIcon,\r\n  TrashIcon as DeleteSweepIcon,\r\n  ChevronDownIcon,\r\n  ChevronRightIcon,\r\n  LightBulbIcon\r\n} from '@heroicons/react/24/outline';\r\nimport { SpecialtyMappingProps } from '../types/mapping';\r\nimport { useMappingData } from '../hooks/useMappingData';\r\nimport { UnmappedSpecialties } from './UnmappedSpecialties';\r\nimport { MappedSpecialties } from './MappedSpecialties';\r\nimport { LearnedMappings } from './LearnedMappings';\r\nimport { AutoMapping } from './AutoMapping';\r\nimport LoadingSpinner from '../../../components/ui/loading-spinner';\r\n\r\n/**\r\n * SpecialtyMapping component - Main orchestrator for specialty mapping functionality\r\n * \r\n * @param onMappingChange - Optional callback when mappings change\r\n * @param onUnmappedChange - Optional callback when unmapped specialties change\r\n */\r\nexport const SpecialtyMapping: React.FC<SpecialtyMappingProps> = ({\r\n  onMappingChange,\r\n  onUnmappedChange\r\n}) => {\r\n  // Auto-mapping dialog state\r\n  const [isAutoMapOpen, setIsAutoMapOpen] = useState(false);\r\n  const [isAutoMapping, setIsAutoMapping] = useState(false);\r\n  const [showHelp, setShowHelp] = useState(false);\r\n\r\n  // Custom hook for data management\r\n  const {\r\n    // State\r\n    mappings,\r\n    unmappedSpecialties,\r\n    selectedSpecialties,\r\n    learnedMappings,\r\n    loading,\r\n    error,\r\n    activeTab,\r\n    \r\n    // Computed values\r\n    filteredUnmapped,\r\n    filteredMappings,\r\n    filteredLearned,\r\n    \r\n    // Actions\r\n    setActiveTab,\r\n    selectSpecialty,\r\n    clearSelectedSpecialties,\r\n    \r\n    // Data operations\r\n    loadData,\r\n    createMapping,\r\n    deleteMapping,\r\n    clearAllMappings,\r\n    removeLearnedMapping,\r\n    \r\n    // Auto-mapping\r\n    autoMap,\r\n    \r\n    // Search and filters\r\n    setSearchTerm,\r\n    setMappedSearchTerm,\r\n    clearError\r\n  } = useMappingData();\r\n\r\n  // Handle auto-mapping\r\n  const handleAutoMap = async (config: any) => {\r\n    setIsAutoMapping(true);\r\n    try {\r\n      await autoMap(config);\r\n      setActiveTab('mapped');\r\n    } finally {\r\n      setIsAutoMapping(false);\r\n    }\r\n  };\r\n\r\n  // Handle clear all mappings\r\n  const handleClearAllMappings = () => {\r\n    if (window.confirm('Are you sure you want to clear all mappings? This cannot be undone.')) {\r\n      clearAllMappings();\r\n    }\r\n  };\r\n\r\n  // Handle remove learned mapping\r\n  const handleRemoveLearnedMapping = (original: string) => {\r\n    if (window.confirm('Remove this learned mapping?')) {\r\n      removeLearnedMapping(original);\r\n    }\r\n  };\r\n\r\n  // Notify parent components of changes\r\n  useEffect(() => {\r\n    onMappingChange?.(mappings);\r\n  }, [mappings, onMappingChange]);\r\n\r\n  useEffect(() => {\r\n    onUnmappedChange?.(unmappedSpecialties);\r\n  }, [unmappedSpecialties, onUnmappedChange]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <LoadingSpinner \r\n        message=\"Loading specialty mappings...\" \r\n        fullScreen={true}\r\n        size=\"lg\"\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"w-full min-h-screen\">\r\n        <div className=\"w-full flex flex-col gap-4\">\r\n\r\n          {/* Help Section */}\r\n          <div className=\"w-full bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\r\n            <div className=\"flex items-center justify-between mb-4\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <button\r\n                  onClick={() => setShowHelp(!showHelp)}\r\n                  className=\"p-1 hover:bg-gray-100 rounded-lg transition-colors duration-200\"\r\n                  aria-label={showHelp ? \"Collapse help section\" : \"Expand help section\"}\r\n                >\r\n                  {showHelp ? (\r\n                    <ChevronDownIcon className=\"h-5 w-5 text-gray-500\" />\r\n                  ) : (\r\n                    <ChevronRightIcon className=\"h-5 w-5 text-gray-500\" />\r\n                  )}\r\n                </button>\r\n                <h3 className=\"text-lg font-semibold text-gray-900\">Specialty Mapping Help</h3>\r\n              </div>\r\n              <div className=\"flex items-center gap-2\">\r\n                <LightBulbIcon className=\"h-5 w-5 text-indigo-600\" />\r\n              </div>\r\n            </div>\r\n            \r\n            {showHelp && (\r\n              <div className=\"space-y-4\">\r\n                <div className=\"bg-indigo-50 border border-indigo-200 rounded-lg p-4\">\r\n                  <h4 className=\"font-semibold text-indigo-900 mb-2\">How Specialty Mapping Works</h4>\r\n                  <ul className=\"text-sm text-indigo-800 space-y-1\">\r\n                    <li>• Map specialty names from different surveys to standardized names</li>\r\n                    <li>• Use auto-mapping for bulk processing with configurable confidence levels</li>\r\n                    <li>• Review and edit mappings in the \"Mapped Specialties\" tab</li>\r\n                    <li>• Learned mappings are automatically created based on your patterns</li>\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Main Mapping Section */}\r\n          <div className=\"w-full bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\r\n            <div className=\"flex items-center justify-between mb-4\">\r\n              <h3 className=\"text-lg font-semibold text-gray-900\">Specialty Mapping</h3>\r\n              <div className=\"flex space-x-2\">\r\n                {activeTab !== 'learned' && (\r\n                  <>\r\n                    <button\r\n                      onClick={() => setIsAutoMapOpen(true)}\r\n                      className=\"inline-flex items-center px-3 py-1.5 text-sm font-medium rounded-lg text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors duration-200\"\r\n                    >\r\n                      <BoltIcon className=\"h-4 w-4 mr-2\" />\r\n                      Auto-Map Specialties\r\n                    </button>\r\n                    <button\r\n                      onClick={createMapping}\r\n                      disabled={selectedSpecialties.length === 0}\r\n                      className=\"inline-flex items-center px-3 py-1.5 text-sm font-medium rounded-lg text-white bg-emerald-600 hover:bg-emerald-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed\"\r\n                    >\r\n                      <AddIcon className=\"h-4 w-4 mr-2\" />\r\n                      Create Mapping\r\n                    </button>\r\n                  </>\r\n                )}\r\n                {activeTab === 'mapped' && (\r\n                  <button\r\n                    onClick={handleClearAllMappings}\r\n                    className=\"inline-flex items-center px-3 py-1.5 text-sm font-medium rounded-lg text-red-600 hover:text-red-700 hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors duration-200\"\r\n                  >\r\n                    <DeleteSweepIcon className=\"h-4 w-4 mr-2\" />\r\n                    Clear All\r\n                  </button>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Error Display */}\r\n            {error && (\r\n              <div className=\"mb-4 p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n                <div className=\"flex\">\r\n                  <div className=\"flex-shrink-0\">\r\n                    <svg className=\"h-5 w-5 text-red-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                      <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\r\n                    </svg>\r\n                  </div>\r\n                  <div className=\"ml-3\">\r\n                    <p className=\"text-sm text-red-800\">{error}</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Tabs */}\r\n            <div className=\"border-b border-gray-200 mb-4\">\r\n              <nav className=\"-mb-px flex space-x-8\">\r\n                {[\r\n                  { key: 'unmapped', label: 'Unmapped Specialties' },\r\n                  { key: 'mapped', label: 'Mapped Specialties' },\r\n                  { key: 'learned', label: 'Learned Mappings' }\r\n                ].map((tab) => (\r\n                  <button\r\n                    key={tab.key}\r\n                    onClick={() => setActiveTab(tab.key as 'unmapped' | 'mapped' | 'learned')}\r\n                    className={`py-2 px-1 border-b-2 font-medium text-sm transition-colors duration-200 ${\r\n                      activeTab === tab.key\r\n                        ? 'border-indigo-500 text-indigo-600'\r\n                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\r\n                    }`}\r\n                  >\r\n                    {tab.label}\r\n                  </button>\r\n                ))}\r\n              </nav>\r\n            </div>\r\n\r\n            {/* Tab Content - Simple and instant */}\r\n            <div className=\"min-h-[400px]\">\r\n              {activeTab === 'unmapped' && (\r\n                <UnmappedSpecialties\r\n                  unmappedSpecialties={filteredUnmapped}\r\n                  selectedSpecialties={selectedSpecialties}\r\n                  searchTerm=\"\"\r\n                  onSearchChange={setSearchTerm}\r\n                  onSpecialtySelect={selectSpecialty}\r\n                  onRefresh={loadData}\r\n                />\r\n              )}\r\n              {activeTab === 'mapped' && (\r\n                <MappedSpecialties\r\n                  mappings={filteredMappings}\r\n                  searchTerm=\"\"\r\n                  onSearchChange={setMappedSearchTerm}\r\n                  onDeleteMapping={deleteMapping}\r\n                />\r\n              )}\r\n              {activeTab === 'learned' && (\r\n                <LearnedMappings\r\n                  learnedMappings={filteredLearned}\r\n                  searchTerm=\"\"\r\n                  onSearchChange={setMappedSearchTerm}\r\n                  onRemoveMapping={handleRemoveLearnedMapping}\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Auto-Mapping Dialog */}\r\n          <AutoMapping\r\n            isOpen={isAutoMapOpen}\r\n            onClose={() => setIsAutoMapOpen(false)}\r\n            onAutoMap={handleAutoMap}\r\n            loading={isAutoMapping}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { MappingHelpProps } from '../types/mapping';\r\nimport { \r\n  LightBulbIcon, \r\n  ChevronDownIcon \r\n} from '@heroicons/react/24/outline';\r\n\r\n/**\r\n * MappingHelp component for displaying help information about specialty mapping\r\n * \r\n * @param isOpen - Whether the help section is expanded\r\n * @param onToggle - Callback to toggle the help section\r\n */\r\nexport const MappingHelp: React.FC<MappingHelpProps> = ({ \r\n  isOpen, \r\n  onToggle \r\n}) => {\r\n  return (\r\n    <div className=\"mb-6\">\r\n      <button\r\n        onClick={onToggle}\r\n        className=\"w-full flex items-center justify-between px-4 py-2 bg-indigo-50 hover:bg-indigo-100 border border-indigo-200 rounded font-medium mb-2\"\r\n      >\r\n        <span className=\"flex items-center gap-2\">\r\n          <LightBulbIcon className=\"h-5 w-5 text-indigo-600\" />\r\n          <span>Specialty Mapping Help</span>\r\n        </span>\r\n        <ChevronDownIcon \r\n          className={`h-5 w-5 text-indigo-600 transition-transform duration-200 ${isOpen ? 'rotate-180' : ''}`}\r\n        />\r\n      </button>\r\n      \r\n      {isOpen && (\r\n        <div className=\"p-4 bg-white border border-indigo-100 rounded shadow text-sm space-y-3\">\r\n          <h3 className=\"font-bold text-indigo-700 mb-1\">How Auto-Mapping Works</h3>\r\n          <ul className=\"list-disc pl-5 mb-2\">\r\n            <li>The app uses smart matching (including fuzzy logic and learned mappings) to suggest standardized specialties for each survey's specialty names.</li>\r\n            <li>Auto-mapping considers spelling, abbreviations, and previous user corrections to improve accuracy.</li>\r\n            <li>You can adjust the confidence threshold and enable/disable fuzzy matching in the Auto-Map dialog.</li>\r\n          </ul>\r\n          \r\n          <h3 className=\"font-bold text-indigo-700 mb-1\">How to Review and Fix Mappings</h3>\r\n          <ul className=\"list-disc pl-5 mb-2\">\r\n            <li>After auto-mapping, review the suggested mappings in the \"Mapped\" tab.</li>\r\n            <li>If a specialty is mapped incorrectly, you can delete the mapping and manually remap it by selecting the correct specialties and clicking \"Create Mapping.\"</li>\r\n            <li>Use the search bar to quickly find and review specific specialties.</li>\r\n            <li>Clearing all mappings will reset the process and allow you to start over.</li>\r\n          </ul>\r\n          \r\n          <h3 className=\"font-bold text-indigo-700 mb-1\">Best Practices</h3>\r\n          <ul className=\"list-disc pl-5\">\r\n            <li>Always review auto-mapped results for accuracy, especially for uncommon or ambiguous specialty names.</li>\r\n            <li>Use consistent naming conventions in your source data for best results.</li>\r\n            <li>Contact support if you encounter persistent mapping issues.</li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { cn } from '../../utils/cn';\r\n\r\ninterface LoadingSpinnerProps {\r\n  message?: string;\r\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\r\n  variant?: 'default' | 'primary' | 'secondary' | 'success' | 'warning' | 'error';\r\n  fullScreen?: boolean;\r\n  overlay?: boolean;\r\n  className?: string;\r\n}\r\n\r\nconst LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ \r\n  message = 'Loading...', \r\n  size = 'md',\r\n  variant = 'primary',\r\n  fullScreen = false,\r\n  overlay = false,\r\n  className\r\n}) => {\r\n  const sizeClasses = {\r\n    xs: 'w-4 h-4',\r\n    sm: 'w-6 h-6', \r\n    md: 'w-8 h-8',\r\n    lg: 'w-12 h-12',\r\n    xl: 'w-16 h-16'\r\n  };\r\n\r\n  const variantClasses = {\r\n    default: 'text-gray-600',\r\n    primary: 'text-indigo-600',\r\n    secondary: 'text-gray-500',\r\n    success: 'text-emerald-600',\r\n    warning: 'text-amber-600',\r\n    error: 'text-red-600'\r\n  };\r\n\r\n  const spinnerSize = sizeClasses[size];\r\n  const spinnerColor = variantClasses[variant];\r\n\r\n  const SpinnerIcon = () => (\r\n    <svg \r\n      className={cn(\r\n        'animate-spin',\r\n        spinnerSize,\r\n        spinnerColor,\r\n        'inline-block'\r\n      )}\r\n      xmlns=\"http://www.w3.org/2000/svg\" \r\n      fill=\"none\" \r\n      viewBox=\"0 0 24 24\"\r\n    >\r\n      <circle \r\n        className=\"opacity-25\" \r\n        cx=\"12\" \r\n        cy=\"12\" \r\n        r=\"10\" \r\n        stroke=\"currentColor\" \r\n        strokeWidth=\"4\"\r\n      />\r\n      <path \r\n        className=\"opacity-75\" \r\n        fill=\"currentColor\" \r\n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\r\n      />\r\n    </svg>\r\n  );\r\n\r\n  const content = (\r\n    <div className={cn(\r\n      'flex flex-col items-center justify-center gap-3',\r\n      fullScreen ? 'min-h-screen' : 'min-h-[200px]',\r\n      className\r\n    )}>\r\n      <SpinnerIcon />\r\n      {message && (\r\n        <p className={cn(\r\n          'text-sm font-medium text-center',\r\n          variant === 'default' ? 'text-gray-600' : 'text-gray-700'\r\n        )}>\r\n          {message}\r\n        </p>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  if (overlay) {\r\n    return (\r\n      <div className=\"fixed inset-0 flex items-center justify-center bg-white/90 backdrop-blur-sm z-50\">\r\n        {content}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return content;\r\n};\r\n\r\n// Button loading spinner for inline use\r\nexport const ButtonSpinner: React.FC<{ size?: 'sm' | 'md' }> = ({ size = 'md' }) => {\r\n  const sizeClasses = {\r\n    sm: 'w-4 h-4',\r\n    md: 'w-5 h-5'\r\n  };\r\n\r\n  return (\r\n    <svg \r\n      className={cn(\r\n        'animate-spin text-current',\r\n        sizeClasses[size]\r\n      )}\r\n      xmlns=\"http://www.w3.org/2000/svg\" \r\n      fill=\"none\" \r\n      viewBox=\"0 0 24 24\"\r\n    >\r\n      <circle \r\n        className=\"opacity-25\" \r\n        cx=\"12\" \r\n        cy=\"12\" \r\n        r=\"10\" \r\n        stroke=\"currentColor\" \r\n        strokeWidth=\"4\"\r\n      />\r\n      <path \r\n        className=\"opacity-75\" \r\n        fill=\"currentColor\" \r\n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\r\n      />\r\n    </svg>\r\n  );\r\n};\r\n\r\n// Page loading spinner for full page loads\r\nexport const PageSpinner: React.FC<{ message?: string }> = ({ message = 'Loading page...' }) => (\r\n  <LoadingSpinner \r\n    message={message}\r\n    size=\"lg\"\r\n    variant=\"primary\"\r\n    fullScreen={true}\r\n  />\r\n);\r\n\r\n// Inline loading spinner for small areas\r\nexport const InlineSpinner: React.FC<{ message?: string; size?: 'sm' | 'md' }> = ({ \r\n  message, \r\n  size = 'md' \r\n}) => (\r\n  <LoadingSpinner \r\n    message={message}\r\n    size={size}\r\n    variant=\"default\"\r\n    className=\"py-8\"\r\n  />\r\n);\r\n\r\n// Overlay loading spinner for modal/overlay contexts\r\nexport const OverlaySpinner: React.FC<{ message?: string }> = ({ message = 'Processing...' }) => (\r\n  <LoadingSpinner \r\n    message={message}\r\n    size=\"md\"\r\n    variant=\"primary\"\r\n    overlay={true}\r\n  />\r\n);\r\n\r\nexport default LoadingSpinner;\r\n"],"names":["normalizeSpecialty","specialty","toLowerCase","replace","trim","calculateSimilarity","specialty1","specialty2","norm1","norm2","words1","split","filter","w","length","words2","common","includes","union","Set","size","SURVEY_SOURCE_COLORS","filterUnmappedSpecialties","specialties","filters","searchTerm","searchLower","name","surveySource","frequency","groupSpecialtiesBySurvey","grouped","Map","forEach","current","get","set","filterMappedSpecialties","mappings","mapping","standardizedName","sourceSpecialties","some","filterLearnedMappings","learnedMappings","filtered","Object","entries","_ref","original","corrected","generateMappingSuggestions","unmappedSpecialties","existingMappings","config","suggestions","processedSpecialties","specialtyGroups","normalizedName","confidence","useExistingMappings","existingMatch","find","mappingNormalized","Math","max","useFuzzyMatching","similarMappings","reduce","best","bestSimilarity","confidenceThreshold","push","map","s","add","id","calculateAutoMappingResults","total","mapped","skipped","validateMappingConfig","errors","isValid","formatMappingDate","date","Date","toLocaleDateString","month","day","year","getSurveySourceColor","source","calculateMappingStats","totalMappings","totalUnmapped","totalSourceSpecialties","sum","averageSpecialtiesPerMapping","sourceCounts","count","mostCommonSurveySource","maxCount","useMappingData","setMappings","useState","setUnmappedSpecialties","selectedSpecialties","setSelectedSpecialties","setLearnedMappings","loading","setLoading","error","setError","activeTab","setActiveTab","setSearchTerm","mappedSearchTerm","setMappedSearchTerm","mappingService","useMemo","SpecialtyMappingService","LocalStorageService","useEffect","loadData","keys","convertMapping","_objectSpread","crypto","randomUUID","convertUnmappedSpecialty","filteredUnmapped","convertedUnmapped","specialtiesBySurvey","filteredMappings","convertedMappings","filteredLearned","useCallback","async","console","log","mappingsData","unmappedData","learnedData","Promise","all","getAllMappings","getUnmappedSpecialties","getLearnedMappings","unmapped","learned","err","selectSpecialty","prev","deselectSpecialty","clearSelectedSpecialties","createMapping","originalName","mappingId","selected","deleteMapping","m","clearAllMappings","removeLearnedMapping","newLearnedMappings","autoMap","validation","validateConfig","Error","join","suggestion","results","clearError","SpecialtyCard","isSelected","onSelect","_jsxs","onClick","handleClick","className","concat","children","_jsx","UnmappedSpecialties","onSearchChange","onSpecialtySelect","onRefresh","_Fragment","TextField","fullWidth","placeholder","value","onChange","e","target","sx","fontSize","height","InputProps","startAdornment","InputAdornment","position","SearchIcon","Typography","variant","Chip","label","onDelete","color","Array","from","_ref2","Paper","style","backgroundColor","WarningIcon","Button","startIcon","BoltIcon","textTransform","MappedSpecialtyItem","onEdit","updatedAt","Tooltip","title","IconButton","EditIcon","DeleteIcon","index","borderLeftColor","borderLeftWidth","MappedSpecialties","onDeleteMapping","onEditMapping","undefined","LearnedMappings","onRemoveMapping","learnedMappingsList","_ref3","createdAt","AutoMapping","isOpen","onClose","onAutoMap","setConfidenceThreshold","setUseExistingMappings","setUseFuzzyMatching","handleClose","Dialog","open","maxWidth","DialogTitle","DialogContent","Divider","Box","Slider","_event","min","step","marks","valueLabelDisplay","valueLabelFormat","toFixed","FormControlLabel","control","Switch","checked","Alert","severity","DialogActions","disabled","CircularProgress","SpecialtyMapping","onMappingChange","onUnmappedChange","isAutoMapOpen","setIsAutoMapOpen","isAutoMapping","setIsAutoMapping","showHelp","setShowHelp","LoadingSpinner","message","fullScreen","ChevronDownIcon","ChevronRightIcon","LightBulbIcon","AddIcon","handleClearAllMappings","window","confirm","DeleteSweepIcon","viewBox","fill","fillRule","d","clipRule","key","tab","MappingHelp","onToggle","overlay","spinnerSize","xs","sm","md","lg","xl","spinnerColor","default","primary","secondary","success","warning","SpinnerIcon","cn","xmlns","cx","cy","r","stroke","strokeWidth","content","ButtonSpinner"],"sourceRoot":""}